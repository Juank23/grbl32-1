ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"nuts_bolts.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	__aeabi_ui2f
  16              		.global	__aeabi_fcmpeq
  17              		.global	__aeabi_f2d
  18              		.global	__aeabi_dmul
  19              		.global	__aeabi_d2f
  20              		.global	__aeabi_fmul
  21              		.section	.text.read_float,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	read_float
  25              		.syntax unified
  26              		.thumb
  27              		.thumb_func
  28              		.fpu softvfp
  30              	read_float:
  31              	.LFB703:
  32              		.file 1 "grbl/nuts_bolts.c"
   1:grbl/nuts_bolts.c **** /*
   2:grbl/nuts_bolts.c ****   nuts_bolts.c - Shared functions
   3:grbl/nuts_bolts.c ****   Part of Grbl
   4:grbl/nuts_bolts.c **** 
   5:grbl/nuts_bolts.c ****   Copyright (c) 2011-2016 Sungeun K. Jeon for Gnea Research LLC
   6:grbl/nuts_bolts.c ****   Copyright (c) 2009-2011 Simen Svale Skogsrud
   7:grbl/nuts_bolts.c ****   Copyright (c) 2018-2019 Thomas Truong
   8:grbl/nuts_bolts.c **** 
   9:grbl/nuts_bolts.c ****   Grbl is free software: you can redistribute it and/or modify
  10:grbl/nuts_bolts.c ****   it under the terms of the GNU General Public License as published by
  11:grbl/nuts_bolts.c ****   the Free Software Foundation, either version 3 of the License, or
  12:grbl/nuts_bolts.c ****   (at your option) any later version.
  13:grbl/nuts_bolts.c **** 
  14:grbl/nuts_bolts.c ****   Grbl is distributed in the hope that it will be useful,
  15:grbl/nuts_bolts.c ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:grbl/nuts_bolts.c ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:grbl/nuts_bolts.c ****   GNU General Public License for more details.
  18:grbl/nuts_bolts.c **** 
  19:grbl/nuts_bolts.c ****   You should have received a copy of the GNU General Public License
  20:grbl/nuts_bolts.c ****   along with Grbl.  If not, see <http://www.gnu.org/licenses/>.
  21:grbl/nuts_bolts.c **** */
  22:grbl/nuts_bolts.c **** 
  23:grbl/nuts_bolts.c **** #include "grbl.h"
  24:grbl/nuts_bolts.c **** 
  25:grbl/nuts_bolts.c **** 
  26:grbl/nuts_bolts.c **** #define MAX_INT_DIGITS 8 // Maximum number of digits in int32 (and float)
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 2


  27:grbl/nuts_bolts.c **** 
  28:grbl/nuts_bolts.c **** 
  29:grbl/nuts_bolts.c **** // Extracts a floating point value from a string. The following code is based loosely on
  30:grbl/nuts_bolts.c **** // the avr-libc strtod() function by Michael Stumpf and Dmitry Xmelkov and many freely
  31:grbl/nuts_bolts.c **** // available conversion method examples, but has been highly optimized for Grbl. For known
  32:grbl/nuts_bolts.c **** // CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
  33:grbl/nuts_bolts.c **** // Scientific notation is officially not supported by g-code, and the 'E' character may
  34:grbl/nuts_bolts.c **** // be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
  35:grbl/nuts_bolts.c **** // NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
  36:grbl/nuts_bolts.c **** uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
  37:grbl/nuts_bolts.c **** {
  33              		.loc 1 37 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 0
  36              		@ frame_needed = 0, uses_anonymous_args = 0
  37              	.LVL0:
  38 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 40
  41              		.cfi_offset 3, -40
  42              		.cfi_offset 4, -36
  43              		.cfi_offset 5, -32
  44              		.cfi_offset 6, -28
  45              		.cfi_offset 7, -24
  46              		.cfi_offset 8, -20
  47              		.cfi_offset 9, -16
  48              		.cfi_offset 10, -12
  49              		.cfi_offset 11, -8
  50              		.cfi_offset 14, -4
  38:grbl/nuts_bolts.c ****   char *ptr = line + *char_counter;
  51              		.loc 1 38 0
  52 0004 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
  39:grbl/nuts_bolts.c ****   unsigned char c;
  40:grbl/nuts_bolts.c **** 
  41:grbl/nuts_bolts.c ****   // Grab first character and increment pointer. No spaces assumed in line.
  42:grbl/nuts_bolts.c ****   c = *ptr++;
  53              		.loc 1 42 0
  54 0006 035D     		ldrb	r3, [r0, r4]	@ zero_extendqisi2
  38:grbl/nuts_bolts.c ****   char *ptr = line + *char_counter;
  55              		.loc 1 38 0
  56 0008 0519     		adds	r5, r0, r4
  57              	.LVL1:
  43:grbl/nuts_bolts.c **** 
  44:grbl/nuts_bolts.c ****   // Capture initial positive/minus character
  45:grbl/nuts_bolts.c ****   bool isnegative = false;
  46:grbl/nuts_bolts.c ****   if (c == '-') {
  58              		.loc 1 46 0
  59 000a 2D2B     		cmp	r3, #45
  60 000c 6CD0     		beq	.L36
  47:grbl/nuts_bolts.c ****     isnegative = true;
  48:grbl/nuts_bolts.c ****     c = *ptr++;
  49:grbl/nuts_bolts.c ****   } else if (c == '+') {
  61              		.loc 1 49 0
  62 000e 2B2B     		cmp	r3, #43
  63 0010 1DD0     		beq	.L4
  45:grbl/nuts_bolts.c ****   if (c == '-') {
  64              		.loc 1 45 0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 3


  65 0012 4FF0000A 		mov	r10, #0
  42:grbl/nuts_bolts.c **** 
  66              		.loc 1 42 0
  67 0016 6C1C     		adds	r4, r5, #1
  68              	.LVL2:
  69              	.L3:
  50:grbl/nuts_bolts.c ****     c = *ptr++;
  51:grbl/nuts_bolts.c ****   }
  52:grbl/nuts_bolts.c **** 
  53:grbl/nuts_bolts.c ****   // Extract number into fast integer. Track decimal in terms of exponent value.
  54:grbl/nuts_bolts.c ****   uint32_t intval = 0;
  55:grbl/nuts_bolts.c ****   int8_t exp = 0;
  56:grbl/nuts_bolts.c ****   uint8_t ndigit = 0;
  57:grbl/nuts_bolts.c ****   bool isdecimal = false;
  70              		.loc 1 57 0
  71 0018 0027     		movs	r7, #0
  56:grbl/nuts_bolts.c ****   bool isdecimal = false;
  72              		.loc 1 56 0
  73 001a 3E46     		mov	r6, r7
  55:grbl/nuts_bolts.c ****   uint8_t ndigit = 0;
  74              		.loc 1 55 0
  75 001c 3D46     		mov	r5, r7
  54:grbl/nuts_bolts.c ****   int8_t exp = 0;
  76              		.loc 1 54 0
  77 001e BC46     		mov	ip, r7
  78 0020 0CE0     		b	.L10
  79              	.LVL3:
  80              	.L37:
  58:grbl/nuts_bolts.c ****   while(1) {
  59:grbl/nuts_bolts.c ****     c -= '0';
  60:grbl/nuts_bolts.c ****     if (c <= 9) {
  61:grbl/nuts_bolts.c ****       ndigit++;
  81              		.loc 1 61 0
  82 0022 0136     		adds	r6, r6, #1
  83              	.LVL4:
  84 0024 F6B2     		uxtb	r6, r6
  85              	.LVL5:
  62:grbl/nuts_bolts.c ****       if (ndigit <= MAX_INT_DIGITS) {
  86              		.loc 1 62 0
  87 0026 082E     		cmp	r6, #8
  88 0028 16D8     		bhi	.L6
  63:grbl/nuts_bolts.c ****         if (isdecimal) { exp--; }
  89              		.loc 1 63 0
  90 002a 0FB1     		cbz	r7, .L7
  91              		.loc 1 63 0 is_stmt 0 discriminator 1
  92 002c 013D     		subs	r5, r5, #1
  93              	.LVL6:
  94 002e 6DB2     		sxtb	r5, r5
  95              	.LVL7:
  96              	.L7:
  64:grbl/nuts_bolts.c ****         intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
  97              		.loc 1 64 0 is_stmt 1
  98 0030 0CEB8C0C 		add	ip, ip, ip, lsl #2
  99              	.LVL8:
 100 0034 03EB4C0C 		add	ip, r3, ip, lsl #1
 101              	.LVL9:
 102              	.L8:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 4


  65:grbl/nuts_bolts.c ****       } else {
  66:grbl/nuts_bolts.c ****         if (!(isdecimal)) { exp++; }  // Drop overflow digits
  67:grbl/nuts_bolts.c ****       }
  68:grbl/nuts_bolts.c ****     } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
  69:grbl/nuts_bolts.c ****       isdecimal = true;
  70:grbl/nuts_bolts.c ****     } else {
  71:grbl/nuts_bolts.c ****       break;
  72:grbl/nuts_bolts.c ****     }
  73:grbl/nuts_bolts.c ****     c = *ptr++;
 103              		.loc 1 73 0
 104 0038 14F8013B 		ldrb	r3, [r4], #1	@ zero_extendqisi2
 105              	.LVL10:
 106              	.L10:
  59:grbl/nuts_bolts.c ****     if (c <= 9) {
 107              		.loc 1 59 0
 108 003c 303B     		subs	r3, r3, #48
 109              	.LVL11:
 110 003e DBB2     		uxtb	r3, r3
 111              	.LVL12:
  60:grbl/nuts_bolts.c ****       ndigit++;
 112              		.loc 1 60 0
 113 0040 092B     		cmp	r3, #9
 114 0042 EED9     		bls	.L37
  68:grbl/nuts_bolts.c ****       isdecimal = true;
 115              		.loc 1 68 0
 116 0044 FE2B     		cmp	r3, #254
 117 0046 0CD1     		bne	.L9
  68:grbl/nuts_bolts.c ****       isdecimal = true;
 118              		.loc 1 68 0 is_stmt 0 discriminator 1
 119 0048 5FB9     		cbnz	r7, .L9
  69:grbl/nuts_bolts.c ****     } else {
 120              		.loc 1 69 0 is_stmt 1
 121 004a 0127     		movs	r7, #1
 122              	.LVL13:
 123 004c F4E7     		b	.L8
 124              	.LVL14:
 125              	.L4:
  45:grbl/nuts_bolts.c ****   if (c == '-') {
 126              		.loc 1 45 0
 127 004e 4FF0000A 		mov	r10, #0
  50:grbl/nuts_bolts.c ****   }
 128              		.loc 1 50 0
 129 0052 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 130              	.LVL15:
 131 0054 AC1C     		adds	r4, r5, #2
 132              	.LVL16:
 133 0056 DFE7     		b	.L3
 134              	.LVL17:
 135              	.L6:
  66:grbl/nuts_bolts.c ****       }
 136              		.loc 1 66 0
 137 0058 002F     		cmp	r7, #0
 138 005a EDD1     		bne	.L8
  66:grbl/nuts_bolts.c ****       }
 139              		.loc 1 66 0 is_stmt 0 discriminator 1
 140 005c 0135     		adds	r5, r5, #1
 141              	.LVL18:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 5


 142 005e 6DB2     		sxtb	r5, r5
 143              	.LVL19:
 144 0060 EAE7     		b	.L8
 145              	.L9:
  74:grbl/nuts_bolts.c ****   }
  75:grbl/nuts_bolts.c **** 
  76:grbl/nuts_bolts.c ****   // Return if no digits have been read.
  77:grbl/nuts_bolts.c ****   if (!ndigit) { return(false); };
 146              		.loc 1 77 0 is_stmt 1
 147 0062 002E     		cmp	r6, #0
 148 0064 3DD0     		beq	.L11
 149 0066 0746     		mov	r7, r0
 150              	.LVL20:
  78:grbl/nuts_bolts.c **** 
  79:grbl/nuts_bolts.c ****   // Convert integer into floating point.
  80:grbl/nuts_bolts.c ****   float fval;
  81:grbl/nuts_bolts.c ****   fval = (float)intval;
 151              		.loc 1 81 0
 152 0068 6046     		mov	r0, ip
 153              	.LVL21:
 154 006a 8846     		mov	r8, r1
 155 006c 9146     		mov	r9, r2
 156 006e FFF7FEFF 		bl	__aeabi_ui2f
 157              	.LVL22:
  82:grbl/nuts_bolts.c **** 
  83:grbl/nuts_bolts.c ****   // Apply decimal. Should perform no more than two floating point multiplications for the
  84:grbl/nuts_bolts.c ****   // expected range of E0 to E-4.
  85:grbl/nuts_bolts.c ****   if (fval != 0) {
 158              		.loc 1 85 0
 159 0072 0021     		movs	r1, #0
  81:grbl/nuts_bolts.c **** 
 160              		.loc 1 81 0
 161 0074 8346     		mov	fp, r0
 162              	.LVL23:
 163              		.loc 1 85 0
 164 0076 FFF7FEFF 		bl	__aeabi_fcmpeq
 165              	.LVL24:
 166 007a 30BB     		cbnz	r0, .L12
  86:grbl/nuts_bolts.c ****     while (exp <= -2) {
 167              		.loc 1 86 0
 168 007c 691C     		adds	r1, r5, #1
 169 007e 17DA     		bge	.L14
 170 0080 2E46     		mov	r6, r5
 171              	.LVL25:
 172 0082 5846     		mov	r0, fp
 173              	.LVL26:
 174              	.L15:
  87:grbl/nuts_bolts.c ****       fval *= 0.01;
 175              		.loc 1 87 0
 176 0084 FFF7FEFF 		bl	__aeabi_f2d
 177              	.LVL27:
 178 0088 21A3     		adr	r3, .L39
 179 008a D3E90023 		ldrd	r2, [r3]
 180 008e 0236     		adds	r6, r6, #2
 181              	.LVL28:
 182 0090 FFF7FEFF 		bl	__aeabi_dmul
 183              	.LVL29:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 6


 184 0094 76B2     		sxtb	r6, r6
 185 0096 FFF7FEFF 		bl	__aeabi_d2f
 186              	.LVL30:
  86:grbl/nuts_bolts.c ****     while (exp <= -2) {
 187              		.loc 1 86 0
 188 009a 721C     		adds	r2, r6, #1
 189 009c F2DB     		blt	.L15
 190 009e 8346     		mov	fp, r0
 191 00a0 EDB2     		uxtb	r5, r5
 192 00a2 C5F1FE03 		rsb	r3, r5, #254
 193 00a6 03F0FE03 		and	r3, r3, #254
 194 00aa 1D44     		add	r5, r5, r3
 195 00ac 0235     		adds	r5, r5, #2
 196 00ae 6DB2     		sxtb	r5, r5
 197              	.LVL31:
 198              	.L14:
  88:grbl/nuts_bolts.c ****       exp += 2;
  89:grbl/nuts_bolts.c ****     }
  90:grbl/nuts_bolts.c ****     if (exp < 0) {
 199              		.loc 1 90 0
 200 00b0 6B1C     		adds	r3, r5, #1
 201 00b2 1ED0     		beq	.L38
  91:grbl/nuts_bolts.c ****       fval *= 0.1;
  92:grbl/nuts_bolts.c ****     } else if (exp > 0) {
 202              		.loc 1 92 0
 203 00b4 4DB1     		cbz	r5, .L12
  93:grbl/nuts_bolts.c ****       do {
  94:grbl/nuts_bolts.c ****         fval *= 10.0;
 204              		.loc 1 94 0
 205 00b6 5846     		mov	r0, fp
 206 00b8 194E     		ldr	r6, .L39+16
 207              	.LVL32:
 208              	.L17:
 209 00ba 013D     		subs	r5, r5, #1
 210              	.LVL33:
 211              		.loc 1 94 0 is_stmt 0 discriminator 1
 212 00bc 3146     		mov	r1, r6
 213 00be 6DB2     		sxtb	r5, r5
 214 00c0 FFF7FEFF 		bl	__aeabi_fmul
 215              	.LVL34:
  95:grbl/nuts_bolts.c ****       } while (--exp > 0);
 216              		.loc 1 95 0 is_stmt 1 discriminator 1
 217 00c4 002D     		cmp	r5, #0
 218 00c6 F8D1     		bne	.L17
 219 00c8 8346     		mov	fp, r0
 220              	.LVL35:
 221              	.L12:
  96:grbl/nuts_bolts.c ****     }
  97:grbl/nuts_bolts.c ****   }
  98:grbl/nuts_bolts.c **** 
  99:grbl/nuts_bolts.c ****   // Assign floating point value with correct sign.
 100:grbl/nuts_bolts.c ****   if (isnegative) {
 222              		.loc 1 100 0
 223 00ca BAF1000F 		cmp	r10, #0
 224 00ce 01D0     		beq	.L18
 101:grbl/nuts_bolts.c ****     *float_ptr = -fval;
 225              		.loc 1 101 0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 7


 226 00d0 0BF1004B 		add	fp, fp, #-2147483648
 227              	.LVL36:
 228              	.L18:
 102:grbl/nuts_bolts.c ****   } else {
 103:grbl/nuts_bolts.c ****     *float_ptr = fval;
 104:grbl/nuts_bolts.c ****   }
 105:grbl/nuts_bolts.c **** 
 106:grbl/nuts_bolts.c ****   *char_counter = ptr - line - 1; // Set char_counter to next statement
 107:grbl/nuts_bolts.c **** 
 108:grbl/nuts_bolts.c ****   return(true);
 229              		.loc 1 108 0
 230 00d4 0126     		movs	r6, #1
 106:grbl/nuts_bolts.c **** 
 231              		.loc 1 106 0
 232 00d6 E41B     		subs	r4, r4, r7
 233              	.LVL37:
 234 00d8 013C     		subs	r4, r4, #1
 235 00da C9F800B0 		str	fp, [r9]	@ float
 236 00de 88F80040 		strb	r4, [r8]
 237              	.LVL38:
 238              	.L11:
 109:grbl/nuts_bolts.c **** }
 239              		.loc 1 109 0
 240 00e2 3046     		mov	r0, r6
 241 00e4 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 242              	.LVL39:
 243              	.L36:
  48:grbl/nuts_bolts.c ****   } else if (c == '+') {
 244              		.loc 1 48 0
 245 00e8 AC1C     		adds	r4, r5, #2
 246              	.LVL40:
 247 00ea 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 248              	.LVL41:
  47:grbl/nuts_bolts.c ****     c = *ptr++;
 249              		.loc 1 47 0
 250 00ec 4FF0010A 		mov	r10, #1
 251 00f0 92E7     		b	.L3
 252              	.LVL42:
 253              	.L38:
  91:grbl/nuts_bolts.c ****     } else if (exp > 0) {
 254              		.loc 1 91 0
 255 00f2 5846     		mov	r0, fp
 256 00f4 FFF7FEFF 		bl	__aeabi_f2d
 257              	.LVL43:
 258 00f8 07A3     		adr	r3, .L39+8
 259 00fa D3E90023 		ldrd	r2, [r3]
 260 00fe FFF7FEFF 		bl	__aeabi_dmul
 261              	.LVL44:
 262 0102 FFF7FEFF 		bl	__aeabi_d2f
 263              	.LVL45:
 264 0106 8346     		mov	fp, r0
 265              	.LVL46:
 266 0108 DFE7     		b	.L12
 267              	.L40:
 268 010a 00BFAFF3 		.align	3
 268      0080
 269              	.L39:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 8


 270 0110 7B14AE47 		.word	1202590843
 271 0114 E17A843F 		.word	1065646817
 272 0118 9A999999 		.word	2576980378
 273 011c 9999B93F 		.word	1069128089
 274 0120 00002041 		.word	1092616192
 275              		.cfi_endproc
 276              	.LFE703:
 278              		.section	.text._delay_ms,"ax",%progbits
 279              		.align	1
 280              		.p2align 2,,3
 281              		.global	_delay_ms
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu softvfp
 287              	_delay_ms:
 288              	.LFB704:
 110:grbl/nuts_bolts.c **** 
 111:grbl/nuts_bolts.c **** #ifdef STM32
 112:grbl/nuts_bolts.c **** void _delay_ms(uint32_t x)
 113:grbl/nuts_bolts.c **** {
 289              		.loc 1 113 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293              		@ link register save eliminated.
 294              	.LVL47:
 114:grbl/nuts_bolts.c **** /*
 115:grbl/nuts_bolts.c ****   uint32_t temp;
 116:grbl/nuts_bolts.c ****   SysTick->LOAD = SystemCoreClock / 8000;                     // Loading time
 117:grbl/nuts_bolts.c **** 
 118:grbl/nuts_bolts.c ****   SysTick->VAL = 0x00;                                            // Empty the counter
 119:grbl/nuts_bolts.c ****   SysTick->CTRL = 0x01;                                           // Start from bottom
 120:grbl/nuts_bolts.c ****   do
 121:grbl/nuts_bolts.c ****   {
 122:grbl/nuts_bolts.c ****     temp = SysTick->CTRL;
 123:grbl/nuts_bolts.c ****   } while ( (temp & 0x01) && !(temp&(1 << 16)) );                             // Wait time arrive
 124:grbl/nuts_bolts.c ****   SysTick->CTRL = 0x00;                                            // Close the counter
 125:grbl/nuts_bolts.c ****   SysTick->VAL = 0X00;                                            // Empty the counter
 126:grbl/nuts_bolts.c **** */
 127:grbl/nuts_bolts.c **** 	//HAL_Delay(x);
 128:grbl/nuts_bolts.c **** 
 129:grbl/nuts_bolts.c **** 	uint32_t mililoop = SystemCoreClock/1000;
 295              		.loc 1 129 0
 296 0000 064A     		ldr	r2, .L48
 297 0002 074B     		ldr	r3, .L48+4
 298 0004 1268     		ldr	r2, [r2]
 299 0006 A3FB0232 		umull	r3, r2, r3, r2
 300              	.LVL48:
 301              	.LBB8:
 130:grbl/nuts_bolts.c **** 	for (uint32_t i=0; i< mililoop; i++)
 302              		.loc 1 130 0
 303 000a 9209     		lsrs	r2, r2, #6
 304              	.LVL49:
 305 000c 04D0     		beq	.L41
 306 000e 0023     		movs	r3, #0
 307              	.LVL50:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 9


 308              	.L43:
 131:grbl/nuts_bolts.c **** 		__asm__ __volatile__("nop\n\t":::"memory");
 309              		.loc 1 131 0 discriminator 3
 310              		.syntax unified
 311              	@ 131 "grbl/nuts_bolts.c" 1
 312 0010 00BF     		nop
 313              		
 314              	@ 0 "" 2
 130:grbl/nuts_bolts.c **** 	for (uint32_t i=0; i< mililoop; i++)
 315              		.loc 1 130 0 discriminator 3
 316              		.thumb
 317              		.syntax unified
 318 0012 0133     		adds	r3, r3, #1
 319              	.LVL51:
 320 0014 9A42     		cmp	r2, r3
 321 0016 FBD1     		bne	.L43
 322              	.LVL52:
 323              	.L41:
 324              	.LBE8:
 132:grbl/nuts_bolts.c **** 
 133:grbl/nuts_bolts.c **** 
 134:grbl/nuts_bolts.c **** }
 325              		.loc 1 134 0
 326 0018 7047     		bx	lr
 327              	.L49:
 328 001a 00BF     		.align	2
 329              	.L48:
 330 001c 00000000 		.word	SystemCoreClock
 331 0020 D34D6210 		.word	274877907
 332              		.cfi_endproc
 333              	.LFE704:
 335              		.global	__aeabi_d2uiz
 336              		.section	.text.delay_sec,"ax",%progbits
 337              		.align	1
 338              		.p2align 2,,3
 339              		.global	delay_sec
 340              		.syntax unified
 341              		.thumb
 342              		.thumb_func
 343              		.fpu softvfp
 345              	delay_sec:
 346              	.LFB705:
 135:grbl/nuts_bolts.c **** #endif
 136:grbl/nuts_bolts.c **** 
 137:grbl/nuts_bolts.c **** // Non-blocking delay function used for general operation and suspend features.
 138:grbl/nuts_bolts.c **** void delay_sec(float seconds, uint8_t mode)
 139:grbl/nuts_bolts.c **** {
 347              		.loc 1 139 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351              	.LVL53:
 352 0000 70B5     		push	{r4, r5, r6, lr}
 353              	.LCFI1:
 354              		.cfi_def_cfa_offset 16
 355              		.cfi_offset 4, -16
 356              		.cfi_offset 5, -12
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 10


 357              		.cfi_offset 6, -8
 358              		.cfi_offset 14, -4
 359              		.loc 1 139 0
 360 0002 0E46     		mov	r6, r1
 140:grbl/nuts_bolts.c ****  	uint16_t i = ceil(1000/DWELL_TIME_STEP*seconds);
 361              		.loc 1 140 0
 362 0004 1949     		ldr	r1, .L59
 363              	.LVL54:
 364 0006 FFF7FEFF 		bl	__aeabi_fmul
 365              	.LVL55:
 366 000a FFF7FEFF 		bl	__aeabi_f2d
 367              	.LVL56:
 368 000e FFF7FEFF 		bl	ceil
 369              	.LVL57:
 370 0012 FFF7FEFF 		bl	__aeabi_d2uiz
 371              	.LVL58:
 372 0016 80B2     		uxth	r0, r0
 373              	.LVL59:
 141:grbl/nuts_bolts.c **** 	while (i-- > 0) {
 374              		.loc 1 141 0
 375 0018 B0B1     		cbz	r0, .L50
 142:grbl/nuts_bolts.c **** 		if (sys.abort) { return; }
 376              		.loc 1 142 0
 377 001a 154D     		ldr	r5, .L59+4
 378 001c 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 379 001e 9BB9     		cbnz	r3, .L50
 380 0020 441E     		subs	r4, r0, #1
 381 0022 A4B2     		uxth	r4, r4
 382 0024 8EB1     		cbz	r6, .L56
 141:grbl/nuts_bolts.c **** 	while (i-- > 0) {
 383              		.loc 1 141 0
 384 0026 4FF6FF76 		movw	r6, #65535
 385 002a 08E0     		b	.L54
 386              	.LVL60:
 387              	.L58:
 388 002c 013C     		subs	r4, r4, #1
 389              	.LVL61:
 143:grbl/nuts_bolts.c **** 		if (mode == DELAY_MODE_DWELL) {
 144:grbl/nuts_bolts.c **** 			protocol_execute_realtime();
 145:grbl/nuts_bolts.c **** 		} else { // DELAY_MODE_SYS_SUSPEND
 146:grbl/nuts_bolts.c **** 		  // Execute rt_system() only to avoid nesting suspend loops.
 147:grbl/nuts_bolts.c **** 		  protocol_exec_rt_system();
 148:grbl/nuts_bolts.c **** 		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 149:grbl/nuts_bolts.c **** 		}
 150:grbl/nuts_bolts.c **** //		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 151:grbl/nuts_bolts.c **** 		HAL_Delay(DWELL_TIME_STEP);
 390              		.loc 1 151 0
 391 002e 3220     		movs	r0, #50
 141:grbl/nuts_bolts.c **** 		if (sys.abort) { return; }
 392              		.loc 1 141 0
 393 0030 A4B2     		uxth	r4, r4
 394              		.loc 1 151 0
 395 0032 FFF7FEFF 		bl	HAL_Delay
 396              	.LVL62:
 141:grbl/nuts_bolts.c **** 		if (sys.abort) { return; }
 397              		.loc 1 141 0
 398 0036 B442     		cmp	r4, r6
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 11


 399 0038 06D0     		beq	.L50
 142:grbl/nuts_bolts.c **** 		if (sys.abort) { return; }
 400              		.loc 1 142 0
 401 003a 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 402 003c 23B9     		cbnz	r3, .L50
 403              	.LVL63:
 404              	.L54:
 147:grbl/nuts_bolts.c **** 		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 405              		.loc 1 147 0
 406 003e FFF7FEFF 		bl	protocol_exec_rt_system
 407              	.LVL64:
 148:grbl/nuts_bolts.c **** 		}
 408              		.loc 1 148 0
 409 0042 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 410 0044 9B07     		lsls	r3, r3, #30
 411 0046 F1D5     		bpl	.L58
 412              	.LVL65:
 413              	.L50:
 152:grbl/nuts_bolts.c **** 	}
 153:grbl/nuts_bolts.c **** }
 414              		.loc 1 153 0
 415 0048 70BD     		pop	{r4, r5, r6, pc}
 416              	.LVL66:
 417              	.L56:
 141:grbl/nuts_bolts.c **** 		if (sys.abort) { return; }
 418              		.loc 1 141 0
 419 004a 4FF6FF76 		movw	r6, #65535
 420 004e 02E0     		b	.L53
 421              	.LVL67:
 422              	.L55:
 142:grbl/nuts_bolts.c **** 		if (mode == DELAY_MODE_DWELL) {
 423              		.loc 1 142 0
 424 0050 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 425 0052 002B     		cmp	r3, #0
 426 0054 F8D1     		bne	.L50
 427              	.LVL68:
 428              	.L53:
 141:grbl/nuts_bolts.c **** 		if (sys.abort) { return; }
 429              		.loc 1 141 0
 430 0056 013C     		subs	r4, r4, #1
 431              	.LVL69:
 144:grbl/nuts_bolts.c **** 		} else { // DELAY_MODE_SYS_SUSPEND
 432              		.loc 1 144 0
 433 0058 FFF7FEFF 		bl	protocol_execute_realtime
 434              	.LVL70:
 141:grbl/nuts_bolts.c **** 		if (sys.abort) { return; }
 435              		.loc 1 141 0
 436 005c A4B2     		uxth	r4, r4
 151:grbl/nuts_bolts.c **** 	}
 437              		.loc 1 151 0
 438 005e 3220     		movs	r0, #50
 439 0060 FFF7FEFF 		bl	HAL_Delay
 440              	.LVL71:
 141:grbl/nuts_bolts.c **** 		if (sys.abort) { return; }
 441              		.loc 1 141 0
 442 0064 B442     		cmp	r4, r6
 443 0066 F3D1     		bne	.L55
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 12


 444              		.loc 1 153 0
 445 0068 70BD     		pop	{r4, r5, r6, pc}
 446              	.LVL72:
 447              	.L60:
 448 006a 00BF     		.align	2
 449              	.L59:
 450 006c 0000A041 		.word	1101004800
 451 0070 00000000 		.word	sys
 452              		.cfi_endproc
 453              	.LFE705:
 455              		.section	.text.delay_ms,"ax",%progbits
 456              		.align	1
 457              		.p2align 2,,3
 458              		.global	delay_ms
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 462              		.fpu softvfp
 464              	delay_ms:
 465              	.LFB706:
 154:grbl/nuts_bolts.c **** 
 155:grbl/nuts_bolts.c **** 
 156:grbl/nuts_bolts.c **** // Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
 157:grbl/nuts_bolts.c **** // which only accepts constants in future compiler releases.
 158:grbl/nuts_bolts.c **** void delay_ms(uint16_t ms)
 159:grbl/nuts_bolts.c **** {
 466              		.loc 1 159 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470              		@ link register save eliminated.
 471              	.LVL73:
 160:grbl/nuts_bolts.c ****   while ( ms-- ) { _delay_ms(1); }
 472              		.loc 1 160 0
 473 0000 4FF6FF71 		movw	r1, #65535
 159:grbl/nuts_bolts.c ****   while ( ms-- ) { _delay_ms(1); }
 474              		.loc 1 159 0
 475 0004 30B4     		push	{r4, r5}
 476              	.LCFI2:
 477              		.cfi_def_cfa_offset 8
 478              		.cfi_offset 4, -8
 479              		.cfi_offset 5, -4
 480              	.LBB9:
 481              	.LBB10:
 129:grbl/nuts_bolts.c **** 	for (uint32_t i=0; i< mililoop; i++)
 482              		.loc 1 129 0
 483 0006 0B4D     		ldr	r5, .L72
 484 0008 0B4C     		ldr	r4, .L72+4
 485              	.L62:
 486              	.LBE10:
 487              	.LBE9:
 488              		.loc 1 160 0 discriminator 1
 489 000a 0138     		subs	r0, r0, #1
 490              	.LVL74:
 491 000c 80B2     		uxth	r0, r0
 492              	.LVL75:
 493 000e 8842     		cmp	r0, r1
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 13


 494 0010 0DD0     		beq	.L71
 495              	.L65:
 496              	.LVL76:
 497              	.LBB13:
 498              	.LBB12:
 129:grbl/nuts_bolts.c **** 	for (uint32_t i=0; i< mililoop; i++)
 499              		.loc 1 129 0
 500 0012 2A68     		ldr	r2, [r5]
 501 0014 A4FB0232 		umull	r3, r2, r4, r2
 502              	.LVL77:
 503              	.LBB11:
 130:grbl/nuts_bolts.c **** 		__asm__ __volatile__("nop\n\t":::"memory");
 504              		.loc 1 130 0
 505 0018 9209     		lsrs	r2, r2, #6
 506              	.LVL78:
 507 001a F6D0     		beq	.L62
 508 001c 0023     		movs	r3, #0
 509              	.LVL79:
 510              	.L64:
 131:grbl/nuts_bolts.c **** 
 511              		.loc 1 131 0
 512              		.syntax unified
 513              	@ 131 "grbl/nuts_bolts.c" 1
 514 001e 00BF     		nop
 515              		
 516              	@ 0 "" 2
 130:grbl/nuts_bolts.c **** 		__asm__ __volatile__("nop\n\t":::"memory");
 517              		.loc 1 130 0
 518              		.thumb
 519              		.syntax unified
 520 0020 0133     		adds	r3, r3, #1
 521              	.LVL80:
 522 0022 9A42     		cmp	r2, r3
 523 0024 FBD1     		bne	.L64
 524              	.LBE11:
 525              	.LBE12:
 526              	.LBE13:
 527              		.loc 1 160 0
 528 0026 0138     		subs	r0, r0, #1
 529              	.LVL81:
 530 0028 80B2     		uxth	r0, r0
 531              	.LVL82:
 532 002a 8842     		cmp	r0, r1
 533 002c F1D1     		bne	.L65
 534              	.LVL83:
 535              	.L71:
 161:grbl/nuts_bolts.c **** }
 536              		.loc 1 161 0
 537 002e 30BC     		pop	{r4, r5}
 538              	.LCFI3:
 539              		.cfi_restore 5
 540              		.cfi_restore 4
 541              		.cfi_def_cfa_offset 0
 542 0030 7047     		bx	lr
 543              	.L73:
 544 0032 00BF     		.align	2
 545              	.L72:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 14


 546 0034 00000000 		.word	SystemCoreClock
 547 0038 D34D6210 		.word	274877907
 548              		.cfi_endproc
 549              	.LFE706:
 551              		.section	.text.delay_us,"ax",%progbits
 552              		.align	1
 553              		.p2align 2,,3
 554              		.global	delay_us
 555              		.syntax unified
 556              		.thumb
 557              		.thumb_func
 558              		.fpu softvfp
 560              	delay_us:
 561              	.LFB707:
 162:grbl/nuts_bolts.c **** 
 163:grbl/nuts_bolts.c **** 
 164:grbl/nuts_bolts.c **** // Delays variable defined microseconds. Compiler compatibility fix for _delay_us(),
 165:grbl/nuts_bolts.c **** // which only accepts constants in future compiler releases. Written to perform more
 166:grbl/nuts_bolts.c **** // efficiently with larger delays, as the counter adds parasitic time in each iteration.
 167:grbl/nuts_bolts.c **** void delay_us(uint32_t us)
 168:grbl/nuts_bolts.c **** {
 562              		.loc 1 168 0
 563              		.cfi_startproc
 564              		@ args = 0, pretend = 0, frame = 0
 565              		@ frame_needed = 0, uses_anonymous_args = 0
 566              	.LVL84:
 169:grbl/nuts_bolts.c ****   while (us) {
 567              		.loc 1 169 0
 568 0000 70B3     		cbz	r0, .L92
 168:grbl/nuts_bolts.c ****   while (us) {
 569              		.loc 1 168 0
 570 0002 70B5     		push	{r4, r5, r6, lr}
 571              	.LCFI4:
 572              		.cfi_def_cfa_offset 16
 573              		.cfi_offset 4, -16
 574              		.cfi_offset 5, -12
 575              		.cfi_offset 6, -8
 576              		.cfi_offset 14, -4
 577 0004 0446     		mov	r4, r0
 578              	.LBB14:
 579              	.LBB15:
 129:grbl/nuts_bolts.c **** 	for (uint32_t i=0; i< mililoop; i++)
 580              		.loc 1 129 0
 581 0006 174E     		ldr	r6, .L98
 582 0008 174D     		ldr	r5, .L98+4
 583              	.LVL85:
 584              	.L82:
 585              	.LBE15:
 586              	.LBE14:
 170:grbl/nuts_bolts.c ****     if (us < 10) {
 587              		.loc 1 170 0
 588 000a 092C     		cmp	r4, #9
 589 000c 0BD9     		bls	.L95
 171:grbl/nuts_bolts.c ****       _delay_us(1);
 172:grbl/nuts_bolts.c ****       us--;
 173:grbl/nuts_bolts.c ****     } else if (us < 100) {
 590              		.loc 1 173 0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 15


 591 000e 632C     		cmp	r4, #99
 592 0010 1FD9     		bls	.L96
 174:grbl/nuts_bolts.c ****       _delay_us(10);
 175:grbl/nuts_bolts.c ****       us -= 10;
 176:grbl/nuts_bolts.c ****     } else if (us < 1000) {
 593              		.loc 1 176 0
 594 0012 B4F57A7F 		cmp	r4, #1000
 595 0016 0DD2     		bcs	.L79
 177:grbl/nuts_bolts.c ****       _delay_us(100);
 178:grbl/nuts_bolts.c ****       us -= 100;
 596              		.loc 1 178 0
 597 0018 643C     		subs	r4, r4, #100
 598              	.LVL86:
 177:grbl/nuts_bolts.c ****       _delay_us(100);
 599              		.loc 1 177 0
 600 001a 6420     		movs	r0, #100
 601 001c FFF7FEFF 		bl	_delay_us
 602              	.LVL87:
 169:grbl/nuts_bolts.c ****     if (us < 10) {
 603              		.loc 1 169 0
 604 0020 002C     		cmp	r4, #0
 605 0022 F2D1     		bne	.L82
 606              	.L97:
 179:grbl/nuts_bolts.c ****     } else {
 180:grbl/nuts_bolts.c ****       _delay_ms(1);
 181:grbl/nuts_bolts.c ****       us -= 1000;
 182:grbl/nuts_bolts.c ****     }
 183:grbl/nuts_bolts.c ****   }
 184:grbl/nuts_bolts.c **** }
 607              		.loc 1 184 0
 608 0024 70BD     		pop	{r4, r5, r6, pc}
 609              	.LVL88:
 610              	.L95:
 172:grbl/nuts_bolts.c ****     } else if (us < 100) {
 611              		.loc 1 172 0
 612 0026 013C     		subs	r4, r4, #1
 613              	.LVL89:
 171:grbl/nuts_bolts.c ****       us--;
 614              		.loc 1 171 0
 615 0028 0120     		movs	r0, #1
 616 002a FFF7FEFF 		bl	_delay_us
 617              	.LVL90:
 169:grbl/nuts_bolts.c ****     if (us < 10) {
 618              		.loc 1 169 0
 619 002e 002C     		cmp	r4, #0
 620 0030 EBD1     		bne	.L82
 621 0032 F7E7     		b	.L97
 622              	.L79:
 623              	.LVL91:
 624              	.LBB18:
 625              	.LBB17:
 129:grbl/nuts_bolts.c **** 	for (uint32_t i=0; i< mililoop; i++)
 626              		.loc 1 129 0
 627 0034 3268     		ldr	r2, [r6]
 628 0036 A5FB0232 		umull	r3, r2, r5, r2
 629              	.LVL92:
 630              	.LBB16:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 16


 130:grbl/nuts_bolts.c **** 		__asm__ __volatile__("nop\n\t":::"memory");
 631              		.loc 1 130 0
 632 003a 9209     		lsrs	r2, r2, #6
 633              	.LVL93:
 634 003c 04D0     		beq	.L80
 635 003e 0023     		movs	r3, #0
 636              	.LVL94:
 637              	.L81:
 131:grbl/nuts_bolts.c **** 
 638              		.loc 1 131 0
 639              		.syntax unified
 640              	@ 131 "grbl/nuts_bolts.c" 1
 641 0040 00BF     		nop
 642              		
 643              	@ 0 "" 2
 130:grbl/nuts_bolts.c **** 		__asm__ __volatile__("nop\n\t":::"memory");
 644              		.loc 1 130 0
 645              		.thumb
 646              		.syntax unified
 647 0042 0133     		adds	r3, r3, #1
 648              	.LVL95:
 649 0044 9A42     		cmp	r2, r3
 650 0046 FBD1     		bne	.L81
 651              	.LVL96:
 652              	.L80:
 653              	.LBE16:
 654              	.LBE17:
 655              	.LBE18:
 181:grbl/nuts_bolts.c ****     }
 656              		.loc 1 181 0
 657 0048 A4F57A74 		sub	r4, r4, #1000
 658              	.LVL97:
 169:grbl/nuts_bolts.c ****     if (us < 10) {
 659              		.loc 1 169 0
 660 004c 002C     		cmp	r4, #0
 661 004e DCD1     		bne	.L82
 662 0050 E8E7     		b	.L97
 663              	.L96:
 175:grbl/nuts_bolts.c ****     } else if (us < 1000) {
 664              		.loc 1 175 0
 665 0052 0A3C     		subs	r4, r4, #10
 666              	.LVL98:
 174:grbl/nuts_bolts.c ****       us -= 10;
 667              		.loc 1 174 0
 668 0054 0A20     		movs	r0, #10
 669 0056 FFF7FEFF 		bl	_delay_us
 670              	.LVL99:
 169:grbl/nuts_bolts.c ****     if (us < 10) {
 671              		.loc 1 169 0
 672 005a 002C     		cmp	r4, #0
 673 005c D5D1     		bne	.L82
 674 005e E1E7     		b	.L97
 675              	.LVL100:
 676              	.L92:
 677              	.LCFI5:
 678              		.cfi_def_cfa_offset 0
 679              		.cfi_restore 4
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 17


 680              		.cfi_restore 5
 681              		.cfi_restore 6
 682              		.cfi_restore 14
 683 0060 7047     		bx	lr
 684              	.L99:
 685 0062 00BF     		.align	2
 686              	.L98:
 687 0064 00000000 		.word	SystemCoreClock
 688 0068 D34D6210 		.word	274877907
 689              		.cfi_endproc
 690              	.LFE707:
 692              		.global	__aeabi_fadd
 693              		.section	.text.hypot_f,"ax",%progbits
 694              		.align	1
 695              		.p2align 2,,3
 696              		.global	hypot_f
 697              		.syntax unified
 698              		.thumb
 699              		.thumb_func
 700              		.fpu softvfp
 702              	hypot_f:
 703              	.LFB708:
 185:grbl/nuts_bolts.c **** 
 186:grbl/nuts_bolts.c **** 
 187:grbl/nuts_bolts.c **** // Simple hypotenuse computation function.
 188:grbl/nuts_bolts.c **** float hypot_f(float x, float y) { return(sqrtf(x*x + y*y)); }
 704              		.loc 1 188 0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 0
 707              		@ frame_needed = 0, uses_anonymous_args = 0
 708              	.LVL101:
 709 0000 38B5     		push	{r3, r4, r5, lr}
 710              	.LCFI6:
 711              		.cfi_def_cfa_offset 16
 712              		.cfi_offset 3, -16
 713              		.cfi_offset 4, -12
 714              		.cfi_offset 5, -8
 715              		.cfi_offset 14, -4
 716              		.loc 1 188 0
 717 0002 0D46     		mov	r5, r1
 718 0004 0146     		mov	r1, r0
 719              	.LVL102:
 720 0006 FFF7FEFF 		bl	__aeabi_fmul
 721              	.LVL103:
 722 000a 2946     		mov	r1, r5
 723 000c 0446     		mov	r4, r0
 724 000e 2846     		mov	r0, r5
 725 0010 FFF7FEFF 		bl	__aeabi_fmul
 726              	.LVL104:
 727 0014 0146     		mov	r1, r0
 728 0016 2046     		mov	r0, r4
 729 0018 FFF7FEFF 		bl	__aeabi_fadd
 730              	.LVL105:
 731 001c BDE83840 		pop	{r3, r4, r5, lr}
 732              	.LCFI7:
 733              		.cfi_restore 14
 734              		.cfi_restore 5
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 18


 735              		.cfi_restore 4
 736              		.cfi_restore 3
 737              		.cfi_def_cfa_offset 0
 738              	.LVL106:
 739 0020 FFF7FEBF 		b	sqrtf
 740              	.LVL107:
 741              		.cfi_endproc
 742              	.LFE708:
 744              		.global	__aeabi_fdiv
 745              		.section	.text.convert_delta_vector_to_unit_vector,"ax",%progbits
 746              		.align	1
 747              		.p2align 2,,3
 748              		.global	convert_delta_vector_to_unit_vector
 749              		.syntax unified
 750              		.thumb
 751              		.thumb_func
 752              		.fpu softvfp
 754              	convert_delta_vector_to_unit_vector:
 755              	.LFB709:
 189:grbl/nuts_bolts.c **** 
 190:grbl/nuts_bolts.c **** 
 191:grbl/nuts_bolts.c **** float convert_delta_vector_to_unit_vector(float *vector)
 192:grbl/nuts_bolts.c **** {
 756              		.loc 1 192 0
 757              		.cfi_startproc
 758              		@ args = 0, pretend = 0, frame = 0
 759              		@ frame_needed = 0, uses_anonymous_args = 0
 760              	.LVL108:
 761 0000 70B5     		push	{r4, r5, r6, lr}
 762              	.LCFI8:
 763              		.cfi_def_cfa_offset 16
 764              		.cfi_offset 4, -16
 765              		.cfi_offset 5, -12
 766              		.cfi_offset 6, -8
 767              		.cfi_offset 14, -4
 193:grbl/nuts_bolts.c ****   uint8_t idx;
 194:grbl/nuts_bolts.c ****   float magnitude = 0.0;
 195:grbl/nuts_bolts.c ****   for (idx=0; idx<N_AXIS; idx++) {
 196:grbl/nuts_bolts.c ****     if (vector[idx] != 0.0) {
 768              		.loc 1 196 0
 769 0002 0568     		ldr	r5, [r0]	@ float
 192:grbl/nuts_bolts.c ****   uint8_t idx;
 770              		.loc 1 192 0
 771 0004 0446     		mov	r4, r0
 772              		.loc 1 196 0
 773 0006 0021     		movs	r1, #0
 774 0008 2846     		mov	r0, r5
 775              	.LVL109:
 776 000a FFF7FEFF 		bl	__aeabi_fcmpeq
 777              	.LVL110:
 778 000e 0028     		cmp	r0, #0
 779 0010 40D1     		bne	.L113
 197:grbl/nuts_bolts.c ****       magnitude += vector[idx]*vector[idx];
 780              		.loc 1 197 0
 781 0012 2946     		mov	r1, r5
 782 0014 2846     		mov	r0, r5
 783 0016 FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 19


 784              	.LVL111:
 785 001a 0021     		movs	r1, #0
 786 001c FFF7FEFF 		bl	__aeabi_fadd
 787              	.LVL112:
 788 0020 0546     		mov	r5, r0
 789              	.LVL113:
 790              	.L103:
 196:grbl/nuts_bolts.c ****       magnitude += vector[idx]*vector[idx];
 791              		.loc 1 196 0
 792 0022 6668     		ldr	r6, [r4, #4]	@ float
 793 0024 0021     		movs	r1, #0
 794 0026 3046     		mov	r0, r6
 795 0028 FFF7FEFF 		bl	__aeabi_fcmpeq
 796              	.LVL114:
 797 002c 40B9     		cbnz	r0, .L105
 798              		.loc 1 197 0
 799 002e 3146     		mov	r1, r6
 800 0030 3046     		mov	r0, r6
 801 0032 FFF7FEFF 		bl	__aeabi_fmul
 802              	.LVL115:
 803 0036 0146     		mov	r1, r0
 804 0038 2846     		mov	r0, r5
 805 003a FFF7FEFF 		bl	__aeabi_fadd
 806              	.LVL116:
 807 003e 0546     		mov	r5, r0
 808              	.LVL117:
 809              	.L105:
 196:grbl/nuts_bolts.c ****       magnitude += vector[idx]*vector[idx];
 810              		.loc 1 196 0
 811 0040 A668     		ldr	r6, [r4, #8]	@ float
 812 0042 0021     		movs	r1, #0
 813 0044 3046     		mov	r0, r6
 814 0046 FFF7FEFF 		bl	__aeabi_fcmpeq
 815              	.LVL118:
 816 004a 40B9     		cbnz	r0, .L107
 817              		.loc 1 197 0
 818 004c 3146     		mov	r1, r6
 819 004e 3046     		mov	r0, r6
 820 0050 FFF7FEFF 		bl	__aeabi_fmul
 821              	.LVL119:
 822 0054 0146     		mov	r1, r0
 823 0056 2846     		mov	r0, r5
 824 0058 FFF7FEFF 		bl	__aeabi_fadd
 825              	.LVL120:
 826 005c 0546     		mov	r5, r0
 827              	.LVL121:
 828              	.L107:
 198:grbl/nuts_bolts.c ****     }
 199:grbl/nuts_bolts.c ****   }
 200:grbl/nuts_bolts.c ****   magnitude = sqrtf(magnitude);
 829              		.loc 1 200 0 discriminator 2
 830 005e 2846     		mov	r0, r5
 831 0060 FFF7FEFF 		bl	sqrtf
 832              	.LVL122:
 833 0064 0646     		mov	r6, r0
 834              	.LVL123:
 201:grbl/nuts_bolts.c ****   float inv_magnitude = 1.0/magnitude;
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 20


 835              		.loc 1 201 0 discriminator 2
 836 0066 0146     		mov	r1, r0
 837 0068 4FF07E50 		mov	r0, #1065353216
 838              	.LVL124:
 839 006c FFF7FEFF 		bl	__aeabi_fdiv
 840              	.LVL125:
 841 0070 0546     		mov	r5, r0
 842              	.LVL126:
 202:grbl/nuts_bolts.c ****   for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 843              		.loc 1 202 0 discriminator 2
 844 0072 0146     		mov	r1, r0
 845 0074 2068     		ldr	r0, [r4]	@ float
 846              	.LVL127:
 847 0076 FFF7FEFF 		bl	__aeabi_fmul
 848              	.LVL128:
 849 007a 2946     		mov	r1, r5
 850 007c 2060     		str	r0, [r4]	@ float
 851              	.LVL129:
 852 007e 6068     		ldr	r0, [r4, #4]	@ float
 853 0080 FFF7FEFF 		bl	__aeabi_fmul
 854              	.LVL130:
 855 0084 2946     		mov	r1, r5
 856 0086 6060     		str	r0, [r4, #4]	@ float
 857              	.LVL131:
 858 0088 A068     		ldr	r0, [r4, #8]	@ float
 859 008a FFF7FEFF 		bl	__aeabi_fmul
 860              	.LVL132:
 861 008e A060     		str	r0, [r4, #8]	@ float
 862              	.LVL133:
 203:grbl/nuts_bolts.c ****   return(magnitude);
 204:grbl/nuts_bolts.c **** }
 863              		.loc 1 204 0 discriminator 2
 864 0090 3046     		mov	r0, r6
 865 0092 70BD     		pop	{r4, r5, r6, pc}
 866              	.LVL134:
 867              	.L113:
 194:grbl/nuts_bolts.c ****   for (idx=0; idx<N_AXIS; idx++) {
 868              		.loc 1 194 0
 869 0094 0025     		movs	r5, #0
 870 0096 C4E7     		b	.L103
 871              		.cfi_endproc
 872              	.LFE709:
 874              		.global	__aeabi_fcmpgt
 875              		.global	__aeabi_fcmplt
 876              		.section	.text.limit_value_by_axis_maximum,"ax",%progbits
 877              		.align	1
 878              		.p2align 2,,3
 879              		.global	limit_value_by_axis_maximum
 880              		.syntax unified
 881              		.thumb
 882              		.thumb_func
 883              		.fpu softvfp
 885              	limit_value_by_axis_maximum:
 886              	.LFB710:
 205:grbl/nuts_bolts.c **** 
 206:grbl/nuts_bolts.c **** 
 207:grbl/nuts_bolts.c **** float limit_value_by_axis_maximum(float *max_value, float *unit_vec)
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 21


 208:grbl/nuts_bolts.c **** {
 887              		.loc 1 208 0
 888              		.cfi_startproc
 889              		@ args = 0, pretend = 0, frame = 0
 890              		@ frame_needed = 0, uses_anonymous_args = 0
 891              	.LVL135:
 892 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 893              	.LCFI9:
 894              		.cfi_def_cfa_offset 24
 895              		.cfi_offset 3, -24
 896              		.cfi_offset 4, -20
 897              		.cfi_offset 5, -16
 898              		.cfi_offset 6, -12
 899              		.cfi_offset 7, -8
 900              		.cfi_offset 14, -4
 209:grbl/nuts_bolts.c ****   uint8_t idx;
 210:grbl/nuts_bolts.c ****   float limit_value = SOME_LARGE_VALUE;
 211:grbl/nuts_bolts.c ****   for (idx=0; idx<N_AXIS; idx++) {
 212:grbl/nuts_bolts.c ****     if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 901              		.loc 1 212 0
 902 0002 0C68     		ldr	r4, [r1]	@ float
 208:grbl/nuts_bolts.c ****   uint8_t idx;
 903              		.loc 1 208 0
 904 0004 0D46     		mov	r5, r1
 905 0006 0646     		mov	r6, r0
 906              		.loc 1 212 0
 907 0008 0021     		movs	r1, #0
 908              	.LVL136:
 909 000a 2046     		mov	r0, r4
 910              	.LVL137:
 911 000c FFF7FEFF 		bl	__aeabi_fcmpeq
 912              	.LVL138:
 913 0010 50B9     		cbnz	r0, .L124
 213:grbl/nuts_bolts.c ****       limit_value = min(limit_value,fabs(max_value[idx]/unit_vec[idx]));
 914              		.loc 1 213 0
 915 0012 2146     		mov	r1, r4
 916 0014 3068     		ldr	r0, [r6]	@ float
 917 0016 FFF7FEFF 		bl	__aeabi_fdiv
 918              	.LVL139:
 919 001a 20F00044 		bic	r4, r0, #-2147483648
 920 001e 2046     		mov	r0, r4
 921 0020 1549     		ldr	r1, .L131
 922 0022 FFF7FEFF 		bl	__aeabi_fcmpgt
 923              	.LVL140:
 924 0026 00B1     		cbz	r0, .L116
 925              	.L124:
 210:grbl/nuts_bolts.c ****   for (idx=0; idx<N_AXIS; idx++) {
 926              		.loc 1 210 0
 927 0028 134C     		ldr	r4, .L131
 928              	.L116:
 929              	.LVL141:
 212:grbl/nuts_bolts.c ****       limit_value = min(limit_value,fabs(max_value[idx]/unit_vec[idx]));
 930              		.loc 1 212 0
 931 002a 6F68     		ldr	r7, [r5, #4]	@ float
 932 002c 0021     		movs	r1, #0
 933 002e 3846     		mov	r0, r7
 934 0030 FFF7FEFF 		bl	__aeabi_fcmpeq
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 22


 935              	.LVL142:
 936 0034 58B9     		cbnz	r0, .L118
 937              		.loc 1 213 0
 938 0036 3946     		mov	r1, r7
 939 0038 7068     		ldr	r0, [r6, #4]	@ float
 940 003a FFF7FEFF 		bl	__aeabi_fdiv
 941              	.LVL143:
 942 003e 20F00047 		bic	r7, r0, #-2147483648
 943 0042 3946     		mov	r1, r7
 944 0044 2046     		mov	r0, r4
 945 0046 FFF7FEFF 		bl	__aeabi_fcmplt
 946              	.LVL144:
 947 004a 00B9     		cbnz	r0, .L118
 948 004c 3C46     		mov	r4, r7
 949              	.LVL145:
 950              	.L118:
 212:grbl/nuts_bolts.c ****       limit_value = min(limit_value,fabs(max_value[idx]/unit_vec[idx]));
 951              		.loc 1 212 0
 952 004e AD68     		ldr	r5, [r5, #8]	@ float
 953              	.LVL146:
 954 0050 0021     		movs	r1, #0
 955 0052 2846     		mov	r0, r5
 956 0054 FFF7FEFF 		bl	__aeabi_fcmpeq
 957              	.LVL147:
 958 0058 58B9     		cbnz	r0, .L115
 959              		.loc 1 213 0
 960 005a 2946     		mov	r1, r5
 961 005c B068     		ldr	r0, [r6, #8]	@ float
 962 005e FFF7FEFF 		bl	__aeabi_fdiv
 963              	.LVL148:
 964 0062 20F00045 		bic	r5, r0, #-2147483648
 965 0066 2846     		mov	r0, r5
 966 0068 2146     		mov	r1, r4
 967 006a FFF7FEFF 		bl	__aeabi_fcmpgt
 968              	.LVL149:
 969 006e 00B9     		cbnz	r0, .L115
 970 0070 2C46     		mov	r4, r5
 971              	.LVL150:
 972              	.L115:
 214:grbl/nuts_bolts.c ****     }
 215:grbl/nuts_bolts.c ****   }
 216:grbl/nuts_bolts.c ****   return(limit_value);
 217:grbl/nuts_bolts.c **** }
 973              		.loc 1 217 0
 974 0072 2046     		mov	r0, r4
 975 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 976              	.LVL151:
 977              	.L132:
 978 0076 00BF     		.align	2
 979              	.L131:
 980 0078 FFFF7F7F 		.word	2139095039
 981              		.cfi_endproc
 982              	.LFE710:
 984              		.text
 985              	.Letext0:
 986              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 987              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 23


 988              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 989              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 990              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 991              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/math.h"
 992              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 993              		.file 9 "Drivers/CMSIS/Include/core_cm3.h"
 994              		.file 10 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 995              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 996              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h"
 997              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h"
 998              		.file 14 "stm32/stm32utilities.h"
 999              		.file 15 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 1000              		.file 16 "grbl/settings.h"
 1001              		.file 17 "grbl/system.h"
 1002              		.file 18 "grbl/gcode.h"
 1003              		.file 19 "grbl/grbl.h"
 1004              		.file 20 "grbl/protocol.h"
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 nuts_bolts.c
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:22     .text.read_float:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:30     .text.read_float:0000000000000000 read_float
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:270    .text.read_float:0000000000000110 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:279    .text._delay_ms:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:287    .text._delay_ms:0000000000000000 _delay_ms
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:330    .text._delay_ms:000000000000001c $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:337    .text.delay_sec:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:345    .text.delay_sec:0000000000000000 delay_sec
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:450    .text.delay_sec:000000000000006c $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:456    .text.delay_ms:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:464    .text.delay_ms:0000000000000000 delay_ms
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:546    .text.delay_ms:0000000000000034 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:552    .text.delay_us:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:560    .text.delay_us:0000000000000000 delay_us
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:687    .text.delay_us:0000000000000064 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:694    .text.hypot_f:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:702    .text.hypot_f:0000000000000000 hypot_f
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:746    .text.convert_delta_vector_to_unit_vector:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:754    .text.convert_delta_vector_to_unit_vector:0000000000000000 convert_delta_vector_to_unit_vector
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:877    .text.limit_value_by_axis_maximum:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:885    .text.limit_value_by_axis_maximum:0000000000000000 limit_value_by_axis_maximum
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//cc7XbZwe.s:980    .text.limit_value_by_axis_maximum:0000000000000078 $d

UNDEFINED SYMBOLS
__aeabi_ui2f
__aeabi_fcmpeq
__aeabi_f2d
__aeabi_dmul
__aeabi_d2f
__aeabi_fmul
SystemCoreClock
__aeabi_d2uiz
ceil
HAL_Delay
protocol_exec_rt_system
protocol_execute_realtime
sys
_delay_us
__aeabi_fadd
sqrtf
__aeabi_fdiv
__aeabi_fcmpgt
__aeabi_fcmplt
