ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"gcode.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.gc_init,"ax",%progbits
  16              		.align	1
  17              		.p2align 2,,3
  18              		.global	gc_init
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	gc_init:
  25              	.LFB703:
  26              		.file 1 "grbl/gcode.c"
   1:grbl/gcode.c  **** /*
   2:grbl/gcode.c  ****  gcode.c - rs274/ngc parser.
   3:grbl/gcode.c  ****  Part of Grbl
   4:grbl/gcode.c  **** 
   5:grbl/gcode.c  ****  Copyright (c) 2011-2016 Sungeun K. Jeon for Gnea Research LLC
   6:grbl/gcode.c  ****  Copyright (c) 2009-2011 Simen Svale Skogsrud
   7:grbl/gcode.c  ****  Copyright (c) 2018-2019 Thomas Truong
   8:grbl/gcode.c  **** 
   9:grbl/gcode.c  ****  Grbl is free software: you can redistribute it and/or modify
  10:grbl/gcode.c  ****  it under the terms of the GNU General Public License as published by
  11:grbl/gcode.c  ****  the Free Software Foundation, either version 3 of the License, or
  12:grbl/gcode.c  ****  (at your option) any later version.
  13:grbl/gcode.c  **** 
  14:grbl/gcode.c  ****  Grbl is distributed in the hope that it will be useful,
  15:grbl/gcode.c  ****  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:grbl/gcode.c  ****  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:grbl/gcode.c  ****  GNU General Public License for more details.
  18:grbl/gcode.c  **** 
  19:grbl/gcode.c  ****  You should have received a copy of the GNU General Public License
  20:grbl/gcode.c  ****  along with Grbl.  If not, see <http://www.gnu.org/licenses/>.
  21:grbl/gcode.c  ****  */
  22:grbl/gcode.c  **** 
  23:grbl/gcode.c  **** #include "grbl.h"
  24:grbl/gcode.c  **** 
  25:grbl/gcode.c  **** // NOTE: Max line number is defined by the g-code standard to be 99999. It seems to be an
  26:grbl/gcode.c  **** // arbitrary value, and some GUIs may require more. So we increased it based on a max safe
  27:grbl/gcode.c  **** // value when converting a float (7.2 digit precision)s to an integer.
  28:grbl/gcode.c  **** #define MAX_LINE_NUMBER 10000000
  29:grbl/gcode.c  **** #define MAX_TOOL_NUMBER 255 // Limited by max unsigned 8-bit value
  30:grbl/gcode.c  **** 
  31:grbl/gcode.c  **** #define AXIS_COMMAND_NONE 0
  32:grbl/gcode.c  **** #define AXIS_COMMAND_NON_MODAL 1
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 2


  33:grbl/gcode.c  **** #define AXIS_COMMAND_MOTION_MODE 2
  34:grbl/gcode.c  **** #define AXIS_COMMAND_TOOL_LENGTH_OFFSET 3 // *Undefined but required
  35:grbl/gcode.c  **** 
  36:grbl/gcode.c  **** // Declare gc extern struct
  37:grbl/gcode.c  **** parser_state_t gc_state;
  38:grbl/gcode.c  **** parser_block_t gc_block;
  39:grbl/gcode.c  **** 
  40:grbl/gcode.c  **** #define FAIL(status) return(status);
  41:grbl/gcode.c  **** 
  42:grbl/gcode.c  **** void gc_init()
  43:grbl/gcode.c  **** {
  27              		.loc 1 43 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
  44:grbl/gcode.c  **** 	memset(&gc_state, 0, sizeof(parser_state_t));
  36              		.loc 1 44 0
  37 0002 0021     		movs	r1, #0
  38 0004 4822     		movs	r2, #72
  39 0006 0748     		ldr	r0, .L6
  40 0008 FFF7FEFF 		bl	memset
  41              	.LVL0:
  45:grbl/gcode.c  **** 
  46:grbl/gcode.c  **** 	// Load default G54 coordinate system.
  47:grbl/gcode.c  **** 	if (!(settings_read_coord_data(gc_state.modal.coord_select,
  42              		.loc 1 47 0
  43 000c 0649     		ldr	r1, .L6+4
  44 000e 0020     		movs	r0, #0
  45 0010 FFF7FEFF 		bl	settings_read_coord_data
  46              	.LVL1:
  47 0014 00B1     		cbz	r0, .L5
  48:grbl/gcode.c  **** 			gc_state.coord_system)))
  49:grbl/gcode.c  **** 	{
  50:grbl/gcode.c  **** 		report_status_message(STATUS_SETTING_READ_FAIL);
  51:grbl/gcode.c  **** 	}
  52:grbl/gcode.c  **** }
  48              		.loc 1 52 0
  49 0016 08BD     		pop	{r3, pc}
  50              	.L5:
  50:grbl/gcode.c  **** 	}
  51              		.loc 1 50 0
  52 0018 0720     		movs	r0, #7
  53              		.loc 1 52 0
  54 001a BDE80840 		pop	{r3, lr}
  55              	.LCFI1:
  56              		.cfi_restore 14
  57              		.cfi_restore 3
  58              		.cfi_def_cfa_offset 0
  50:grbl/gcode.c  **** 	}
  59              		.loc 1 50 0
  60 001e FFF7FEBF 		b	report_status_message
  61              	.LVL2:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 3


  62              	.L7:
  63 0022 00BF     		.align	2
  64              	.L6:
  65 0024 00000000 		.word	gc_state
  66 0028 2C000000 		.word	gc_state+44
  67              		.cfi_endproc
  68              	.LFE703:
  70              		.section	.text.gc_sync_position,"ax",%progbits
  71              		.align	1
  72              		.p2align 2,,3
  73              		.global	gc_sync_position
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu softvfp
  79              	gc_sync_position:
  80              	.LFB704:
  53:grbl/gcode.c  **** 
  54:grbl/gcode.c  **** // Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
  55:grbl/gcode.c  **** // limit pull-off routines.
  56:grbl/gcode.c  **** void gc_sync_position()
  57:grbl/gcode.c  **** {
  81              		.loc 1 57 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  58:grbl/gcode.c  **** 	system_convert_array_steps_to_mpos(gc_state.position, sys_position);
  86              		.loc 1 58 0
  87 0000 0149     		ldr	r1, .L9
  88 0002 0248     		ldr	r0, .L9+4
  89 0004 FFF7FEBF 		b	system_convert_array_steps_to_mpos
  90              	.LVL3:
  91              	.L10:
  92              		.align	2
  93              	.L9:
  94 0008 00000000 		.word	sys_position
  95 000c 20000000 		.word	gc_state+32
  96              		.cfi_endproc
  97              	.LFE704:
  99              		.global	__aeabi_f2d
 100              		.global	__aeabi_d2uiz
 101              		.global	__aeabi_i2f
 102              		.global	__aeabi_fsub
 103              		.global	__aeabi_fmul
 104              		.global	__aeabi_f2iz
 105              		.global	__aeabi_fcmpgt
 106              		.global	__aeabi_fcmplt
 107              		.global	__aeabi_dmul
 108              		.global	__aeabi_d2f
 109              		.global	__aeabi_fadd
 110              		.global	__aeabi_fcmpeq
 111              		.global	__aeabi_dsub
 112              		.global	__aeabi_ddiv
 113              		.global	__aeabi_dcmpgt
 114              		.section	.text.gc_execute_line,"ax",%progbits
 115              		.align	1
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 4


 116              		.p2align 2,,3
 117              		.global	gc_execute_line
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 121              		.fpu softvfp
 123              	gc_execute_line:
 124              	.LFB705:
  59:grbl/gcode.c  **** }
  60:grbl/gcode.c  **** 
  61:grbl/gcode.c  **** // Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
  62:grbl/gcode.c  **** // characters and signed floating point values (no whitespace). Comments and block delete
  63:grbl/gcode.c  **** // characters have been removed. In this function, all units and positions are converted and
  64:grbl/gcode.c  **** // exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
  65:grbl/gcode.c  **** // coordinates, respectively.
  66:grbl/gcode.c  **** uint8_t gc_execute_line(char *line)
  67:grbl/gcode.c  **** {
 125              		.loc 1 67 0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 72
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              	.LVL4:
 130 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 131              	.LCFI2:
 132              		.cfi_def_cfa_offset 36
 133              		.cfi_offset 4, -36
 134              		.cfi_offset 5, -32
 135              		.cfi_offset 6, -28
 136              		.cfi_offset 7, -24
 137              		.cfi_offset 8, -20
 138              		.cfi_offset 9, -16
 139              		.cfi_offset 10, -12
 140              		.cfi_offset 11, -8
 141              		.cfi_offset 14, -4
 142 0004 0546     		mov	r5, r0
  68:grbl/gcode.c  **** 	/* -------------------------------------------------------------------------------------
  69:grbl/gcode.c  **** 	 STEP 1: Initialize parser block struct and copy current g-code state modes. The parser
  70:grbl/gcode.c  **** 	 updates these modes and commands as the block line is parser and will only be used and
  71:grbl/gcode.c  **** 	 executed after successful error-checking. The parser block struct also contains a block
  72:grbl/gcode.c  **** 	 values struct, word tracking variables, and a non-modal commands tracker for the new
  73:grbl/gcode.c  **** 	 block. This struct contains all of the necessary information to execute the block. */
  74:grbl/gcode.c  **** 
  75:grbl/gcode.c  **** 	memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 143              		.loc 1 75 0
 144 0006 664E     		ldr	r6, .L560
 145 0008 4C22     		movs	r2, #76
 146 000a 0021     		movs	r1, #0
  67:grbl/gcode.c  **** 	/* -------------------------------------------------------------------------------------
 147              		.loc 1 67 0
 148 000c 99B0     		sub	sp, sp, #100
 149              	.LCFI3:
 150              		.cfi_def_cfa_offset 136
 151              		.loc 1 75 0
 152 000e 3046     		mov	r0, r6
 153              	.LVL5:
 154 0010 FFF7FEFF 		bl	memset
 155              	.LVL6:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 5


  76:grbl/gcode.c  **** 	memcpy(&gc_block.modal, &gc_state.modal, sizeof(gc_modal_t)); // Copy current modes
 156              		.loc 1 76 0
 157 0014 634B     		ldr	r3, .L560+4
 158 0016 07CB     		ldmia	r3!, {r0, r1, r2}
 159 0018 1F88     		ldrh	r7, [r3]	@ unaligned
 160 001a 9C78     		ldrb	r4, [r3, #2]	@ zero_extendqisi2
 161 001c C6F80100 		str	r0, [r6, #1]	@ unaligned
 162 0020 C6F80510 		str	r1, [r6, #5]	@ unaligned
 163 0024 C6F80920 		str	r2, [r6, #9]	@ unaligned
 164 0028 A6F80D70 		strh	r7, [r6, #13]	@ unaligned
 165 002c F473     		strb	r4, [r6, #15]
 166              	.LVL7:
  77:grbl/gcode.c  **** 
  78:grbl/gcode.c  **** 	uint8_t axis_command = AXIS_COMMAND_NONE;
  79:grbl/gcode.c  **** 	uint8_t axis_0, axis_1, axis_linear;
  80:grbl/gcode.c  **** 	uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
  81:grbl/gcode.c  **** 	uint8_t output_select = 0;
  82:grbl/gcode.c  **** 	uint8_t input_select = 0;
  83:grbl/gcode.c  **** 
  84:grbl/gcode.c  **** 	// Initialize bitflag tracking variables for axis indices compatible operations.
  85:grbl/gcode.c  **** 	uint8_t axis_words = 0; // XYZ tracking (also ABC if enabled)
  86:grbl/gcode.c  **** 	uint8_t ijk_words = 0; // IJK tracking
  87:grbl/gcode.c  **** 
  88:grbl/gcode.c  **** 	// Initialize command and value words and parser flags variables.
  89:grbl/gcode.c  **** //	uint16_t command_words = 0; // Tracks G and M command words. Also used for modal group violation
  90:grbl/gcode.c  **** //	uint16_t value_words = 0; // Tracks value words.
  91:grbl/gcode.c  **** 	uint32_t command_words = 0; // Tracks G and M command words. Also used for modal group violations.
  92:grbl/gcode.c  **** 	uint32_t value_words = 0; // Tracks value words.
  93:grbl/gcode.c  **** 
  94:grbl/gcode.c  **** 	uint8_t gc_parser_flags = GC_PARSER_NONE;
  95:grbl/gcode.c  **** 
  96:grbl/gcode.c  **** 	// Determine if the line is a jogging motion or a normal g-code block.
  97:grbl/gcode.c  **** 	if (line[0] == '$')
 167              		.loc 1 97 0
 168 002e 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 169 0030 242B     		cmp	r3, #36
 170 0032 00F05081 		beq	.L530
 171 0036 0423     		movs	r3, #4
  98:grbl/gcode.c  **** 	{ // NOTE: `$J=` already parsed when passed to this function.
  99:grbl/gcode.c  **** 		// Set G1 and G94 enforced modes to ensure accurate error checks.
 100:grbl/gcode.c  **** 		gc_parser_flags |= GC_PARSER_JOG_MOTION;
 101:grbl/gcode.c  **** 		gc_block.modal.motion = MOTION_MODE_LINEAR;
 102:grbl/gcode.c  **** 		gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 103:grbl/gcode.c  **** #ifdef USE_LINE_NUMBERS
 104:grbl/gcode.c  **** 		gc_block.values.n = JOG_LINE_NUMBER; // Initialize default line number reported during jog.
 105:grbl/gcode.c  **** #endif
 106:grbl/gcode.c  **** 	}
 107:grbl/gcode.c  **** 
 108:grbl/gcode.c  **** 	/* -------------------------------------------------------------------------------------
 109:grbl/gcode.c  **** 	 STEP 2: Import all g-code words in the block line. A g-code word is a letter followed by
 110:grbl/gcode.c  **** 	 a number, which can either be a 'G'/'M' command or sets/assigns a command value. Also,
 111:grbl/gcode.c  **** 	 perform initial error-checks for command word modal group violations, for any repeated
 112:grbl/gcode.c  **** 	 words, and for negative values set for the value words F, N, P, T, and S. */
 113:grbl/gcode.c  **** 
 114:grbl/gcode.c  **** 	uint8_t word_bit; // Bit-value for assigning tracking variables
 115:grbl/gcode.c  **** 	uint8_t char_counter;
 116:grbl/gcode.c  **** 	char letter;
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 6


 117:grbl/gcode.c  **** 	float value;
 118:grbl/gcode.c  **** 	uint8_t int_value = 0;
 119:grbl/gcode.c  **** 	uint16_t mantissa = 0;
 120:grbl/gcode.c  **** 	if (gc_parser_flags & GC_PARSER_JOG_MOTION)
 121:grbl/gcode.c  **** 	{
 122:grbl/gcode.c  **** 		char_counter = 3;
 123:grbl/gcode.c  **** 	} // Start parsing after `$J=`
 124:grbl/gcode.c  **** 	else
 125:grbl/gcode.c  **** 	{
 126:grbl/gcode.c  **** 		char_counter = 0;
 172              		.loc 1 126 0
 173 0038 0022     		movs	r2, #0
 174 003a 0B93     		str	r3, [sp, #44]
 175 003c 1023     		movs	r3, #16
  94:grbl/gcode.c  **** 
 176              		.loc 1 94 0
 177 003e 0992     		str	r2, [sp, #36]
 178 0040 0A93     		str	r3, [sp, #40]
 179              	.LVL8:
 180              	.L12:
 100:grbl/gcode.c  **** 		gc_block.modal.motion = MOTION_MODE_LINEAR;
 181              		.loc 1 100 0
 182 0042 4FF00008 		mov	r8, #0
 183              	.LVL9:
 127:grbl/gcode.c  **** 	}
 128:grbl/gcode.c  **** 
 129:grbl/gcode.c  **** 	while (line[char_counter] != 0)
 184              		.loc 1 129 0
 185 0046 AC5C     		ldrb	r4, [r5, r2]	@ zero_extendqisi2
 186 0048 8DF84320 		strb	r2, [sp, #67]
 100:grbl/gcode.c  **** 		gc_block.modal.motion = MOTION_MODE_LINEAR;
 187              		.loc 1 100 0
 188 004c 4746     		mov	r7, r8
 189              	.LVL10:
 190 004e CDF82080 		str	r8, [sp, #32]
 191              	.LVL11:
 192 0052 CDE90688 		strd	r8, r8, [sp, #24]
 193              	.LVL12:
 130:grbl/gcode.c  **** 	{ // Loop until no more g-code words in line.
 131:grbl/gcode.c  **** 
 132:grbl/gcode.c  **** 		// Import the next g-code word, expecting a letter followed by a value. Otherwise, error out.
 133:grbl/gcode.c  **** 		letter = line[char_counter];
 134:grbl/gcode.c  **** 		if ((letter < 'A') || (letter > 'Z'))
 135:grbl/gcode.c  **** 		{
 136:grbl/gcode.c  **** 			FAIL(STATUS_EXPECTED_COMMAND_LETTER);
 137:grbl/gcode.c  **** 		} // [Expected word letter]
 138:grbl/gcode.c  **** 		char_counter++;
 139:grbl/gcode.c  **** 		if (!read_float(line, &char_counter, &value))
 140:grbl/gcode.c  **** 		{
 141:grbl/gcode.c  **** 			FAIL(STATUS_BAD_NUMBER_FORMAT);
 142:grbl/gcode.c  **** 		} // [Expected word value]
 143:grbl/gcode.c  **** 
 144:grbl/gcode.c  **** 		// Convert values to smaller uint8 significand and mantissa values for parsing this word.
 145:grbl/gcode.c  **** 		// NOTE: Mantissa is multiplied by 100 to catch non-integer command values. This is more
 146:grbl/gcode.c  **** 		// accurate than the NIST gcode requirement of x10 when used for commands, but not quite
 147:grbl/gcode.c  **** 		// accurate enough for value words that require integers to within 0.0001. This should be
 148:grbl/gcode.c  **** 		// a good enough comprimise and catch most all non-integer errors. To make it compliant,
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 7


 149:grbl/gcode.c  **** 		// we would simply need to change the mantissa to int16, but this add compiled flash space.
 150:grbl/gcode.c  **** 		// Maybe update this later.
 151:grbl/gcode.c  **** 		int_value = trunc(value);
 152:grbl/gcode.c  **** 		mantissa = round(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 194              		.loc 1 152 0
 195 0056 DFF85091 		ldr	r9, .L560+8
 129:grbl/gcode.c  **** 	{ // Loop until no more g-code words in line.
 196              		.loc 1 129 0
 197 005a 002C     		cmp	r4, #0
 198 005c 00F05481 		beq	.L531
 199              	.LVL13:
 200              	.L79:
 134:grbl/gcode.c  **** 		{
 201              		.loc 1 134 0
 202 0060 A4F14103 		sub	r3, r4, #65
 203 0064 192B     		cmp	r3, #25
 204 0066 00F25E83 		bhi	.L234
 138:grbl/gcode.c  **** 		if (!read_float(line, &char_counter, &value))
 205              		.loc 1 138 0
 206 006a 531C     		adds	r3, r2, #1
 139:grbl/gcode.c  **** 		{
 207              		.loc 1 139 0
 208 006c 0DF14301 		add	r1, sp, #67
 209 0070 11AA     		add	r2, sp, #68
 210 0072 2846     		mov	r0, r5
 138:grbl/gcode.c  **** 		if (!read_float(line, &char_counter, &value))
 211              		.loc 1 138 0
 212 0074 8DF84330 		strb	r3, [sp, #67]
 139:grbl/gcode.c  **** 		{
 213              		.loc 1 139 0
 214 0078 FFF7FEFF 		bl	read_float
 215              	.LVL14:
 216 007c 0028     		cmp	r0, #0
 217 007e 00F05783 		beq	.L235
 151:grbl/gcode.c  **** 		mantissa = round(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 218              		.loc 1 151 0
 219 0082 DDF844B0 		ldr	fp, [sp, #68]	@ float
 220 0086 5846     		mov	r0, fp
 221 0088 FFF7FEFF 		bl	__aeabi_f2d
 222              	.LVL15:
 223 008c FFF7FEFF 		bl	trunc
 224              	.LVL16:
 225 0090 FFF7FEFF 		bl	__aeabi_d2uiz
 226              	.LVL17:
 227 0094 5FFA80FA 		uxtb	r10, r0
 228              	.LVL18:
 229              		.loc 1 152 0
 230 0098 5046     		mov	r0, r10
 231 009a FFF7FEFF 		bl	__aeabi_i2f
 232              	.LVL19:
 233 009e 0146     		mov	r1, r0
 234 00a0 5846     		mov	r0, fp
 235 00a2 FFF7FEFF 		bl	__aeabi_fsub
 236              	.LVL20:
 237 00a6 4946     		mov	r1, r9
 238 00a8 FFF7FEFF 		bl	__aeabi_fmul
 239              	.LVL21:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 8


 240 00ac FFF7FEFF 		bl	__aeabi_f2d
 241              	.LVL22:
 242 00b0 FFF7FEFF 		bl	round
 243              	.LVL23:
 244 00b4 FFF7FEFF 		bl	__aeabi_d2uiz
 245              	.LVL24:
 153:grbl/gcode.c  **** 		// NOTE: Rounding must be used to catch small floating point errors.
 154:grbl/gcode.c  **** 
 155:grbl/gcode.c  **** 		// Check if the g-code word is supported or errors due to modal group violations or has
 156:grbl/gcode.c  **** 		// been repeated in the g-code block. If ok, update the command or record its value.
 157:grbl/gcode.c  **** 		switch (letter)
 246              		.loc 1 157 0
 247 00b8 472C     		cmp	r4, #71
 152:grbl/gcode.c  **** 		// NOTE: Rounding must be used to catch small floating point errors.
 248              		.loc 1 152 0
 249 00ba 80B2     		uxth	r0, r0
 250              	.LVL25:
 251              		.loc 1 157 0
 252 00bc 76D0     		beq	.L15
 253 00be 4D2C     		cmp	r4, #77
 254 00c0 40F0D980 		bne	.L532
 158:grbl/gcode.c  **** 		{
 159:grbl/gcode.c  **** 
 160:grbl/gcode.c  **** 		/* 'G' and 'M' Command Words: Parse commands and check for modal group violations.
 161:grbl/gcode.c  **** 		 NOTE: Modal group numbers are defined in Table 4 of NIST RS274-NGC v3, pg.20 */
 162:grbl/gcode.c  **** 
 163:grbl/gcode.c  **** 		case 'G':
 164:grbl/gcode.c  **** 			// Determine 'G' command and its modal group
 165:grbl/gcode.c  **** 			switch (int_value)
 166:grbl/gcode.c  **** 			{
 167:grbl/gcode.c  **** 			case 10:
 168:grbl/gcode.c  **** 			case 28:
 169:grbl/gcode.c  **** 			case 30:
 170:grbl/gcode.c  **** 			case 92:
 171:grbl/gcode.c  **** 				// Check for G10/28/30/92 being called with G0/1/2/3/38 on same block.
 172:grbl/gcode.c  **** 				// * G43.1 is also an axis command but is not explicitly defined this way.
 173:grbl/gcode.c  **** 				if (mantissa == 0)
 174:grbl/gcode.c  **** 				{ // Ignore G28.1, G30.1, and G92.1
 175:grbl/gcode.c  **** 					if (axis_command)
 176:grbl/gcode.c  **** 					{
 177:grbl/gcode.c  **** 						FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT);
 178:grbl/gcode.c  **** 					} // [Axis word/command conflict]
 179:grbl/gcode.c  **** 					axis_command = AXIS_COMMAND_NON_MODAL;
 180:grbl/gcode.c  **** 				}
 181:grbl/gcode.c  **** 				// No break. Continues to next line.
 182:grbl/gcode.c  **** 			case 4:
 183:grbl/gcode.c  **** 			case 53:
 184:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_G0;
 185:grbl/gcode.c  **** 				gc_block.non_modal_command = int_value;
 186:grbl/gcode.c  **** 				if ((int_value == 28) || (int_value == 30) || (int_value == 92))
 187:grbl/gcode.c  **** 				{
 188:grbl/gcode.c  **** 					if (!((mantissa == 0) || (mantissa == 10)))
 189:grbl/gcode.c  **** 					{
 190:grbl/gcode.c  **** 						FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 191:grbl/gcode.c  **** 					}
 192:grbl/gcode.c  **** 					gc_block.non_modal_command += mantissa;
 193:grbl/gcode.c  **** 					mantissa = 0; // Set to zero to indicate valid non-integer G command.
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 9


 194:grbl/gcode.c  **** 				}
 195:grbl/gcode.c  **** 				break;
 196:grbl/gcode.c  **** 			case 0:
 197:grbl/gcode.c  **** 			case 1:
 198:grbl/gcode.c  **** 			case 2:
 199:grbl/gcode.c  **** 			case 3:
 200:grbl/gcode.c  **** 			case 38:
 201:grbl/gcode.c  **** 				// Check for G0/1/2/3/38 being called with G10/28/30/92 on same block.
 202:grbl/gcode.c  **** 				// * G43.1 is also an axis command but is not explicitly defined this way.
 203:grbl/gcode.c  **** 				if (axis_command)
 204:grbl/gcode.c  **** 				{
 205:grbl/gcode.c  **** 					FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT);
 206:grbl/gcode.c  **** 				} // [Axis word/command conflict]
 207:grbl/gcode.c  **** 				axis_command = AXIS_COMMAND_MOTION_MODE;
 208:grbl/gcode.c  **** 				// No break. Continues to next line.
 209:grbl/gcode.c  **** 			case 80:
 210:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_G1;
 211:grbl/gcode.c  **** 				gc_block.modal.motion = int_value;
 212:grbl/gcode.c  **** 				if (int_value == 38)
 213:grbl/gcode.c  **** 				{
 214:grbl/gcode.c  **** 					if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40)
 215:grbl/gcode.c  **** 							|| (mantissa == 50)))
 216:grbl/gcode.c  **** 					{
 217:grbl/gcode.c  **** 						FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported G38.x command]
 218:grbl/gcode.c  **** 					}
 219:grbl/gcode.c  **** 					gc_block.modal.motion += (mantissa / 10) + 100;
 220:grbl/gcode.c  **** 					mantissa = 0; // Set to zero to indicate valid non-integer G command.
 221:grbl/gcode.c  **** 				}
 222:grbl/gcode.c  **** 				break;
 223:grbl/gcode.c  **** 			case 17:
 224:grbl/gcode.c  **** 			case 18:
 225:grbl/gcode.c  **** 			case 19:
 226:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_G2;
 227:grbl/gcode.c  **** 				gc_block.modal.plane_select = int_value - 17;
 228:grbl/gcode.c  **** 				break;
 229:grbl/gcode.c  **** 			case 90:
 230:grbl/gcode.c  **** 			case 91:
 231:grbl/gcode.c  **** 				if (mantissa == 0)
 232:grbl/gcode.c  **** 				{
 233:grbl/gcode.c  **** 					word_bit = MODAL_GROUP_G3;
 234:grbl/gcode.c  **** 					gc_block.modal.distance = int_value - 90;
 235:grbl/gcode.c  **** 				}
 236:grbl/gcode.c  **** 				else
 237:grbl/gcode.c  **** 				{
 238:grbl/gcode.c  **** 					word_bit = MODAL_GROUP_G4;
 239:grbl/gcode.c  **** 					if ((mantissa != 10) || (int_value == 90))
 240:grbl/gcode.c  **** 					{
 241:grbl/gcode.c  **** 						FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 242:grbl/gcode.c  **** 					} // [G90.1 not supported]
 243:grbl/gcode.c  **** 					mantissa = 0; // Set to zero to indicate valid non-integer G command.
 244:grbl/gcode.c  **** 					// Otherwise, arc IJK incremental mode is default. G91.1 does nothing.
 245:grbl/gcode.c  **** 				}
 246:grbl/gcode.c  **** 				break;
 247:grbl/gcode.c  **** 			case 93:
 248:grbl/gcode.c  **** 			case 94:
 249:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_G5;
 250:grbl/gcode.c  **** 				gc_block.modal.feed_rate = 94 - int_value;
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 10


 251:grbl/gcode.c  **** 				break;
 252:grbl/gcode.c  **** 			case 20:
 253:grbl/gcode.c  **** 			case 21:
 254:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_G6;
 255:grbl/gcode.c  **** 				gc_block.modal.units = 21 - int_value;
 256:grbl/gcode.c  **** 				break;
 257:grbl/gcode.c  **** 			case 40:
 258:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_G7;
 259:grbl/gcode.c  **** 				// NOTE: Not required since cutter radius compensation is always disabled. Only here
 260:grbl/gcode.c  **** 				// to support G40 commands that often appear in g-code program headers to setup defaults.
 261:grbl/gcode.c  **** 				// gc_block.modal.cutter_comp = CUTTER_COMP_DISABLE; // G40
 262:grbl/gcode.c  **** 				break;
 263:grbl/gcode.c  **** 			case 43:
 264:grbl/gcode.c  **** 			case 49:
 265:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_G8;
 266:grbl/gcode.c  **** 				// NOTE: The NIST g-code standard vaguely states that when a tool length offset is changed,
 267:grbl/gcode.c  **** 				// there cannot be any axis motion or coordinate offsets updated. Meaning G43, G43.1, and G49
 268:grbl/gcode.c  **** 				// all are explicit axis commands, regardless if they require axis words or not.
 269:grbl/gcode.c  **** 				if (axis_command)
 270:grbl/gcode.c  **** 				{
 271:grbl/gcode.c  **** 					FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT);
 272:grbl/gcode.c  **** 				} // [Axis word/command conflict] }
 273:grbl/gcode.c  **** 				axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 274:grbl/gcode.c  **** 				if (int_value == 49)
 275:grbl/gcode.c  **** 				{ // G49
 276:grbl/gcode.c  **** 					gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 277:grbl/gcode.c  **** 				}
 278:grbl/gcode.c  **** 				else if (mantissa == 10)
 279:grbl/gcode.c  **** 				{ // G43.1
 280:grbl/gcode.c  **** 					gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 281:grbl/gcode.c  **** 				}
 282:grbl/gcode.c  **** 				else
 283:grbl/gcode.c  **** 				{
 284:grbl/gcode.c  **** 					FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 285:grbl/gcode.c  **** 				} // [Unsupported G43.x command]
 286:grbl/gcode.c  **** 				mantissa = 0; // Set to zero to indicate valid non-integer G command.
 287:grbl/gcode.c  **** 				break;
 288:grbl/gcode.c  **** 			case 54:
 289:grbl/gcode.c  **** 			case 55:
 290:grbl/gcode.c  **** 			case 56:
 291:grbl/gcode.c  **** 			case 57:
 292:grbl/gcode.c  **** 			case 58:
 293:grbl/gcode.c  **** 			case 59:
 294:grbl/gcode.c  **** 				// NOTE: G59.x are not supported. (But their int_values would be 60, 61, and 62.)
 295:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_G12;
 296:grbl/gcode.c  **** 				gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 297:grbl/gcode.c  **** 				break;
 298:grbl/gcode.c  **** 			case 61:
 299:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_G13;
 300:grbl/gcode.c  **** 				if (mantissa != 0)
 301:grbl/gcode.c  **** 				{
 302:grbl/gcode.c  **** 					FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 303:grbl/gcode.c  **** 				} // [G61.1 not supported]
 304:grbl/gcode.c  **** 				// gc_block.modal.control = CONTROL_MODE_EXACT_PATH; // G61
 305:grbl/gcode.c  **** 				break;
 306:grbl/gcode.c  **** 			default:
 307:grbl/gcode.c  **** 				FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND)
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 11


 308:grbl/gcode.c  **** 				; // [Unsupported G command]
 309:grbl/gcode.c  **** 			}
 310:grbl/gcode.c  **** 			if (mantissa > 0)
 311:grbl/gcode.c  **** 			{
 312:grbl/gcode.c  **** 				FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER);
 313:grbl/gcode.c  **** 			} // [Unsupported or invalid Gxx.x command]
 314:grbl/gcode.c  **** 			// Check for more than one command per modal group violations in the current block
 315:grbl/gcode.c  **** 			// NOTE: Variable 'word_bit' is always assigned, if the command is valid.
 316:grbl/gcode.c  **** 			if (bit_istrue(command_words, bit(word_bit)))
 317:grbl/gcode.c  **** 			{
 318:grbl/gcode.c  **** 				FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION);
 319:grbl/gcode.c  **** 			}
 320:grbl/gcode.c  **** 			command_words |= bit(word_bit);
 321:grbl/gcode.c  **** 			break;
 322:grbl/gcode.c  **** 
 323:grbl/gcode.c  **** 		case 'M':
 324:grbl/gcode.c  **** 
 325:grbl/gcode.c  **** 			// Determine 'M' command and its modal group
 326:grbl/gcode.c  **** 			if (mantissa > 0)
 255              		.loc 1 326 0
 256 00c4 0028     		cmp	r0, #0
 257 00c6 40F0E881 		bne	.L40
 327:grbl/gcode.c  **** 			{
 328:grbl/gcode.c  **** 				FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER);
 329:grbl/gcode.c  **** 			} // [No Mxx.x commands]
 330:grbl/gcode.c  **** 			switch (int_value)
 258              		.loc 1 330 0
 259 00ca BAF1640F 		cmp	r10, #100
 260 00ce 00F2FD80 		bhi	.L270
 261 00d2 DFE81AF0 		tbh	[pc, r10, lsl #1]
 262              	.L42:
 263 00d6 A501     		.2byte	(.L41-.L42)/2
 264 00d8 A501     		.2byte	(.L41-.L42)/2
 265 00da A501     		.2byte	(.L41-.L42)/2
 266 00dc BA01     		.2byte	(.L43-.L42)/2
 267 00de BA01     		.2byte	(.L43-.L42)/2
 268 00e0 BA01     		.2byte	(.L43-.L42)/2
 269 00e2 FB00     		.2byte	(.L270-.L42)/2
 270 00e4 C701     		.2byte	(.L44-.L42)/2
 271 00e6 C701     		.2byte	(.L44-.L42)/2
 272 00e8 C701     		.2byte	(.L44-.L42)/2
 273 00ea FB00     		.2byte	(.L270-.L42)/2
 274 00ec FB00     		.2byte	(.L270-.L42)/2
 275 00ee FB00     		.2byte	(.L270-.L42)/2
 276 00f0 FB00     		.2byte	(.L270-.L42)/2
 277 00f2 FB00     		.2byte	(.L270-.L42)/2
 278 00f4 FB00     		.2byte	(.L270-.L42)/2
 279 00f6 FB00     		.2byte	(.L270-.L42)/2
 280 00f8 FB00     		.2byte	(.L270-.L42)/2
 281 00fa FB00     		.2byte	(.L270-.L42)/2
 282 00fc FB00     		.2byte	(.L270-.L42)/2
 283 00fe FB00     		.2byte	(.L270-.L42)/2
 284 0100 FB00     		.2byte	(.L270-.L42)/2
 285 0102 FB00     		.2byte	(.L270-.L42)/2
 286 0104 FB00     		.2byte	(.L270-.L42)/2
 287 0106 FB00     		.2byte	(.L270-.L42)/2
 288 0108 FB00     		.2byte	(.L270-.L42)/2
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 12


 289 010a FB00     		.2byte	(.L270-.L42)/2
 290 010c FB00     		.2byte	(.L270-.L42)/2
 291 010e FB00     		.2byte	(.L270-.L42)/2
 292 0110 FB00     		.2byte	(.L270-.L42)/2
 293 0112 A501     		.2byte	(.L41-.L42)/2
 294 0114 FB00     		.2byte	(.L270-.L42)/2
 295 0116 FB00     		.2byte	(.L270-.L42)/2
 296 0118 FB00     		.2byte	(.L270-.L42)/2
 297 011a FB00     		.2byte	(.L270-.L42)/2
 298 011c FB00     		.2byte	(.L270-.L42)/2
 299 011e FB00     		.2byte	(.L270-.L42)/2
 300 0120 FB00     		.2byte	(.L270-.L42)/2
 301 0122 FB00     		.2byte	(.L270-.L42)/2
 302 0124 FB00     		.2byte	(.L270-.L42)/2
 303 0126 FB00     		.2byte	(.L270-.L42)/2
 304 0128 FB00     		.2byte	(.L270-.L42)/2
 305 012a FB00     		.2byte	(.L270-.L42)/2
 306 012c FB00     		.2byte	(.L270-.L42)/2
 307 012e FB00     		.2byte	(.L270-.L42)/2
 308 0130 FB00     		.2byte	(.L270-.L42)/2
 309 0132 FB00     		.2byte	(.L270-.L42)/2
 310 0134 FB00     		.2byte	(.L270-.L42)/2
 311 0136 FB00     		.2byte	(.L270-.L42)/2
 312 0138 FB00     		.2byte	(.L270-.L42)/2
 313 013a FB00     		.2byte	(.L270-.L42)/2
 314 013c FB00     		.2byte	(.L270-.L42)/2
 315 013e FB00     		.2byte	(.L270-.L42)/2
 316 0140 FB00     		.2byte	(.L270-.L42)/2
 317 0142 FB00     		.2byte	(.L270-.L42)/2
 318 0144 FB00     		.2byte	(.L270-.L42)/2
 319 0146 FB00     		.2byte	(.L270-.L42)/2
 320 0148 FB00     		.2byte	(.L270-.L42)/2
 321 014a FB00     		.2byte	(.L270-.L42)/2
 322 014c FB00     		.2byte	(.L270-.L42)/2
 323 014e FB00     		.2byte	(.L270-.L42)/2
 324 0150 FB00     		.2byte	(.L270-.L42)/2
 325 0152 B001     		.2byte	(.L45-.L42)/2
 326 0154 B501     		.2byte	(.L46-.L42)/2
 327 0156 FB00     		.2byte	(.L270-.L42)/2
 328 0158 FB00     		.2byte	(.L270-.L42)/2
 329 015a D401     		.2byte	(.L47-.L42)/2
 330 015c D901     		.2byte	(.L48-.L42)/2
 331 015e FB00     		.2byte	(.L270-.L42)/2
 332 0160 FB00     		.2byte	(.L270-.L42)/2
 333 0162 FB00     		.2byte	(.L270-.L42)/2
 334 0164 FB00     		.2byte	(.L270-.L42)/2
 335 0166 FB00     		.2byte	(.L270-.L42)/2
 336 0168 FB00     		.2byte	(.L270-.L42)/2
 337 016a FB00     		.2byte	(.L270-.L42)/2
 338 016c FB00     		.2byte	(.L270-.L42)/2
 339 016e FB00     		.2byte	(.L270-.L42)/2
 340 0170 FB00     		.2byte	(.L270-.L42)/2
 341 0172 FB00     		.2byte	(.L270-.L42)/2
 342 0174 FB00     		.2byte	(.L270-.L42)/2
 343 0176 FB00     		.2byte	(.L270-.L42)/2
 344 0178 FB00     		.2byte	(.L270-.L42)/2
 345 017a FB00     		.2byte	(.L270-.L42)/2
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 13


 346 017c FB00     		.2byte	(.L270-.L42)/2
 347 017e FB00     		.2byte	(.L270-.L42)/2
 348 0180 FB00     		.2byte	(.L270-.L42)/2
 349 0182 FB00     		.2byte	(.L270-.L42)/2
 350 0184 FB00     		.2byte	(.L270-.L42)/2
 351 0186 FB00     		.2byte	(.L270-.L42)/2
 352 0188 FB00     		.2byte	(.L270-.L42)/2
 353 018a FB00     		.2byte	(.L270-.L42)/2
 354 018c FB00     		.2byte	(.L270-.L42)/2
 355 018e FB00     		.2byte	(.L270-.L42)/2
 356 0190 FB00     		.2byte	(.L270-.L42)/2
 357 0192 FB00     		.2byte	(.L270-.L42)/2
 358 0194 FB00     		.2byte	(.L270-.L42)/2
 359 0196 FB00     		.2byte	(.L270-.L42)/2
 360 0198 FB00     		.2byte	(.L270-.L42)/2
 361 019a FB00     		.2byte	(.L270-.L42)/2
 362 019c FB00     		.2byte	(.L270-.L42)/2
 363 019e 0B01     		.2byte	(.L49-.L42)/2
 364              		.p2align 1
 365              	.L561:
 366              		.align	2
 367              	.L560:
 368 01a0 00000000 		.word	gc_block
 369 01a4 00000000 		.word	gc_state
 370 01a8 0000C842 		.word	1120403456
 371              	.L15:
 165:grbl/gcode.c  **** 			{
 372              		.loc 1 165 0
 373 01ac BAF15E0F 		cmp	r10, #94
 374 01b0 00F28C80 		bhi	.L270
 375 01b4 DFE81AF0 		tbh	[pc, r10, lsl #1]
 376              	.L18:
 377 01b8 7A00     		.2byte	(.L17-.L18)/2
 378 01ba 7A00     		.2byte	(.L17-.L18)/2
 379 01bc 7A00     		.2byte	(.L17-.L18)/2
 380 01be 7A00     		.2byte	(.L17-.L18)/2
 381 01c0 D401     		.2byte	(.L19-.L18)/2
 382 01c2 8A00     		.2byte	(.L270-.L18)/2
 383 01c4 8A00     		.2byte	(.L270-.L18)/2
 384 01c6 8A00     		.2byte	(.L270-.L18)/2
 385 01c8 8A00     		.2byte	(.L270-.L18)/2
 386 01ca 8A00     		.2byte	(.L270-.L18)/2
 387 01cc 9201     		.2byte	(.L20-.L18)/2
 388 01ce 8A00     		.2byte	(.L270-.L18)/2
 389 01d0 8A00     		.2byte	(.L270-.L18)/2
 390 01d2 8A00     		.2byte	(.L270-.L18)/2
 391 01d4 8A00     		.2byte	(.L270-.L18)/2
 392 01d6 8A00     		.2byte	(.L270-.L18)/2
 393 01d8 8A00     		.2byte	(.L270-.L18)/2
 394 01da 7C01     		.2byte	(.L21-.L18)/2
 395 01dc 7C01     		.2byte	(.L21-.L18)/2
 396 01de 7C01     		.2byte	(.L21-.L18)/2
 397 01e0 CB01     		.2byte	(.L22-.L18)/2
 398 01e2 CB01     		.2byte	(.L22-.L18)/2
 399 01e4 8A00     		.2byte	(.L270-.L18)/2
 400 01e6 8A00     		.2byte	(.L270-.L18)/2
 401 01e8 8A00     		.2byte	(.L270-.L18)/2
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 14


 402 01ea 8A00     		.2byte	(.L270-.L18)/2
 403 01ec 8A00     		.2byte	(.L270-.L18)/2
 404 01ee 8A00     		.2byte	(.L270-.L18)/2
 405 01f0 9201     		.2byte	(.L20-.L18)/2
 406 01f2 8A00     		.2byte	(.L270-.L18)/2
 407 01f4 9201     		.2byte	(.L20-.L18)/2
 408 01f6 8A00     		.2byte	(.L270-.L18)/2
 409 01f8 8A00     		.2byte	(.L270-.L18)/2
 410 01fa 8A00     		.2byte	(.L270-.L18)/2
 411 01fc 8A00     		.2byte	(.L270-.L18)/2
 412 01fe 8A00     		.2byte	(.L270-.L18)/2
 413 0200 8A00     		.2byte	(.L270-.L18)/2
 414 0202 8A00     		.2byte	(.L270-.L18)/2
 415 0204 7A00     		.2byte	(.L17-.L18)/2
 416 0206 8A00     		.2byte	(.L270-.L18)/2
 417 0208 6D01     		.2byte	(.L237-.L18)/2
 418 020a 8A00     		.2byte	(.L270-.L18)/2
 419 020c 8A00     		.2byte	(.L270-.L18)/2
 420 020e B901     		.2byte	(.L24-.L18)/2
 421 0210 8A00     		.2byte	(.L270-.L18)/2
 422 0212 8A00     		.2byte	(.L270-.L18)/2
 423 0214 8A00     		.2byte	(.L270-.L18)/2
 424 0216 8A00     		.2byte	(.L270-.L18)/2
 425 0218 8A00     		.2byte	(.L270-.L18)/2
 426 021a B901     		.2byte	(.L24-.L18)/2
 427 021c 8A00     		.2byte	(.L270-.L18)/2
 428 021e 8A00     		.2byte	(.L270-.L18)/2
 429 0220 8A00     		.2byte	(.L270-.L18)/2
 430 0222 D401     		.2byte	(.L19-.L18)/2
 431 0224 A601     		.2byte	(.L25-.L18)/2
 432 0226 A601     		.2byte	(.L25-.L18)/2
 433 0228 A601     		.2byte	(.L25-.L18)/2
 434 022a A601     		.2byte	(.L25-.L18)/2
 435 022c A601     		.2byte	(.L25-.L18)/2
 436 022e A601     		.2byte	(.L25-.L18)/2
 437 0230 8A00     		.2byte	(.L270-.L18)/2
 438 0232 8501     		.2byte	(.L26-.L18)/2
 439 0234 8A00     		.2byte	(.L270-.L18)/2
 440 0236 8A00     		.2byte	(.L270-.L18)/2
 441 0238 8A00     		.2byte	(.L270-.L18)/2
 442 023a 8A00     		.2byte	(.L270-.L18)/2
 443 023c 8A00     		.2byte	(.L270-.L18)/2
 444 023e 8A00     		.2byte	(.L270-.L18)/2
 445 0240 8A00     		.2byte	(.L270-.L18)/2
 446 0242 8A00     		.2byte	(.L270-.L18)/2
 447 0244 8A00     		.2byte	(.L270-.L18)/2
 448 0246 8A00     		.2byte	(.L270-.L18)/2
 449 0248 8A00     		.2byte	(.L270-.L18)/2
 450 024a 8A00     		.2byte	(.L270-.L18)/2
 451 024c 8A00     		.2byte	(.L270-.L18)/2
 452 024e 8A00     		.2byte	(.L270-.L18)/2
 453 0250 8A00     		.2byte	(.L270-.L18)/2
 454 0252 8A00     		.2byte	(.L270-.L18)/2
 455 0254 8A00     		.2byte	(.L270-.L18)/2
 456 0256 8A00     		.2byte	(.L270-.L18)/2
 457 0258 8B01     		.2byte	(.L27-.L18)/2
 458 025a 8A00     		.2byte	(.L270-.L18)/2
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 15


 459 025c 8A00     		.2byte	(.L270-.L18)/2
 460 025e 8A00     		.2byte	(.L270-.L18)/2
 461 0260 8A00     		.2byte	(.L270-.L18)/2
 462 0262 8A00     		.2byte	(.L270-.L18)/2
 463 0264 8A00     		.2byte	(.L270-.L18)/2
 464 0266 8A00     		.2byte	(.L270-.L18)/2
 465 0268 8A00     		.2byte	(.L270-.L18)/2
 466 026a 8A00     		.2byte	(.L270-.L18)/2
 467 026c 7301     		.2byte	(.L28-.L18)/2
 468 026e 7301     		.2byte	(.L28-.L18)/2
 469 0270 9201     		.2byte	(.L20-.L18)/2
 470 0272 B001     		.2byte	(.L29-.L18)/2
 471 0274 B001     		.2byte	(.L29-.L18)/2
 472              		.p2align 1
 473              	.L532:
 331:grbl/gcode.c  **** 			{
 332:grbl/gcode.c  **** 			case 0:
 333:grbl/gcode.c  **** 			case 1:
 334:grbl/gcode.c  **** 			case 2:
 335:grbl/gcode.c  **** 			case 30:
 336:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_M4;
 337:grbl/gcode.c  **** 				switch (int_value)
 338:grbl/gcode.c  **** 				{
 339:grbl/gcode.c  **** 				case 0:
 340:grbl/gcode.c  **** 					gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED;
 341:grbl/gcode.c  **** 					break; // Program pause
 342:grbl/gcode.c  **** 				case 1:
 343:grbl/gcode.c  **** 					break; // Optional stop not supported. Ignore.
 344:grbl/gcode.c  **** 				default:
 345:grbl/gcode.c  **** 					gc_block.modal.program_flow = int_value; // Program end and reset
 346:grbl/gcode.c  **** 				}
 347:grbl/gcode.c  **** 				break;
 348:grbl/gcode.c  **** 			case 3:
 349:grbl/gcode.c  **** 			case 4:
 350:grbl/gcode.c  **** 			case 5:
 351:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_M7;
 352:grbl/gcode.c  **** 				switch (int_value)
 353:grbl/gcode.c  **** 				{
 354:grbl/gcode.c  **** 				case 3:
 355:grbl/gcode.c  **** 					gc_block.modal.spindle = SPINDLE_ENABLE_CW;
 356:grbl/gcode.c  **** 					break;
 357:grbl/gcode.c  **** 				case 4:
 358:grbl/gcode.c  **** 					gc_block.modal.spindle = SPINDLE_ENABLE_CCW;
 359:grbl/gcode.c  **** 					break;
 360:grbl/gcode.c  **** 				case 5:
 361:grbl/gcode.c  **** 					gc_block.modal.spindle = SPINDLE_DISABLE;
 362:grbl/gcode.c  **** 					break;
 363:grbl/gcode.c  **** 				}
 364:grbl/gcode.c  **** 				break;
 365:grbl/gcode.c  **** #ifdef ENABLE_M7
 366:grbl/gcode.c  **** 			case 7:
 367:grbl/gcode.c  **** 			case 8:
 368:grbl/gcode.c  **** 			case 9:
 369:grbl/gcode.c  **** #else
 370:grbl/gcode.c  **** 				case 8: case 9:
 371:grbl/gcode.c  **** #endif
 372:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_M8;
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 16


 373:grbl/gcode.c  **** 				switch (int_value)
 374:grbl/gcode.c  **** 				{
 375:grbl/gcode.c  **** #ifdef ENABLE_M7
 376:grbl/gcode.c  **** 				case 7:
 377:grbl/gcode.c  **** 					gc_block.modal.coolant = COOLANT_MIST_ENABLE;
 378:grbl/gcode.c  **** 					break;
 379:grbl/gcode.c  **** #endif
 380:grbl/gcode.c  **** 				case 8:
 381:grbl/gcode.c  **** 					gc_block.modal.coolant = COOLANT_FLOOD_ENABLE;
 382:grbl/gcode.c  **** 					break;
 383:grbl/gcode.c  **** 				case 9:
 384:grbl/gcode.c  **** 					gc_block.modal.coolant = COOLANT_DISABLE;
 385:grbl/gcode.c  **** 					break;
 386:grbl/gcode.c  **** 				}
 387:grbl/gcode.c  **** 				break;
 388:grbl/gcode.c  **** #ifdef ENABLE_PARKING_OVERRIDE_CONTROL
 389:grbl/gcode.c  **** 				case 56:
 390:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_M9;
 391:grbl/gcode.c  **** 				gc_block.modal.override = OVERRIDE_PARKING_MOTION;
 392:grbl/gcode.c  **** 				break;
 393:grbl/gcode.c  **** #endif
 394:grbl/gcode.c  **** #ifdef ENABLE_DIGITAL_OUTPUT
 395:grbl/gcode.c  **** 			case 62:
 396:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_MO;
 397:grbl/gcode.c  **** 				gc_block.modal.digital = DIGITAL_CONTROL_ON;
 398:grbl/gcode.c  **** 				break;
 399:grbl/gcode.c  **** 			case 63:
 400:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_MO;
 401:grbl/gcode.c  **** 				gc_block.modal.digital = DIGITAL_CONTROL_OFF;
 402:grbl/gcode.c  **** 				break;
 403:grbl/gcode.c  **** #endif
 404:grbl/gcode.c  **** #ifdef ENABLE_WAIT_ON_INPUT
 405:grbl/gcode.c  **** 			case 66:
 406:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_MO;
 407:grbl/gcode.c  **** 				gc_block.modal.waitoninput = WAITONINPUT_CONTROL;
 408:grbl/gcode.c  **** 				break;
 409:grbl/gcode.c  **** #endif
 410:grbl/gcode.c  **** #ifdef ENABLE_ANALOG_OUTPUT
 411:grbl/gcode.c  **** 			case 67:
 412:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_MO;
 413:grbl/gcode.c  **** 				gc_block.modal.analog = ANALOG_CONTROL;
 414:grbl/gcode.c  **** 				break;
 415:grbl/gcode.c  **** #endif
 416:grbl/gcode.c  **** #ifdef ENABLE_ACCEL_SCALING
 417:grbl/gcode.c  **** 			case 100:
 418:grbl/gcode.c  **** 				word_bit = MODAL_GROUP_MO;
 419:grbl/gcode.c  **** 				gc_block.modal.accel_scaling = ACCEL_SCALING;
 420:grbl/gcode.c  **** 				break;
 421:grbl/gcode.c  **** #endif
 422:grbl/gcode.c  **** 
 423:grbl/gcode.c  **** 			default:
 424:grbl/gcode.c  **** 				FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND)
 425:grbl/gcode.c  **** 				; // [Unsupported M command]
 426:grbl/gcode.c  **** 			}
 427:grbl/gcode.c  **** 
 428:grbl/gcode.c  **** 			// Check for more than one command per modal group violations in the current block
 429:grbl/gcode.c  **** 			// NOTE: Variable 'word_bit' is always assigned, if the command is valid.
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 17


 430:grbl/gcode.c  **** 			if (bit_istrue(command_words, bit(word_bit)))
 431:grbl/gcode.c  **** 			{
 432:grbl/gcode.c  **** 				FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION);
 433:grbl/gcode.c  **** 			}
 434:grbl/gcode.c  **** 			command_words |= bit(word_bit);
 435:grbl/gcode.c  **** 			break;
 436:grbl/gcode.c  **** 
 437:grbl/gcode.c  **** 			// NOTE: All remaining letters assign values.
 438:grbl/gcode.c  **** 		default:
 439:grbl/gcode.c  **** 
 440:grbl/gcode.c  **** 			/* Non-Command Words: This initial parsing phase only checks for repeats of the remaining
 441:grbl/gcode.c  **** 			 legal g-code words and stores their value. Error-checking is performed later since some
 442:grbl/gcode.c  **** 			 words (I,J,K,L,P,R) have multiple connotations and/or depend on the issued commands. */
 443:grbl/gcode.c  **** 			switch (letter)
 474              		.loc 1 443 0
 475 0276 453C     		subs	r4, r4, #69
 476              	.LVL26:
 477 0278 152C     		cmp	r4, #21
 478 027a 27D8     		bhi	.L270
 479 027c DFE814F0 		tbh	[pc, r4, lsl #1]
 480              	.L61:
 481 0280 F201     		.2byte	(.L60-.L61)/2
 482 0282 FB01     		.2byte	(.L62-.L61)/2
 483 0284 2600     		.2byte	(.L270-.L61)/2
 484 0286 2600     		.2byte	(.L270-.L61)/2
 485 0288 0302     		.2byte	(.L63-.L61)/2
 486 028a 0F02     		.2byte	(.L64-.L61)/2
 487 028c 1B02     		.2byte	(.L65-.L61)/2
 488 028e 2702     		.2byte	(.L66-.L61)/2
 489 0290 2600     		.2byte	(.L270-.L61)/2
 490 0292 A801     		.2byte	(.L67-.L61)/2
 491 0294 2600     		.2byte	(.L270-.L61)/2
 492 0296 B901     		.2byte	(.L68-.L61)/2
 493 0298 C101     		.2byte	(.L69-.L61)/2
 494 029a CA01     		.2byte	(.L70-.L61)/2
 495 029c D201     		.2byte	(.L71-.L61)/2
 496 029e E201     		.2byte	(.L72-.L61)/2
 497 02a0 2600     		.2byte	(.L270-.L61)/2
 498 02a2 2600     		.2byte	(.L270-.L61)/2
 499 02a4 2600     		.2byte	(.L270-.L61)/2
 500 02a6 9B01     		.2byte	(.L73-.L61)/2
 501 02a8 8E01     		.2byte	(.L74-.L61)/2
 502 02aa 7F01     		.2byte	(.L75-.L61)/2
 503              	.LVL27:
 504              		.p2align 1
 505              	.L17:
 203:grbl/gcode.c  **** 				{
 506              		.loc 1 203 0
 507 02ac 079B     		ldr	r3, [sp, #28]
 508 02ae 002B     		cmp	r3, #0
 509 02b0 40F0E183 		bne	.L242
 510              	.LVL28:
 212:grbl/gcode.c  **** 				{
 511              		.loc 1 212 0
 512 02b4 BAF1260F 		cmp	r10, #38
 211:grbl/gcode.c  **** 				if (int_value == 38)
 513              		.loc 1 211 0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 18


 514 02b8 86F801A0 		strb	r10, [r6, #1]
 212:grbl/gcode.c  **** 				{
 515              		.loc 1 212 0
 516 02bc 40F08582 		bne	.L241
 214:grbl/gcode.c  **** 							|| (mantissa == 50)))
 517              		.loc 1 214 0
 518 02c0 A0F11403 		sub	r3, r0, #20
 519 02c4 9BB2     		uxth	r3, r3
 520 02c6 1E2B     		cmp	r3, #30
 521 02c8 40F20882 		bls	.L533
 522              	.LVL29:
 523              	.L270:
 444:grbl/gcode.c  **** 			{
 445:grbl/gcode.c  **** #if ( defined(STM32F1_4) || defined(STM32F4_4) )
 446:grbl/gcode.c  **** 			case 'A':
 447:grbl/gcode.c  **** 			word_bit = WORD_A;
 448:grbl/gcode.c  **** 			gc_block.values.xyz[A_AXIS] = value;
 449:grbl/gcode.c  **** 			axis_words |= (1 << A_AXIS);
 450:grbl/gcode.c  **** 			break;
 451:grbl/gcode.c  **** #endif
 452:grbl/gcode.c  **** #if ( defined(STM32F1_5) || defined(STM32F4_5) )
 453:grbl/gcode.c  **** 			case 'A':
 454:grbl/gcode.c  **** 			word_bit = WORD_A;
 455:grbl/gcode.c  **** 			gc_block.values.xyz[A_AXIS] = value;
 456:grbl/gcode.c  **** 			axis_words |= (1 << A_AXIS);
 457:grbl/gcode.c  **** 			break;
 458:grbl/gcode.c  **** 			case 'B':
 459:grbl/gcode.c  **** 			word_bit = WORD_B;
 460:grbl/gcode.c  **** 			gc_block.values.xyz[B_AXIS] = value;
 461:grbl/gcode.c  **** 			axis_words |= (1 << B_AXIS);
 462:grbl/gcode.c  **** 			break;
 463:grbl/gcode.c  **** #endif
 464:grbl/gcode.c  **** #if ( defined(STM32F1_6) || defined(STM32F4_6) )
 465:grbl/gcode.c  **** 			case 'A':
 466:grbl/gcode.c  **** 				word_bit = WORD_A;
 467:grbl/gcode.c  **** 				gc_block.values.xyz[A_AXIS] = value;
 468:grbl/gcode.c  **** 				axis_words |= (1 << A_AXIS);
 469:grbl/gcode.c  **** 				break;
 470:grbl/gcode.c  **** 			case 'B':
 471:grbl/gcode.c  **** 				word_bit = WORD_B;
 472:grbl/gcode.c  **** 				gc_block.values.xyz[B_AXIS] = value;
 473:grbl/gcode.c  **** 				axis_words |= (1 << B_AXIS);
 474:grbl/gcode.c  **** 				break;
 475:grbl/gcode.c  **** 			case 'C':
 476:grbl/gcode.c  **** 				word_bit = WORD_C;
 477:grbl/gcode.c  **** 				gc_block.values.xyz[C_AXIS] = value;
 478:grbl/gcode.c  **** 				axis_words |= (1 << C_AXIS);
 479:grbl/gcode.c  **** 				break;
 480:grbl/gcode.c  **** #endif
 481:grbl/gcode.c  **** 				// case 'D': // Not supported
 482:grbl/gcode.c  **** 
 483:grbl/gcode.c  **** 			case 'E':
 484:grbl/gcode.c  **** 				word_bit = WORD_E;
 485:grbl/gcode.c  **** 				gc_block.values.e = int_value;
 486:grbl/gcode.c  **** 				break;
 487:grbl/gcode.c  **** 			case 'F':
 488:grbl/gcode.c  **** 				word_bit = WORD_F;
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 19


 489:grbl/gcode.c  **** 				gc_block.values.f = value;
 490:grbl/gcode.c  **** 				break;
 491:grbl/gcode.c  **** 				// case 'H': // Not supported
 492:grbl/gcode.c  **** 			case 'I':
 493:grbl/gcode.c  **** 				word_bit = WORD_I;
 494:grbl/gcode.c  **** 				gc_block.values.ijk[X_AXIS] = value;
 495:grbl/gcode.c  **** 				ijk_words |= (1 << X_AXIS);
 496:grbl/gcode.c  **** 				break;
 497:grbl/gcode.c  **** 			case 'J':
 498:grbl/gcode.c  **** 				word_bit = WORD_J;
 499:grbl/gcode.c  **** 				gc_block.values.ijk[Y_AXIS] = value;
 500:grbl/gcode.c  **** 				ijk_words |= (1 << Y_AXIS);
 501:grbl/gcode.c  **** 				break;
 502:grbl/gcode.c  **** 			case 'K':
 503:grbl/gcode.c  **** 				word_bit = WORD_K;
 504:grbl/gcode.c  **** 				gc_block.values.ijk[Z_AXIS] = value;
 505:grbl/gcode.c  **** 				ijk_words |= (1 << Z_AXIS);
 506:grbl/gcode.c  **** 				break;
 507:grbl/gcode.c  **** 			case 'L':
 508:grbl/gcode.c  **** 				word_bit = WORD_L;
 509:grbl/gcode.c  **** 				gc_block.values.l = int_value;
 510:grbl/gcode.c  **** 				break;
 511:grbl/gcode.c  **** 			case 'N':
 512:grbl/gcode.c  **** 				word_bit = WORD_N;
 513:grbl/gcode.c  **** 				gc_block.values.n = trunc(value);
 514:grbl/gcode.c  **** 				break;
 515:grbl/gcode.c  **** 			case 'P':
 516:grbl/gcode.c  **** 				word_bit = WORD_P;
 517:grbl/gcode.c  **** 				gc_block.values.p = value;
 518:grbl/gcode.c  **** 				break;
 519:grbl/gcode.c  **** 				// NOTE:
 520:grbl/gcode.c  **** 				//  for digital controls M62,M63, P value is an integer
 521:grbl/gcode.c  **** 			case 'Q':
 522:grbl/gcode.c  **** 				word_bit = WORD_Q;
 523:grbl/gcode.c  **** 				gc_block.values.q = value;
 524:grbl/gcode.c  **** 				break;
 525:grbl/gcode.c  **** 			case 'R':
 526:grbl/gcode.c  **** 				word_bit = WORD_R;
 527:grbl/gcode.c  **** 				gc_block.values.r = value;
 528:grbl/gcode.c  **** 				break;
 529:grbl/gcode.c  **** 			case 'S':
 530:grbl/gcode.c  **** 				word_bit = WORD_S;
 531:grbl/gcode.c  **** 				gc_block.values.s = value;
 532:grbl/gcode.c  **** 				break;
 533:grbl/gcode.c  **** 			case 'T':
 534:grbl/gcode.c  **** 				word_bit = WORD_T;
 535:grbl/gcode.c  **** 				if (value > MAX_TOOL_NUMBER)
 536:grbl/gcode.c  **** 				{
 537:grbl/gcode.c  **** 					FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED);
 538:grbl/gcode.c  **** 				}
 539:grbl/gcode.c  **** 				gc_block.values.t = int_value;
 540:grbl/gcode.c  **** 				break;
 541:grbl/gcode.c  **** 			case 'X':
 542:grbl/gcode.c  **** 				word_bit = WORD_X;
 543:grbl/gcode.c  **** 				gc_block.values.xyz[X_AXIS] = value;
 544:grbl/gcode.c  **** 				axis_words |= (1 << X_AXIS);
 545:grbl/gcode.c  **** 				break;
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 20


 546:grbl/gcode.c  **** 			case 'Y':
 547:grbl/gcode.c  **** 				word_bit = WORD_Y;
 548:grbl/gcode.c  **** 				gc_block.values.xyz[Y_AXIS] = value;
 549:grbl/gcode.c  **** 				axis_words |= (1 << Y_AXIS);
 550:grbl/gcode.c  **** 				break;
 551:grbl/gcode.c  **** 			case 'Z':
 552:grbl/gcode.c  **** 				word_bit = WORD_Z;
 553:grbl/gcode.c  **** 				gc_block.values.xyz[Z_AXIS] = value;
 554:grbl/gcode.c  **** 				axis_words |= (1 << Z_AXIS);
 555:grbl/gcode.c  **** 				break;
 556:grbl/gcode.c  **** 			default:
 557:grbl/gcode.c  **** 				FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND)
 558:grbl/gcode.c  **** 				;
 559:grbl/gcode.c  **** 			}
 560:grbl/gcode.c  **** 
 561:grbl/gcode.c  **** 			// NOTE: Variable 'word_bit' is always assigned, if the non-command letter is valid.
 562:grbl/gcode.c  **** 			if (bit_istrue(value_words, bit(word_bit)))
 563:grbl/gcode.c  **** 			{
 564:grbl/gcode.c  **** 				FAIL(STATUS_GCODE_WORD_REPEATED);
 565:grbl/gcode.c  **** 			} // [Word repeated]
 566:grbl/gcode.c  **** 			// Check for invalid negative values for words F, N, P, T, and S.
 567:grbl/gcode.c  **** 			// NOTE: Negative value check is done here simply for code-efficiency.
 568:grbl/gcode.c  **** 			if ( bit(word_bit)
 569:grbl/gcode.c  **** 					& (bit(WORD_F) | bit(WORD_N) | bit(WORD_P) | bit(WORD_T) | bit(WORD_S)))
 570:grbl/gcode.c  **** 			{
 571:grbl/gcode.c  **** 				if (value < 0.0)
 572:grbl/gcode.c  **** 				{
 573:grbl/gcode.c  **** 					FAIL(STATUS_NEGATIVE_VALUE);
 574:grbl/gcode.c  **** 				} // [Word value cannot be negative]
 575:grbl/gcode.c  **** 			}
 576:grbl/gcode.c  **** 			value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 577:grbl/gcode.c  **** 
 578:grbl/gcode.c  **** 		}
 579:grbl/gcode.c  **** 	}
 580:grbl/gcode.c  **** 	// Parsing complete!
 581:grbl/gcode.c  **** 
 582:grbl/gcode.c  **** 	/* -------------------------------------------------------------------------------------
 583:grbl/gcode.c  **** 	 STEP 3: Error-check all commands and values passed in this block. This step ensures all of
 584:grbl/gcode.c  **** 	 the commands are valid for execution and follows the NIST standard as closely as possible.
 585:grbl/gcode.c  **** 	 If an error is found, all commands and values in this block are dumped and will not update
 586:grbl/gcode.c  **** 	 the active system g-code modes. If the block is ok, the active system g-code modes will be
 587:grbl/gcode.c  **** 	 updated based on the commands of this block, and signal for it to be executed.
 588:grbl/gcode.c  **** 
 589:grbl/gcode.c  **** 	 Also, we have to pre-convert all of the values passed based on the modes set by the parsed
 590:grbl/gcode.c  **** 	 block. There are a number of error-checks that require target information that can only be
 591:grbl/gcode.c  **** 	 accurately calculated if we convert these values in conjunction with the error-checking.
 592:grbl/gcode.c  **** 	 This relegates the next execution step as only updating the system g-code modes and
 593:grbl/gcode.c  **** 	 performing the programmed actions in order. The execution step should not require any
 594:grbl/gcode.c  **** 	 conversion calculations and would only require minimal checks necessary to execute.
 595:grbl/gcode.c  **** 	 */
 596:grbl/gcode.c  **** 
 597:grbl/gcode.c  **** 	/* NOTE: At this point, the g-code block has been parsed and the block line can be freed.
 598:grbl/gcode.c  **** 	 NOTE: It's also possible, at some future point, to break up STEP 2, to allow piece-wise
 599:grbl/gcode.c  **** 	 parsing of the block on a per-word basis, rather than the entire block. This could remove
 600:grbl/gcode.c  **** 	 the need for maintaining a large string variable for the entire block and free up some memory.
 601:grbl/gcode.c  **** 	 To do this, this would simply need to retain all of the data in STEP 1, such as the new block
 602:grbl/gcode.c  **** 	 data struct, the modal group and value bitflag tracking variables, and axis array indices
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 21


 603:grbl/gcode.c  **** 	 compatible variables. This data contains all of the information necessary to error-check the
 604:grbl/gcode.c  **** 	 new g-code block when the EOL character is received. However, this would break Grbl's startup
 605:grbl/gcode.c  **** 	 lines in how it currently works and would require some refactoring to make it compatible.
 606:grbl/gcode.c  **** 	 */
 607:grbl/gcode.c  **** 
 608:grbl/gcode.c  **** 	// [0. Non-specific/common error-checks and miscellaneous setup]:
 609:grbl/gcode.c  **** 	// Determine implicit axis command conditions. Axis words have been passed, but no explicit axis
 610:grbl/gcode.c  **** 	// command has been sent. If so, set axis command to current motion mode.
 611:grbl/gcode.c  **** 	if (axis_words)
 612:grbl/gcode.c  **** 	{
 613:grbl/gcode.c  **** 		if (!axis_command)
 614:grbl/gcode.c  **** 		{
 615:grbl/gcode.c  **** 			axis_command = AXIS_COMMAND_MOTION_MODE;
 616:grbl/gcode.c  **** 		} // Assign implicit motion-mode
 617:grbl/gcode.c  **** 	}
 618:grbl/gcode.c  **** 
 619:grbl/gcode.c  **** 	// Check for valid line number N value.
 620:grbl/gcode.c  **** 	if (bit_istrue(value_words, bit(WORD_N)))
 621:grbl/gcode.c  **** 	{
 622:grbl/gcode.c  **** 		// Line number value cannot be less than zero (done) or greater than max line number.
 623:grbl/gcode.c  **** 		if (gc_block.values.n > MAX_LINE_NUMBER)
 624:grbl/gcode.c  **** 		{
 625:grbl/gcode.c  **** 			FAIL(STATUS_GCODE_INVALID_LINE_NUMBER);
 626:grbl/gcode.c  **** 		} // [Exceeds max line number]
 627:grbl/gcode.c  **** 	}
 628:grbl/gcode.c  **** 	// bit_false(value_words,bit(WORD_N)); // NOTE: Single-meaning value word. Set at end of error-che
 629:grbl/gcode.c  **** 
 630:grbl/gcode.c  **** 	// Track for unused words at the end of error-checking.
 631:grbl/gcode.c  **** 	// NOTE: Single-meaning value words are removed all at once at the end of error-checking, because
 632:grbl/gcode.c  **** 	// they are always used when present. This was done to save a few bytes of flash. For clarity, the
 633:grbl/gcode.c  **** 	// single-meaning value words may be removed as they are used. Also, axis words are treated in the
 634:grbl/gcode.c  **** 	// same way. If there is an explicit/implicit axis command, XYZ words are always used and are
 635:grbl/gcode.c  **** 	// are removed at the end of error-checking.
 636:grbl/gcode.c  **** 
 637:grbl/gcode.c  **** 	// [1. Comments ]: MSG's NOT SUPPORTED. Comment handling performed by protocol.
 638:grbl/gcode.c  **** 
 639:grbl/gcode.c  **** 	// [2. Set feed rate mode ]: G93 F word missing with G1,G2/3 active, implicitly or explicitly. Fee
 640:grbl/gcode.c  **** 	//   is not defined after switching to G94 from G93.
 641:grbl/gcode.c  **** 	// NOTE: For jogging, ignore prior feed rate mode. Enforce G94 and check for required F word.
 642:grbl/gcode.c  **** 	if (gc_parser_flags & GC_PARSER_JOG_MOTION)
 643:grbl/gcode.c  **** 	{
 644:grbl/gcode.c  **** 		if (bit_isfalse(value_words, bit(WORD_F)))
 645:grbl/gcode.c  **** 		{
 646:grbl/gcode.c  **** 			FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE);
 647:grbl/gcode.c  **** 		}
 648:grbl/gcode.c  **** 		if (gc_block.modal.units == UNITS_MODE_INCHES)
 649:grbl/gcode.c  **** 		{
 650:grbl/gcode.c  **** 			gc_block.values.f *= MM_PER_INCH;
 651:grbl/gcode.c  **** 		}
 652:grbl/gcode.c  **** 	}
 653:grbl/gcode.c  **** 	else
 654:grbl/gcode.c  **** 	{
 655:grbl/gcode.c  **** 		if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME)
 656:grbl/gcode.c  **** 		{ // = G93
 657:grbl/gcode.c  **** 			// NOTE: G38 can also operate in inverse time, but is undefined as an error. Missing F word chec
 658:grbl/gcode.c  **** 			if (axis_command == AXIS_COMMAND_MOTION_MODE)
 659:grbl/gcode.c  **** 			{
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 22


 660:grbl/gcode.c  **** 				if ((gc_block.modal.motion != MOTION_MODE_NONE)
 661:grbl/gcode.c  **** 						&& (gc_block.modal.motion != MOTION_MODE_SEEK))
 662:grbl/gcode.c  **** 				{
 663:grbl/gcode.c  **** 					if (bit_isfalse(value_words, bit(WORD_F)))
 664:grbl/gcode.c  **** 					{
 665:grbl/gcode.c  **** 						FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE);
 666:grbl/gcode.c  **** 					} // [F word missing]
 667:grbl/gcode.c  **** 				}
 668:grbl/gcode.c  **** 			}
 669:grbl/gcode.c  **** 			// NOTE: It seems redundant to check for an F word to be passed after switching from G94 to G93.
 670:grbl/gcode.c  **** 			// accomplish the exact same thing if the feed rate value is always reset to zero and undefined 
 671:grbl/gcode.c  **** 			// inverse time block, since the commands that use this value already perform undefined checks. 
 672:grbl/gcode.c  **** 			// also allow other commands, following this switch, to execute and not error out needlessly. Th
 673:grbl/gcode.c  **** 			// combined with the above feed rate mode and the below set feed rate error-checking.
 674:grbl/gcode.c  **** 
 675:grbl/gcode.c  **** 			// [3. Set feed rate ]: F is negative (done.)
 676:grbl/gcode.c  **** 			// - In inverse time mode: Always implicitly zero the feed rate value before and after block com
 677:grbl/gcode.c  **** 			// NOTE: If in G93 mode or switched into it from G94, just keep F value as initialized zero or p
 678:grbl/gcode.c  **** 			// value in the block. If no F word is passed with a motion command that requires a feed rate, t
 679:grbl/gcode.c  **** 			// out in the motion modes error-checking. However, if no F word is passed with NO motion comman
 680:grbl/gcode.c  **** 			// a feed rate, we simply move on and the state feed rate value gets updated to zero and remains
 681:grbl/gcode.c  **** 		}
 682:grbl/gcode.c  **** 		else
 683:grbl/gcode.c  **** 		{ // = G94
 684:grbl/gcode.c  **** 			// - In units per mm mode: If F word passed, ensure value is in mm/min, otherwise push last stat
 685:grbl/gcode.c  **** 			if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN)
 686:grbl/gcode.c  **** 			{ // Last state is also G94
 687:grbl/gcode.c  **** 				if (bit_istrue(value_words, bit(WORD_F)))
 688:grbl/gcode.c  **** 				{
 689:grbl/gcode.c  **** 					if (gc_block.modal.units == UNITS_MODE_INCHES)
 690:grbl/gcode.c  **** 					{
 691:grbl/gcode.c  **** 						gc_block.values.f *= MM_PER_INCH;
 692:grbl/gcode.c  **** 					}
 693:grbl/gcode.c  **** 				}
 694:grbl/gcode.c  **** 				else
 695:grbl/gcode.c  **** 				{
 696:grbl/gcode.c  **** 					gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 697:grbl/gcode.c  **** 				}
 698:grbl/gcode.c  **** 			} // Else, switching to G94 from G93, so don't push last state feed rate. Its undefined or the p
 699:grbl/gcode.c  **** 		}
 700:grbl/gcode.c  **** 	}
 701:grbl/gcode.c  **** 	// bit_false(value_words,bit(WORD_F)); // NOTE: Single-meaning value word. Set at end of error-che
 702:grbl/gcode.c  **** 
 703:grbl/gcode.c  **** 	// [4. Set spindle speed ]: S is negative (done.)
 704:grbl/gcode.c  **** 	if (bit_isfalse(value_words, bit(WORD_S)))
 705:grbl/gcode.c  **** 	{
 706:grbl/gcode.c  **** 		gc_block.values.s = gc_state.spindle_speed;
 707:grbl/gcode.c  **** 	}
 708:grbl/gcode.c  **** 	// bit_false(value_words,bit(WORD_S)); // NOTE: Single-meaning value word. Set at end of error-che
 709:grbl/gcode.c  **** 
 710:grbl/gcode.c  **** 	// [5. Select tool ]: NOT SUPPORTED. Only tracks value. T is negative (done.) Not an integer. Grea
 711:grbl/gcode.c  **** 	// bit_false(value_words,bit(WORD_T)); // NOTE: Single-meaning value word. Set at end of error-che
 712:grbl/gcode.c  **** 
 713:grbl/gcode.c  **** 	// [6. Change tool ]: N/A
 714:grbl/gcode.c  **** 	// [7. Spindle control ]: N/A
 715:grbl/gcode.c  **** 	// [8. Coolant control ]: N/A
 716:grbl/gcode.c  **** 	// [9. Override control ]: Not supported except for a Grbl-only parking motion override control.
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 23


 717:grbl/gcode.c  **** #ifdef ENABLE_PARKING_OVERRIDE_CONTROL
 718:grbl/gcode.c  **** 	if (bit_istrue(command_words,bit(MODAL_GROUP_M9)))
 719:grbl/gcode.c  **** 	{ // Already set as enabled in parser.
 720:grbl/gcode.c  **** 		if (bit_istrue(value_words,bit(WORD_P)))
 721:grbl/gcode.c  **** 		{
 722:grbl/gcode.c  **** 			if (gc_block.values.p == 0.0)
 723:grbl/gcode.c  **** 			{	gc_block.modal.override = OVERRIDE_DISABLED;}
 724:grbl/gcode.c  **** 			bit_false(value_words,bit(WORD_P));
 725:grbl/gcode.c  **** 		}
 726:grbl/gcode.c  **** 	}
 727:grbl/gcode.c  **** #endif
 728:grbl/gcode.c  **** 
 729:grbl/gcode.c  **** 	// [10. Dwell ]: P value missing. P is negative (done.) NOTE: See below.
 730:grbl/gcode.c  **** 	if (gc_block.non_modal_command == NON_MODAL_DWELL)
 731:grbl/gcode.c  **** 	{
 732:grbl/gcode.c  **** 		if (bit_isfalse(value_words, bit(WORD_P)))
 733:grbl/gcode.c  **** 		{
 734:grbl/gcode.c  **** 			FAIL(STATUS_GCODE_VALUE_WORD_MISSING);
 735:grbl/gcode.c  **** 		} // [P word missing]
 736:grbl/gcode.c  **** 		bit_false(value_words, bit(WORD_P));
 737:grbl/gcode.c  **** 	}
 738:grbl/gcode.c  **** 
 739:grbl/gcode.c  **** 	// [11. Set active plane ]: N/A
 740:grbl/gcode.c  **** 	switch (gc_block.modal.plane_select)
 741:grbl/gcode.c  **** 	{
 742:grbl/gcode.c  **** 	case PLANE_SELECT_XY:
 743:grbl/gcode.c  **** 		axis_0 = X_AXIS;
 744:grbl/gcode.c  **** 		axis_1 = Y_AXIS;
 745:grbl/gcode.c  **** 		axis_linear = Z_AXIS;
 746:grbl/gcode.c  **** 		break;
 747:grbl/gcode.c  **** 	case PLANE_SELECT_ZX:
 748:grbl/gcode.c  **** 		axis_0 = Z_AXIS;
 749:grbl/gcode.c  **** 		axis_1 = X_AXIS;
 750:grbl/gcode.c  **** 		axis_linear = Y_AXIS;
 751:grbl/gcode.c  **** 		break;
 752:grbl/gcode.c  **** 	default: // case PLANE_SELECT_YZ:
 753:grbl/gcode.c  **** 		axis_0 = Y_AXIS;
 754:grbl/gcode.c  **** 		axis_1 = Z_AXIS;
 755:grbl/gcode.c  **** 		axis_linear = X_AXIS;
 756:grbl/gcode.c  **** 	}
 757:grbl/gcode.c  **** 
 758:grbl/gcode.c  **** 	// [12. Set length units ]: N/A
 759:grbl/gcode.c  **** 	// Pre-convert XYZ coordinate values to millimeters, if applicable.
 760:grbl/gcode.c  **** 	uint8_t idx;
 761:grbl/gcode.c  **** 	if (gc_block.modal.units == UNITS_MODE_INCHES)
 762:grbl/gcode.c  **** 	{
 763:grbl/gcode.c  **** 		for (idx = 0; idx < N_AXIS; idx++)
 764:grbl/gcode.c  **** 		{ // Axes indices are consistent, so loop may be used.
 765:grbl/gcode.c  **** 			if (bit_istrue(axis_words, bit(idx)))
 766:grbl/gcode.c  **** 			{
 767:grbl/gcode.c  **** 				gc_block.values.xyz[idx] *= MM_PER_INCH;
 768:grbl/gcode.c  **** 			}
 769:grbl/gcode.c  **** 		}
 770:grbl/gcode.c  **** 	}
 771:grbl/gcode.c  **** 
 772:grbl/gcode.c  **** 	// [13. Cutter radius compensation ]: G41/42 NOT SUPPORTED. Error, if enabled while G53 is active.
 773:grbl/gcode.c  **** 	// [G40 Errors]: G2/3 arc is programmed after a G40. The linear move after disabling is less than 
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 24


 774:grbl/gcode.c  **** 	//   NOTE: Since cutter radius compensation is never enabled, these G40 errors don't apply. Grbl s
 775:grbl/gcode.c  **** 	//   only for the purpose to not error when G40 is sent with a g-code program header to setup the 
 776:grbl/gcode.c  **** 
 777:grbl/gcode.c  **** 	// [14. Cutter length compensation ]: G43 NOT SUPPORTED, but G43.1 and G49 are.
 778:grbl/gcode.c  **** 	// [G43.1 Errors]: Motion command in same line.
 779:grbl/gcode.c  **** 	//   NOTE: Although not explicitly stated so, G43.1 should be applied to only one valid
 780:grbl/gcode.c  **** 	//   axis that is configured (in config.h). There should be an error if the configured axis
 781:grbl/gcode.c  **** 	//   is absent or if any of the other axis words are present.
 782:grbl/gcode.c  **** 	if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET)
 783:grbl/gcode.c  **** 	{ // Indicates called in block.
 784:grbl/gcode.c  **** 		if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC)
 785:grbl/gcode.c  **** 		{
 786:grbl/gcode.c  **** 			if (axis_words ^ (1 << TOOL_LENGTH_OFFSET_AXIS))
 787:grbl/gcode.c  **** 			{
 788:grbl/gcode.c  **** 				FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR);
 789:grbl/gcode.c  **** 			}
 790:grbl/gcode.c  **** 		}
 791:grbl/gcode.c  **** 	}
 792:grbl/gcode.c  **** 
 793:grbl/gcode.c  **** 	// [15. Coordinate system selection ]: *N/A. Error, if cutter radius comp is active.
 794:grbl/gcode.c  **** 	// TODO: An EEPROM read of the coordinate data may require a buffer sync when the cycle
 795:grbl/gcode.c  **** 	// is active. The read pauses the processor temporarily and may cause a rare crash. For
 796:grbl/gcode.c  **** 	// future versions on processors with enough memory, all coordinate data should be stored
 797:grbl/gcode.c  **** 	// in memory and written to EEPROM only when there is not a cycle active.
 798:grbl/gcode.c  **** 	float block_coord_system[N_AXIS];
 799:grbl/gcode.c  **** 	memcpy(block_coord_system, gc_state.coord_system,
 800:grbl/gcode.c  **** 			sizeof(gc_state.coord_system));
 801:grbl/gcode.c  **** 	if (bit_istrue(command_words, bit(MODAL_GROUP_G12)))
 802:grbl/gcode.c  **** 	{ // Check if called in block
 803:grbl/gcode.c  **** 		if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM)
 804:grbl/gcode.c  **** 		{
 805:grbl/gcode.c  **** 			FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS);
 806:grbl/gcode.c  **** 		} // [Greater than N sys]
 807:grbl/gcode.c  **** 		if (gc_state.modal.coord_select != gc_block.modal.coord_select)
 808:grbl/gcode.c  **** 		{
 809:grbl/gcode.c  **** 			if (!(settings_read_coord_data(gc_block.modal.coord_select,
 810:grbl/gcode.c  **** 					block_coord_system)))
 811:grbl/gcode.c  **** 			{
 812:grbl/gcode.c  **** 				FAIL(STATUS_SETTING_READ_FAIL);
 813:grbl/gcode.c  **** 			}
 814:grbl/gcode.c  **** 		}
 815:grbl/gcode.c  **** 	}
 816:grbl/gcode.c  **** 
 817:grbl/gcode.c  **** 	// [16. Set path control mode ]: N/A. Only G61. G61.1 and G64 NOT SUPPORTED.
 818:grbl/gcode.c  **** 	// [17. Set distance mode ]: N/A. Only G91.1. G90.1 NOT SUPPORTED.
 819:grbl/gcode.c  **** 	// [18. Set retract mode ]: NOT SUPPORTED.
 820:grbl/gcode.c  **** 
 821:grbl/gcode.c  **** 	// [19. Remaining non-modal actions ]: Check go to predefined position, set G10, or set axis offse
 822:grbl/gcode.c  **** 	// NOTE: We need to separate the non-modal commands that are axis word-using (G10/G28/G30/G92), as
 823:grbl/gcode.c  **** 	// commands all treat axis words differently. G10 as absolute offsets or computes current position
 824:grbl/gcode.c  **** 	// the axis value, G92 similarly to G10 L20, and G28/30 as an intermediate target position that ob
 825:grbl/gcode.c  **** 	// all the current coordinate system and G92 offsets.
 826:grbl/gcode.c  **** 	switch (gc_block.non_modal_command)
 827:grbl/gcode.c  **** 	{
 828:grbl/gcode.c  **** 	case NON_MODAL_SET_COORDINATE_DATA:
 829:grbl/gcode.c  **** 		// [G10 Errors]: L missing and is not 2 or 20. P word missing. (Negative P value done.)
 830:grbl/gcode.c  **** 		// [G10 L2 Errors]: R word NOT SUPPORTED. P value not 0 to nCoordSys(max 9). Axis words missing.
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 25


 831:grbl/gcode.c  **** 		// [G10 L20 Errors]: P must be 0 to nCoordSys(max 9). Axis words missing.
 832:grbl/gcode.c  **** 		if (!axis_words)
 833:grbl/gcode.c  **** 		{
 834:grbl/gcode.c  **** 			FAIL(STATUS_GCODE_NO_AXIS_WORDS)
 835:grbl/gcode.c  **** 		}
 836:grbl/gcode.c  **** 		; // [No axis words]
 837:grbl/gcode.c  **** 		if (bit_isfalse(value_words, ((1<<WORD_P)|(1<<WORD_L))))
 838:grbl/gcode.c  **** 		{
 839:grbl/gcode.c  **** 			FAIL(STATUS_GCODE_VALUE_WORD_MISSING);
 840:grbl/gcode.c  **** 		} // [P/L word missing]
 841:grbl/gcode.c  **** 		coord_select = trunc(gc_block.values.p); // Convert p value to int.
 842:grbl/gcode.c  **** 		if (coord_select > N_COORDINATE_SYSTEM)
 843:grbl/gcode.c  **** 		{
 844:grbl/gcode.c  **** 			FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS);
 845:grbl/gcode.c  **** 		} // [Greater than N sys]
 846:grbl/gcode.c  **** 		if (gc_block.values.l != 20)
 847:grbl/gcode.c  **** 		{
 848:grbl/gcode.c  **** 			if (gc_block.values.l == 2)
 849:grbl/gcode.c  **** 			{
 850:grbl/gcode.c  **** 				if (bit_istrue(value_words, bit(WORD_R)))
 851:grbl/gcode.c  **** 				{
 852:grbl/gcode.c  **** 					FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 853:grbl/gcode.c  **** 				} // [G10 L2 R not supported]
 854:grbl/gcode.c  **** 			}
 855:grbl/gcode.c  **** 			else
 856:grbl/gcode.c  **** 			{
 857:grbl/gcode.c  **** 				FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 524              		.loc 1 857 0
 525 02cc 1423     		movs	r3, #20
 526              	.LVL30:
 527              	.L298:
 858:grbl/gcode.c  **** 			} // [Unsupported L]
 859:grbl/gcode.c  **** 		}
 860:grbl/gcode.c  **** 		bit_false(value_words, (bit(WORD_L)|bit(WORD_P)));
 861:grbl/gcode.c  **** 
 862:grbl/gcode.c  **** 		// Determine coordinate system to change and try to load from EEPROM.
 863:grbl/gcode.c  **** 		if (coord_select > 0)
 864:grbl/gcode.c  **** 		{
 865:grbl/gcode.c  **** 			coord_select--;
 866:grbl/gcode.c  **** 		} // Adjust P1-P6 index to EEPROM coordinate data indexing.
 867:grbl/gcode.c  **** 		else
 868:grbl/gcode.c  **** 		{
 869:grbl/gcode.c  **** 			coord_select = gc_block.modal.coord_select;
 870:grbl/gcode.c  **** 		} // Index P0 as the active coordinate system
 871:grbl/gcode.c  **** 
 872:grbl/gcode.c  **** 		// NOTE: Store parameter data in IJK values. By rule, they are not in use with this command.
 873:grbl/gcode.c  **** 		if (!settings_read_coord_data(coord_select, gc_block.values.ijk))
 874:grbl/gcode.c  **** 		{
 875:grbl/gcode.c  **** 			FAIL(STATUS_SETTING_READ_FAIL);
 876:grbl/gcode.c  **** 		} // [EEPROM read fail]
 877:grbl/gcode.c  **** 
 878:grbl/gcode.c  **** 		// Pre-calculate the coordinate data changes.
 879:grbl/gcode.c  **** 		for (idx = 0; idx < N_AXIS; idx++)
 880:grbl/gcode.c  **** 		{ // Axes indices are consistent, so loop may be used.
 881:grbl/gcode.c  **** 			// Update axes defined only in block. Always in machine coordinates. Can change non-active syste
 882:grbl/gcode.c  **** 			if (bit_istrue(axis_words, bit(idx)))
 883:grbl/gcode.c  **** 			{
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 26


 884:grbl/gcode.c  **** 				if (gc_block.values.l == 20)
 885:grbl/gcode.c  **** 				{
 886:grbl/gcode.c  **** 					// L20: Update coordinate system axis at current position (with modifiers) with programmed val
 887:grbl/gcode.c  **** 					// WPos = MPos - WCS - G92 - TLO  ->  WCS = MPos - G92 - TLO - WPos
 888:grbl/gcode.c  **** 					gc_block.values.ijk[idx] = gc_state.position[idx]
 889:grbl/gcode.c  **** 							- gc_state.coord_offset[idx] - gc_block.values.xyz[idx];
 890:grbl/gcode.c  **** 					if (idx == TOOL_LENGTH_OFFSET_AXIS)
 891:grbl/gcode.c  **** 					{
 892:grbl/gcode.c  **** 						gc_block.values.ijk[idx] -= gc_state.tool_length_offset;
 893:grbl/gcode.c  **** 					}
 894:grbl/gcode.c  **** 				}
 895:grbl/gcode.c  **** 				else
 896:grbl/gcode.c  **** 				{
 897:grbl/gcode.c  **** 					// L2: Update coordinate system axis to programmed value.
 898:grbl/gcode.c  **** 					gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 899:grbl/gcode.c  **** 				}
 900:grbl/gcode.c  **** 			} // Else, keep current stored value.
 901:grbl/gcode.c  **** 		}
 902:grbl/gcode.c  **** 		break;
 903:grbl/gcode.c  **** 	case NON_MODAL_SET_COORDINATE_OFFSET:
 904:grbl/gcode.c  **** 		// [G92 Errors]: No axis words.
 905:grbl/gcode.c  **** 		if (!axis_words)
 906:grbl/gcode.c  **** 		{
 907:grbl/gcode.c  **** 			FAIL(STATUS_GCODE_NO_AXIS_WORDS);
 908:grbl/gcode.c  **** 		} // [No axis words]
 909:grbl/gcode.c  **** 
 910:grbl/gcode.c  **** 		// Update axes defined only in block. Offsets current system to defined value. Does not update wh
 911:grbl/gcode.c  **** 		// active coordinate system is selected, but is still active unless G92.1 disables it.
 912:grbl/gcode.c  **** 		for (idx = 0; idx < N_AXIS; idx++)
 913:grbl/gcode.c  **** 		{ // Axes indices are consistent, so loop may be used.
 914:grbl/gcode.c  **** 			if (bit_istrue(axis_words, bit(idx)))
 915:grbl/gcode.c  **** 			{
 916:grbl/gcode.c  **** 				// WPos = MPos - WCS - G92 - TLO  ->  G92 = MPos - WCS - TLO - WPos
 917:grbl/gcode.c  **** 				gc_block.values.xyz[idx] = gc_state.position[idx]
 918:grbl/gcode.c  **** 						- block_coord_system[idx] - gc_block.values.xyz[idx];
 919:grbl/gcode.c  **** 				if (idx == TOOL_LENGTH_OFFSET_AXIS)
 920:grbl/gcode.c  **** 				{
 921:grbl/gcode.c  **** 					gc_block.values.xyz[idx] -= gc_state.tool_length_offset;
 922:grbl/gcode.c  **** 				}
 923:grbl/gcode.c  **** 			}
 924:grbl/gcode.c  **** 			else
 925:grbl/gcode.c  **** 			{
 926:grbl/gcode.c  **** 				gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 927:grbl/gcode.c  **** 			}
 928:grbl/gcode.c  **** 		}
 929:grbl/gcode.c  **** 		break;
 930:grbl/gcode.c  **** 
 931:grbl/gcode.c  **** 	default:
 932:grbl/gcode.c  **** 
 933:grbl/gcode.c  **** 		// At this point, the rest of the explicit axis commands treat the axis values as the traditional
 934:grbl/gcode.c  **** 		// target position with the coordinate system offsets, G92 offsets, absolute override, and distan
 935:grbl/gcode.c  **** 		// modes applied. This includes the motion mode commands. We can now pre-compute the target posit
 936:grbl/gcode.c  **** 		// NOTE: Tool offsets may be appended to these conversions when/if this feature is added.
 937:grbl/gcode.c  **** 		if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET)
 938:grbl/gcode.c  **** 		{ // TLO block any axis command.
 939:grbl/gcode.c  **** 			if (axis_words)
 940:grbl/gcode.c  **** 			{
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 27


 941:grbl/gcode.c  **** 				for (idx = 0; idx < N_AXIS; idx++)
 942:grbl/gcode.c  **** 				{ // Axes indices are consistent, so loop may be used to save flash space.
 943:grbl/gcode.c  **** 					if (bit_isfalse(axis_words, bit(idx)))
 944:grbl/gcode.c  **** 					{
 945:grbl/gcode.c  **** 						gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis p
 946:grbl/gcode.c  **** 					}
 947:grbl/gcode.c  **** 					else
 948:grbl/gcode.c  **** 					{
 949:grbl/gcode.c  **** 						// Update specified value according to distance mode or ignore if absolute override is active
 950:grbl/gcode.c  **** 						// NOTE: G53 is never active with G28/30 since they are in the same modal group.
 951:grbl/gcode.c  **** 						if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE)
 952:grbl/gcode.c  **** 						{
 953:grbl/gcode.c  **** 							// Apply coordinate offsets based on distance mode.
 954:grbl/gcode.c  **** 							if (gc_block.modal.distance == DISTANCE_MODE_ABSOLUTE)
 955:grbl/gcode.c  **** 							{
 956:grbl/gcode.c  **** 								gc_block.values.xyz[idx] += block_coord_system[idx]
 957:grbl/gcode.c  **** 										+ gc_state.coord_offset[idx];
 958:grbl/gcode.c  **** 								if (idx == TOOL_LENGTH_OFFSET_AXIS)
 959:grbl/gcode.c  **** 								{
 960:grbl/gcode.c  **** 									gc_block.values.xyz[idx] += gc_state.tool_length_offset;
 961:grbl/gcode.c  **** 								}
 962:grbl/gcode.c  **** 							}
 963:grbl/gcode.c  **** 							else
 964:grbl/gcode.c  **** 							{  // Incremental mode
 965:grbl/gcode.c  **** 								gc_block.values.xyz[idx] += gc_state.position[idx];
 966:grbl/gcode.c  **** 							}
 967:grbl/gcode.c  **** 						}
 968:grbl/gcode.c  **** 					}
 969:grbl/gcode.c  **** 				}
 970:grbl/gcode.c  **** 			}
 971:grbl/gcode.c  **** 		}
 972:grbl/gcode.c  **** 
 973:grbl/gcode.c  **** 		// Check remaining non-modal commands for errors.
 974:grbl/gcode.c  **** 		switch (gc_block.non_modal_command)
 975:grbl/gcode.c  **** 		{
 976:grbl/gcode.c  **** 		case NON_MODAL_GO_HOME_0: // G28
 977:grbl/gcode.c  **** 		case NON_MODAL_GO_HOME_1: // G30
 978:grbl/gcode.c  **** 			// [G28/30 Errors]: Cutter compensation is enabled.
 979:grbl/gcode.c  **** 			// Retreive G28/30 go-home position data (in machine coordinates) from EEPROM
 980:grbl/gcode.c  **** 			// NOTE: Store parameter data in IJK values. By rule, they are not in use with this command.
 981:grbl/gcode.c  **** 			if (gc_block.non_modal_command == NON_MODAL_GO_HOME_0)
 982:grbl/gcode.c  **** 			{
 983:grbl/gcode.c  **** 				if (!settings_read_coord_data(SETTING_INDEX_G28, gc_block.values.ijk))
 984:grbl/gcode.c  **** 				{
 985:grbl/gcode.c  **** 					FAIL(STATUS_SETTING_READ_FAIL);
 986:grbl/gcode.c  **** 				}
 987:grbl/gcode.c  **** 			}
 988:grbl/gcode.c  **** 			else
 989:grbl/gcode.c  **** 			{ // == NON_MODAL_GO_HOME_1
 990:grbl/gcode.c  **** 				if (!settings_read_coord_data(SETTING_INDEX_G30, gc_block.values.ijk))
 991:grbl/gcode.c  **** 				{
 992:grbl/gcode.c  **** 					FAIL(STATUS_SETTING_READ_FAIL);
 993:grbl/gcode.c  **** 				}
 994:grbl/gcode.c  **** 			}
 995:grbl/gcode.c  **** 			if (axis_words)
 996:grbl/gcode.c  **** 			{
 997:grbl/gcode.c  **** 				// Move only the axes specified in secondary move.
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 28


 998:grbl/gcode.c  **** 				for (idx = 0; idx < N_AXIS; idx++)
 999:grbl/gcode.c  **** 				{
1000:grbl/gcode.c  **** 					if (!(axis_words & (1 << idx)))
1001:grbl/gcode.c  **** 					{
1002:grbl/gcode.c  **** 						gc_block.values.ijk[idx] = gc_state.position[idx];
1003:grbl/gcode.c  **** 					}
1004:grbl/gcode.c  **** 				}
1005:grbl/gcode.c  **** 			}
1006:grbl/gcode.c  **** 			else
1007:grbl/gcode.c  **** 			{
1008:grbl/gcode.c  **** 				axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
1009:grbl/gcode.c  **** 			}
1010:grbl/gcode.c  **** 			break;
1011:grbl/gcode.c  **** 		case NON_MODAL_SET_HOME_0: // G28.1
1012:grbl/gcode.c  **** 		case NON_MODAL_SET_HOME_1: // G30.1
1013:grbl/gcode.c  **** 			// [G28.1/30.1 Errors]: Cutter compensation is enabled.
1014:grbl/gcode.c  **** 			// NOTE: If axis words are passed here, they are interpreted as an implicit motion mode.
1015:grbl/gcode.c  **** 			break;
1016:grbl/gcode.c  **** 		case NON_MODAL_RESET_COORDINATE_OFFSET:
1017:grbl/gcode.c  **** 			// NOTE: If axis words are passed here, they are interpreted as an implicit motion mode.
1018:grbl/gcode.c  **** 			break;
1019:grbl/gcode.c  **** 		case NON_MODAL_ABSOLUTE_OVERRIDE:
1020:grbl/gcode.c  **** 			// [G53 Errors]: G0 and G1 are not active. Cutter compensation is enabled.
1021:grbl/gcode.c  **** 			// NOTE: All explicit axis word commands are in this modal group. So no implicit check necessary
1022:grbl/gcode.c  **** 			if (!(gc_block.modal.motion == MOTION_MODE_SEEK
1023:grbl/gcode.c  **** 					|| gc_block.modal.motion == MOTION_MODE_LINEAR))
1024:grbl/gcode.c  **** 			{
1025:grbl/gcode.c  **** 				FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
1026:grbl/gcode.c  **** 			}
1027:grbl/gcode.c  **** 			break;
1028:grbl/gcode.c  **** 		}
1029:grbl/gcode.c  **** 	}
1030:grbl/gcode.c  **** 
1031:grbl/gcode.c  **** 	// [20. Motion modes ]:
1032:grbl/gcode.c  **** 	if (gc_block.modal.motion == MOTION_MODE_NONE)
1033:grbl/gcode.c  **** 	{
1034:grbl/gcode.c  **** 		// [G80 Errors]: Axis word are programmed while G80 is active.
1035:grbl/gcode.c  **** 		// NOTE: Even non-modal commands or TLO that use axis words will throw this strict error.
1036:grbl/gcode.c  **** 		if (axis_words)
1037:grbl/gcode.c  **** 		{
1038:grbl/gcode.c  **** 			FAIL(STATUS_GCODE_AXIS_WORDS_EXIST);
1039:grbl/gcode.c  **** 		} // [No axis words allowed]
1040:grbl/gcode.c  **** 
1041:grbl/gcode.c  **** 		// Check remaining motion modes, if axis word are implicit (exist and not used by G10/28/30/92), 
1042:grbl/gcode.c  **** 		// was explicitly commanded in the g-code block.
1043:grbl/gcode.c  **** 	}
1044:grbl/gcode.c  **** 	else if (axis_command == AXIS_COMMAND_MOTION_MODE)
1045:grbl/gcode.c  **** 	{
1046:grbl/gcode.c  **** 
1047:grbl/gcode.c  **** 		if (gc_block.modal.motion == MOTION_MODE_SEEK)
1048:grbl/gcode.c  **** 		{
1049:grbl/gcode.c  **** 			// [G0 Errors]: Axis letter not configured or without real value (done.)
1050:grbl/gcode.c  **** 			// Axis words are optional. If missing, set axis command flag to ignore execution.
1051:grbl/gcode.c  **** 			if (!axis_words)
1052:grbl/gcode.c  **** 			{
1053:grbl/gcode.c  **** 				axis_command = AXIS_COMMAND_NONE;
1054:grbl/gcode.c  **** 			}
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 29


1055:grbl/gcode.c  **** 
1056:grbl/gcode.c  **** 			// All remaining motion modes (all but G0 and G80), require a valid feed rate value. In units pe
1057:grbl/gcode.c  **** 			// the value must be positive. In inverse time mode, a positive value must be passed with each b
1058:grbl/gcode.c  **** 		}
1059:grbl/gcode.c  **** 		else
1060:grbl/gcode.c  **** 		{
1061:grbl/gcode.c  **** 			// Check if feed rate is defined for the motion modes that require it.
1062:grbl/gcode.c  **** 			if (gc_block.values.f == 0.0)
1063:grbl/gcode.c  **** 			{
1064:grbl/gcode.c  **** 				FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE);
1065:grbl/gcode.c  **** 			} // [Feed rate undefined]
1066:grbl/gcode.c  **** 
1067:grbl/gcode.c  **** 			switch (gc_block.modal.motion)
1068:grbl/gcode.c  **** 			{
1069:grbl/gcode.c  **** 			case MOTION_MODE_LINEAR:
1070:grbl/gcode.c  **** 				// [G1 Errors]: Feed rate undefined. Axis letter not configured or without real value.
1071:grbl/gcode.c  **** 				// Axis words are optional. If missing, set axis command flag to ignore execution.
1072:grbl/gcode.c  **** 				if (!axis_words)
1073:grbl/gcode.c  **** 				{
1074:grbl/gcode.c  **** 					axis_command = AXIS_COMMAND_NONE;
1075:grbl/gcode.c  **** 				}
1076:grbl/gcode.c  **** 				break;
1077:grbl/gcode.c  **** 			case MOTION_MODE_CW_ARC:
1078:grbl/gcode.c  **** 				gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
1079:grbl/gcode.c  **** 			case MOTION_MODE_CCW_ARC:
1080:grbl/gcode.c  **** 				// [G2/3 Errors All-Modes]: Feed rate undefined.
1081:grbl/gcode.c  **** 				// [G2/3 Radius-Mode Errors]: No axis words in selected plane. Target point is same as current.
1082:grbl/gcode.c  **** 				// [G2/3 Offset-Mode Errors]: No axis words and/or offsets in selected plane. The radius to the
1083:grbl/gcode.c  **** 				//   point and the radius to the target point differs more than 0.002mm (EMC def. 0.5mm OR 0.00
1084:grbl/gcode.c  **** 				// [G2/3 Full-Circle-Mode Errors]: NOT SUPPORTED. Axis words exist. No offsets programmed. P mu
1085:grbl/gcode.c  **** 				// NOTE: Both radius and offsets are required for arc tracing and are pre-computed with the err
1086:grbl/gcode.c  **** 
1087:grbl/gcode.c  **** 				if (!axis_words)
1088:grbl/gcode.c  **** 				{
1089:grbl/gcode.c  **** 					FAIL(STATUS_GCODE_NO_AXIS_WORDS);
1090:grbl/gcode.c  **** 				} // [No axis words]
1091:grbl/gcode.c  **** 				if (!(axis_words & (bit(axis_0) | bit(axis_1))))
1092:grbl/gcode.c  **** 				{
1093:grbl/gcode.c  **** 					FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE);
1094:grbl/gcode.c  **** 				} // [No axis words in plane]
1095:grbl/gcode.c  **** 
1096:grbl/gcode.c  **** 				// Calculate the change in position along each selected axis
1097:grbl/gcode.c  **** 				float x, y;
1098:grbl/gcode.c  **** 				x = gc_block.values.xyz[axis_0] - gc_state.position[axis_0]; // Delta x between current positio
1099:grbl/gcode.c  **** 				y = gc_block.values.xyz[axis_1] - gc_state.position[axis_1]; // Delta y between current positio
1100:grbl/gcode.c  **** 
1101:grbl/gcode.c  **** 				if (value_words & bit(WORD_R))
1102:grbl/gcode.c  **** 				{ // Arc Radius Mode
1103:grbl/gcode.c  **** 					bit_false(value_words, bit(WORD_R));
1104:grbl/gcode.c  **** 					if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
1105:grbl/gcode.c  **** 					{
1106:grbl/gcode.c  **** 						FAIL(STATUS_GCODE_INVALID_TARGET);
1107:grbl/gcode.c  **** 					} // [Invalid target]
1108:grbl/gcode.c  **** 
1109:grbl/gcode.c  **** 					// Convert radius value to proper units.
1110:grbl/gcode.c  **** 					if (gc_block.modal.units == UNITS_MODE_INCHES)
1111:grbl/gcode.c  **** 					{
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 30


1112:grbl/gcode.c  **** 						gc_block.values.r *= MM_PER_INCH;
1113:grbl/gcode.c  **** 					}
1114:grbl/gcode.c  **** 					/*  We need to calculate the center of the circle that has the designated radius and passes
1115:grbl/gcode.c  **** 					 through both the current position and the target position. This method calculates the followi
1116:grbl/gcode.c  **** 					 set of equations where [x,y] is the vector from current to target position, d == magnitude of
1117:grbl/gcode.c  **** 					 that vector, h == hypotenuse of the triangle formed by the radius of the circle, the distance
1118:grbl/gcode.c  **** 					 the center of the travel vector. A vector perpendicular to the travel vector [-y,x] is scaled
1119:grbl/gcode.c  **** 					 length of h [-y/d*h, x/d*h] and added to the center of the travel vector [x/2,y/2] to form th
1120:grbl/gcode.c  **** 					 [i,j] at [x/2-y/d*h, y/2+x/d*h] which will be the center of our arc.
1121:grbl/gcode.c  **** 
1122:grbl/gcode.c  **** 					 d^2 == x^2 + y^2
1123:grbl/gcode.c  **** 					 h^2 == r^2 - (d/2)^2
1124:grbl/gcode.c  **** 					 i == x/2 - y/d*h
1125:grbl/gcode.c  **** 					 j == y/2 + x/d*h
1126:grbl/gcode.c  **** 
1127:grbl/gcode.c  **** 					 O <- [i,j]
1128:grbl/gcode.c  **** 					 -  |
1129:grbl/gcode.c  **** 					 r      -     |
1130:grbl/gcode.c  **** 					 -        |
1131:grbl/gcode.c  **** 					 -           | h
1132:grbl/gcode.c  **** 					 -              |
1133:grbl/gcode.c  **** 					 [0,0] ->  C -----------------+--------------- T  <- [x,y]
1134:grbl/gcode.c  **** 					 | <------ d/2 ---->|
1135:grbl/gcode.c  **** 
1136:grbl/gcode.c  **** 					 C - Current position
1137:grbl/gcode.c  **** 					 T - Target position
1138:grbl/gcode.c  **** 					 O - center of circle that pass through both C and T
1139:grbl/gcode.c  **** 					 d - distance from C to T
1140:grbl/gcode.c  **** 					 r - designated radius
1141:grbl/gcode.c  **** 					 h - distance from center of CT to O
1142:grbl/gcode.c  **** 
1143:grbl/gcode.c  **** 					 Expanding the equations:
1144:grbl/gcode.c  **** 
1145:grbl/gcode.c  **** 					 d -> sqrt(x^2 + y^2)
1146:grbl/gcode.c  **** 					 h -> sqrt(4 * r^2 - x^2 - y^2)/2
1147:grbl/gcode.c  **** 					 i -> (x - (y * sqrt(4 * r^2 - x^2 - y^2)) / sqrt(x^2 + y^2)) / 2
1148:grbl/gcode.c  **** 					 j -> (y + (x * sqrt(4 * r^2 - x^2 - y^2)) / sqrt(x^2 + y^2)) / 2
1149:grbl/gcode.c  **** 
1150:grbl/gcode.c  **** 					 Which can be written:
1151:grbl/gcode.c  **** 
1152:grbl/gcode.c  **** 					 i -> (x - (y * sqrt(4 * r^2 - x^2 - y^2))/sqrt(x^2 + y^2))/2
1153:grbl/gcode.c  **** 					 j -> (y + (x * sqrt(4 * r^2 - x^2 - y^2))/sqrt(x^2 + y^2))/2
1154:grbl/gcode.c  **** 
1155:grbl/gcode.c  **** 					 Which we for size and speed reasons optimize to:
1156:grbl/gcode.c  **** 
1157:grbl/gcode.c  **** 					 h_x2_div_d = sqrt(4 * r^2 - x^2 - y^2)/sqrt(x^2 + y^2)
1158:grbl/gcode.c  **** 					 i = (x - (y * h_x2_div_d))/2
1159:grbl/gcode.c  **** 					 j = (y + (x * h_x2_div_d))/2
1160:grbl/gcode.c  **** 					 */
1161:grbl/gcode.c  **** 
1162:grbl/gcode.c  **** 					// First, use h_x2_div_d to compute 4*h^2 to check if it is negative or r is smaller
1163:grbl/gcode.c  **** 					// than d. If so, the sqrt of a negative number is complex and error out.
1164:grbl/gcode.c  **** 					float h_x2_div_d = 4.0 * gc_block.values.r * gc_block.values.r - x * x
1165:grbl/gcode.c  **** 							- y * y;
1166:grbl/gcode.c  **** 
1167:grbl/gcode.c  **** 					if (h_x2_div_d < 0)
1168:grbl/gcode.c  **** 					{
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 31


1169:grbl/gcode.c  **** 						FAIL(STATUS_GCODE_ARC_RADIUS_ERROR);
1170:grbl/gcode.c  **** 					} // [Arc radius error]
1171:grbl/gcode.c  **** 
1172:grbl/gcode.c  **** 					// Finish computing h_x2_div_d.
1173:grbl/gcode.c  **** 					h_x2_div_d = -sqrt(h_x2_div_d) / hypot_f(x, y); // == -(h * 2 / d)
1174:grbl/gcode.c  **** 					// Invert the sign of h_x2_div_d if the circle is counter clockwise (see sketch below)
1175:grbl/gcode.c  **** 					if (gc_block.modal.motion == MOTION_MODE_CCW_ARC)
1176:grbl/gcode.c  **** 					{
1177:grbl/gcode.c  **** 						h_x2_div_d = -h_x2_div_d;
1178:grbl/gcode.c  **** 					}
1179:grbl/gcode.c  **** 
1180:grbl/gcode.c  **** 					/* The counter clockwise circle lies to the left of the target direction. When offset is posit
1181:grbl/gcode.c  **** 					 the left hand circle will be generated - when it is negative the right hand circle is generat
1182:grbl/gcode.c  **** 
1183:grbl/gcode.c  **** 					 T  <-- Target position
1184:grbl/gcode.c  **** 
1185:grbl/gcode.c  **** 					 ^
1186:grbl/gcode.c  **** 					 Clockwise circles with this center         |          Clockwise circles with this center will
1187:grbl/gcode.c  **** 					 will have > 180 deg of angular travel      |          < 180 deg of angular travel, which is a
1188:grbl/gcode.c  **** 					 \         |          /
1189:grbl/gcode.c  **** 					 center of arc when h_x2_div_d is positive ->  x <----- | -----> x <- center of arc when h_x2_
1190:grbl/gcode.c  **** 					 |
1191:grbl/gcode.c  **** 					 |
1192:grbl/gcode.c  **** 
1193:grbl/gcode.c  **** 					 C  <-- Current position
1194:grbl/gcode.c  **** 					 */
1195:grbl/gcode.c  **** 					// Negative R is g-code-alese for "I want a circle with more than 180 degrees of travel" (go f
1196:grbl/gcode.c  **** 					// even though it is advised against ever generating such circles in a single line of g-code. 
1197:grbl/gcode.c  **** 					// inverting the sign of h_x2_div_d the center of the circles is placed on the opposite side o
1198:grbl/gcode.c  **** 					// travel and thus we get the unadvisably long arcs as prescribed.
1199:grbl/gcode.c  **** 					if (gc_block.values.r < 0)
1200:grbl/gcode.c  **** 					{
1201:grbl/gcode.c  **** 						h_x2_div_d = -h_x2_div_d;
1202:grbl/gcode.c  **** 						gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
1203:grbl/gcode.c  **** 					}
1204:grbl/gcode.c  **** 					// Complete the operation by calculating the actual center of the arc
1205:grbl/gcode.c  **** 					gc_block.values.ijk[axis_0] = 0.5 * (x - (y * h_x2_div_d));
1206:grbl/gcode.c  **** 					gc_block.values.ijk[axis_1] = 0.5 * (y + (x * h_x2_div_d));
1207:grbl/gcode.c  **** 
1208:grbl/gcode.c  **** 				}
1209:grbl/gcode.c  **** 				else
1210:grbl/gcode.c  **** 				{ // Arc Center Format Offset Mode
1211:grbl/gcode.c  **** 					if (!(ijk_words & (bit(axis_0) | bit(axis_1))))
1212:grbl/gcode.c  **** 					{
1213:grbl/gcode.c  **** 						FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE);
1214:grbl/gcode.c  **** 					} // [No offsets in plane]
1215:grbl/gcode.c  **** 					bit_false(value_words, (bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
1216:grbl/gcode.c  **** 
1217:grbl/gcode.c  **** 					// Convert IJK values to proper units.
1218:grbl/gcode.c  **** 					if (gc_block.modal.units == UNITS_MODE_INCHES)
1219:grbl/gcode.c  **** 					{
1220:grbl/gcode.c  **** 						for (idx = 0; idx < N_AXIS; idx++)
1221:grbl/gcode.c  **** 						{ // Axes indices are consistent, so loop may be used to save flash space.
1222:grbl/gcode.c  **** 							if (ijk_words & bit(idx))
1223:grbl/gcode.c  **** 							{
1224:grbl/gcode.c  **** 								gc_block.values.ijk[idx] *= MM_PER_INCH;
1225:grbl/gcode.c  **** 							}
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 32


1226:grbl/gcode.c  **** 						}
1227:grbl/gcode.c  **** 					}
1228:grbl/gcode.c  **** 
1229:grbl/gcode.c  **** 					// Arc radius from center to target
1230:grbl/gcode.c  **** 					x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
1231:grbl/gcode.c  **** 					y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
1232:grbl/gcode.c  **** 					float target_r = hypot_f(x, y);
1233:grbl/gcode.c  **** 
1234:grbl/gcode.c  **** 					// Compute arc radius for mc_arc. Defined from current location to center.
1235:grbl/gcode.c  **** 					gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0],
1236:grbl/gcode.c  **** 							gc_block.values.ijk[axis_1]);
1237:grbl/gcode.c  **** 
1238:grbl/gcode.c  **** 					// Compute difference between current location and target radii for final error-checks.
1239:grbl/gcode.c  **** 					float delta_r = fabs(target_r - gc_block.values.r);
1240:grbl/gcode.c  **** 					if (delta_r > 0.005)
1241:grbl/gcode.c  **** 					{
1242:grbl/gcode.c  **** 						if (delta_r > 0.5)
1243:grbl/gcode.c  **** 						{
1244:grbl/gcode.c  **** 							FAIL(STATUS_GCODE_INVALID_TARGET);
1245:grbl/gcode.c  **** 						} // [Arc definition error] > 0.5mm
1246:grbl/gcode.c  **** 						if (delta_r > (0.001 * gc_block.values.r))
1247:grbl/gcode.c  **** 						{
1248:grbl/gcode.c  **** 							FAIL(STATUS_GCODE_INVALID_TARGET);
1249:grbl/gcode.c  **** 						} // [Arc definition error] > 0.005mm AND 0.1% radius
1250:grbl/gcode.c  **** 					}
1251:grbl/gcode.c  **** 				}
1252:grbl/gcode.c  **** 				break;
1253:grbl/gcode.c  **** 			case MOTION_MODE_PROBE_TOWARD_NO_ERROR:
1254:grbl/gcode.c  **** 			case MOTION_MODE_PROBE_AWAY_NO_ERROR:
1255:grbl/gcode.c  **** 				gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
1256:grbl/gcode.c  **** 			case MOTION_MODE_PROBE_TOWARD:
1257:grbl/gcode.c  **** 			case MOTION_MODE_PROBE_AWAY:
1258:grbl/gcode.c  **** 				if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY)
1259:grbl/gcode.c  **** 						|| (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR))
1260:grbl/gcode.c  **** 				{
1261:grbl/gcode.c  **** 					gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY;
1262:grbl/gcode.c  **** 				}
1263:grbl/gcode.c  **** 				// [G38 Errors]: Target is same current. No axis words. Cutter compensation is enabled. Feed ra
1264:grbl/gcode.c  **** 				//   is undefined. Probe is triggered. NOTE: Probe check moved to probe cycle. Instead of retur
1265:grbl/gcode.c  **** 				//   an error, it issues an alarm to prevent further motion to the probe. It's also done there 
1266:grbl/gcode.c  **** 				//   allow the planner buffer to empty and move off the probe trigger before another probing cy
1267:grbl/gcode.c  **** 				if (!axis_words)
1268:grbl/gcode.c  **** 				{
1269:grbl/gcode.c  **** 					FAIL(STATUS_GCODE_NO_AXIS_WORDS);
1270:grbl/gcode.c  **** 				} // [No axis words]
1271:grbl/gcode.c  **** 				if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
1272:grbl/gcode.c  **** 				{
1273:grbl/gcode.c  **** 					FAIL(STATUS_GCODE_INVALID_TARGET);
1274:grbl/gcode.c  **** 				} // [Invalid target]
1275:grbl/gcode.c  **** 				break;
1276:grbl/gcode.c  **** 			}
1277:grbl/gcode.c  **** 		}
1278:grbl/gcode.c  **** 	}
1279:grbl/gcode.c  **** 
1280:grbl/gcode.c  **** 	// [21. Program flow ]: No error checks required.
1281:grbl/gcode.c  **** 
1282:grbl/gcode.c  **** 	// [0. Non-specific error-checks]: Complete unused value words check, i.e. IJK used when in arc
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 33


1283:grbl/gcode.c  **** 	// radius mode, or axis words that aren't used in the block.
1284:grbl/gcode.c  **** 	if (gc_parser_flags & GC_PARSER_JOG_MOTION)
1285:grbl/gcode.c  **** 	{
1286:grbl/gcode.c  **** 		// Jogging only uses the F feed rate and XYZ value words. N is valid, but S and T are invalid.
1287:grbl/gcode.c  **** 		bit_false(value_words, (bit(WORD_N)|bit(WORD_F)));
1288:grbl/gcode.c  **** 	}
1289:grbl/gcode.c  **** 	else
1290:grbl/gcode.c  **** 	{
1291:grbl/gcode.c  **** 		bit_false(value_words, (bit(WORD_N)|bit(WORD_F)|bit(WORD_S)|bit(WORD_T))); // Remove single-meani
1292:grbl/gcode.c  **** 	}
1293:grbl/gcode.c  **** 	if (axis_command)
1294:grbl/gcode.c  **** 	{
1295:grbl/gcode.c  **** 		bit_false(value_words,
1296:grbl/gcode.c  **** 				(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A)|bit(WORD_B)|bit(WORD_C)));
1297:grbl/gcode.c  **** 	} // Remove axis words.
1298:grbl/gcode.c  **** 
1299:grbl/gcode.c  **** 	if (gc_block.modal.digital)
1300:grbl/gcode.c  **** 	{
1301:grbl/gcode.c  **** 		if (bit_isfalse(value_words, bit(WORD_P)))
1302:grbl/gcode.c  **** 		{
1303:grbl/gcode.c  **** 			FAIL(STATUS_GCODE_VALUE_WORD_MISSING);
1304:grbl/gcode.c  **** 		} // [P word missing] need P value for M62,M63
1305:grbl/gcode.c  **** 		bit_false(value_words, bit(WORD_P));
1306:grbl/gcode.c  **** 	}
1307:grbl/gcode.c  **** 	if (gc_block.modal.waitoninput)
1308:grbl/gcode.c  **** 	{
1309:grbl/gcode.c  **** 		if (bit_isfalse(value_words, (bit(WORD_P)|bit(WORD_L)|bit(WORD_Q))))
1310:grbl/gcode.c  **** 		{
1311:grbl/gcode.c  **** 			FAIL(STATUS_GCODE_VALUE_WORD_MISSING);
1312:grbl/gcode.c  **** 		} // [P or L or Q word missing] need E P Q values for M66
1313:grbl/gcode.c  **** 		bit_false(value_words, (bit(WORD_P)|bit(WORD_L)|bit(WORD_Q)));
1314:grbl/gcode.c  **** 	}
1315:grbl/gcode.c  **** 	if (gc_block.modal.analog)
1316:grbl/gcode.c  **** 	{
1317:grbl/gcode.c  **** 		if (bit_isfalse(value_words, (bit(WORD_E)|bit(WORD_Q))))
1318:grbl/gcode.c  **** 		{
1319:grbl/gcode.c  **** 			FAIL(STATUS_GCODE_VALUE_WORD_MISSING);
1320:grbl/gcode.c  **** 		} // [E or Q word missing] need E and Q value for M67
1321:grbl/gcode.c  **** 		bit_false(value_words, (bit(WORD_E)|bit(WORD_Q)));
1322:grbl/gcode.c  **** 	}
1323:grbl/gcode.c  **** 	if (gc_block.modal.accel_scaling)
1324:grbl/gcode.c  **** 	{
1325:grbl/gcode.c  **** 		if (bit_isfalse(value_words, (bit(WORD_P)|bit(WORD_Q))))
1326:grbl/gcode.c  **** 		{
1327:grbl/gcode.c  **** 			FAIL(STATUS_GCODE_VALUE_WORD_MISSING);
1328:grbl/gcode.c  **** 		} // [P or Q missing] need P Q values for M100
1329:grbl/gcode.c  **** 		bit_false(value_words, (bit(WORD_P)|bit(WORD_Q)));
1330:grbl/gcode.c  **** 	}
1331:grbl/gcode.c  **** 
1332:grbl/gcode.c  **** 	if (value_words)
1333:grbl/gcode.c  **** 	{
1334:grbl/gcode.c  **** 		FAIL(STATUS_GCODE_UNUSED_WORDS);
1335:grbl/gcode.c  **** 	} // [Unused words]
1336:grbl/gcode.c  **** 
1337:grbl/gcode.c  **** 	/* -------------------------------------------------------------------------------------
1338:grbl/gcode.c  **** 	 STEP 4: EXECUTE!!
1339:grbl/gcode.c  **** 	 Assumes that all error-checking has been completed and no failure modes exist. We just
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 34


1340:grbl/gcode.c  **** 	 need to update the state and execute the block according to the order-of-execution.
1341:grbl/gcode.c  **** 	 */
1342:grbl/gcode.c  **** 
1343:grbl/gcode.c  **** 	// Initialize planner data struct for motion blocks.
1344:grbl/gcode.c  **** 	plan_line_data_t plan_data;
1345:grbl/gcode.c  **** 	plan_line_data_t *pl_data = &plan_data;
1346:grbl/gcode.c  **** 	memset(pl_data, 0, sizeof(plan_line_data_t)); // Zero pl_data struct
1347:grbl/gcode.c  **** 
1348:grbl/gcode.c  **** 	// Intercept jog commands and complete error checking for valid jog commands and execute.
1349:grbl/gcode.c  **** 	// NOTE: G-code parser state is not updated, except the position to ensure sequential jog
1350:grbl/gcode.c  **** 	// targets are computed correctly. The final parser position after a jog is updated in
1351:grbl/gcode.c  **** 	// protocol_execute_realtime() when jogging completes or is canceled.
1352:grbl/gcode.c  **** 	if (gc_parser_flags & GC_PARSER_JOG_MOTION)
1353:grbl/gcode.c  **** 	{
1354:grbl/gcode.c  **** 		// Only distance and unit modal commands and G53 absolute override command are allowed.
1355:grbl/gcode.c  **** 		// NOTE: Feed rate word and axis word checks have already been performed in STEP 3.
1356:grbl/gcode.c  **** 		if (command_words
1357:grbl/gcode.c  **** 				& ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0))))
1358:grbl/gcode.c  **** 		{
1359:grbl/gcode.c  **** 			FAIL(STATUS_INVALID_JOG_COMMAND)
1360:grbl/gcode.c  **** 		};
1361:grbl/gcode.c  **** 		if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE
1362:grbl/gcode.c  **** 				|| gc_block.non_modal_command == NON_MODAL_NO_ACTION))
1363:grbl/gcode.c  **** 		{
1364:grbl/gcode.c  **** 			FAIL(STATUS_INVALID_JOG_COMMAND);
1365:grbl/gcode.c  **** 		}
1366:grbl/gcode.c  **** 
1367:grbl/gcode.c  **** 		// Initialize planner data to current spindle and coolant modal state.
1368:grbl/gcode.c  **** 		pl_data->spindle_speed = gc_state.spindle_speed;
1369:grbl/gcode.c  **** 		plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
1370:grbl/gcode.c  **** 
1371:grbl/gcode.c  **** 		uint8_t status = jog_execute(&plan_data, &gc_block);
1372:grbl/gcode.c  **** 		if (status == STATUS_OK)
1373:grbl/gcode.c  **** 		{
1374:grbl/gcode.c  **** 			memcpy(gc_state.position, gc_block.values.xyz,
1375:grbl/gcode.c  **** 					sizeof(gc_block.values.xyz));
1376:grbl/gcode.c  **** 		}
1377:grbl/gcode.c  **** 		return (status);
1378:grbl/gcode.c  **** 	}
1379:grbl/gcode.c  **** 
1380:grbl/gcode.c  **** 	// If in laser mode, setup laser power based on current and past parser conditions.
1381:grbl/gcode.c  **** 	if (bit_istrue(settings.flags, BITFLAG_LASER_MODE))
1382:grbl/gcode.c  **** 	{
1383:grbl/gcode.c  **** 		if (!((gc_block.modal.motion == MOTION_MODE_LINEAR)
1384:grbl/gcode.c  **** 				|| (gc_block.modal.motion == MOTION_MODE_CW_ARC)
1385:grbl/gcode.c  **** 				|| (gc_block.modal.motion == MOTION_MODE_CCW_ARC)))
1386:grbl/gcode.c  **** 		{
1387:grbl/gcode.c  **** 			gc_parser_flags |= GC_PARSER_LASER_DISABLE;
1388:grbl/gcode.c  **** 		}
1389:grbl/gcode.c  **** 
1390:grbl/gcode.c  **** 		// Any motion mode with axis words is allowed to be passed from a spindle speed update.
1391:grbl/gcode.c  **** 		// NOTE: G1 and G0 without axis words sets axis_command to none. G28/30 are intentionally omitted
1392:grbl/gcode.c  **** 		// TODO: Check sync conditions for M3 enabled motions that don't enter the planner. (zero length)
1393:grbl/gcode.c  **** 		if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE))
1394:grbl/gcode.c  **** 		{
1395:grbl/gcode.c  **** 			gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
1396:grbl/gcode.c  **** 		}
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 35


1397:grbl/gcode.c  **** 		else
1398:grbl/gcode.c  **** 		{
1399:grbl/gcode.c  **** 			// M3 constant power laser requires planner syncs to update the laser when changing between
1400:grbl/gcode.c  **** 			// a G1/2/3 motion mode state and vice versa when there is no motion in the line.
1401:grbl/gcode.c  **** 			if (gc_state.modal.spindle == SPINDLE_ENABLE_CW)
1402:grbl/gcode.c  **** 			{
1403:grbl/gcode.c  **** 				if ((gc_state.modal.motion == MOTION_MODE_LINEAR)
1404:grbl/gcode.c  **** 						|| (gc_state.modal.motion == MOTION_MODE_CW_ARC)
1405:grbl/gcode.c  **** 						|| (gc_state.modal.motion == MOTION_MODE_CCW_ARC))
1406:grbl/gcode.c  **** 				{
1407:grbl/gcode.c  **** 					if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE))
1408:grbl/gcode.c  **** 					{
1409:grbl/gcode.c  **** 						gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC; // Change from G1/2/3 motion mode.
1410:grbl/gcode.c  **** 					}
1411:grbl/gcode.c  **** 				}
1412:grbl/gcode.c  **** 				else
1413:grbl/gcode.c  **** 				{
1414:grbl/gcode.c  **** 					// When changing to a G1 motion mode without axis words from a non-G1/2/3 motion mode.
1415:grbl/gcode.c  **** 					if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE))
1416:grbl/gcode.c  **** 					{
1417:grbl/gcode.c  **** 						gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
1418:grbl/gcode.c  **** 					}
1419:grbl/gcode.c  **** 				}
1420:grbl/gcode.c  **** 			}
1421:grbl/gcode.c  **** 		}
1422:grbl/gcode.c  **** 	}
1423:grbl/gcode.c  **** 
1424:grbl/gcode.c  **** 	// [0. Non-specific/common error-checks and miscellaneous setup]:
1425:grbl/gcode.c  **** 	// NOTE: If no line number is present, the value is zero.
1426:grbl/gcode.c  **** 	gc_state.line_number = gc_block.values.n;
1427:grbl/gcode.c  **** #ifdef USE_LINE_NUMBERS
1428:grbl/gcode.c  **** 	pl_data->line_number = gc_state.line_number; // Record data for planner use.
1429:grbl/gcode.c  **** #endif
1430:grbl/gcode.c  **** 
1431:grbl/gcode.c  **** 	// [1. Comments feedback ]:  NOT SUPPORTED
1432:grbl/gcode.c  **** 
1433:grbl/gcode.c  **** 	// [2. Set feed rate mode ]:
1434:grbl/gcode.c  **** 	gc_state.modal.feed_rate = gc_block.modal.feed_rate;
1435:grbl/gcode.c  **** 	if (gc_state.modal.feed_rate)
1436:grbl/gcode.c  **** 	{
1437:grbl/gcode.c  **** 		pl_data->condition |= PL_COND_FLAG_INVERSE_TIME;
1438:grbl/gcode.c  **** 	} // Set condition flag for planner use.
1439:grbl/gcode.c  **** 
1440:grbl/gcode.c  **** 	// [3. Set feed rate ]:
1441:grbl/gcode.c  **** 	gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
1442:grbl/gcode.c  **** 	pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
1443:grbl/gcode.c  **** 
1444:grbl/gcode.c  **** 	// [4. Set spindle speed ]:
1445:grbl/gcode.c  **** 	if ((gc_state.spindle_speed != gc_block.values.s)
1446:grbl/gcode.c  **** 			|| bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC))
1447:grbl/gcode.c  **** 	{
1448:grbl/gcode.c  **** 		if (gc_state.modal.spindle != SPINDLE_DISABLE)
1449:grbl/gcode.c  **** 		{
1450:grbl/gcode.c  **** #ifdef VARIABLE_SPINDLE
1451:grbl/gcode.c  **** 			if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_ISMOTION))
1452:grbl/gcode.c  **** 			{
1453:grbl/gcode.c  **** 				if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE))
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 36


1454:grbl/gcode.c  **** 				{
1455:grbl/gcode.c  **** 					spindle_sync(gc_state.modal.spindle, 0.0);
1456:grbl/gcode.c  **** 				}
1457:grbl/gcode.c  **** 				else
1458:grbl/gcode.c  **** 				{
1459:grbl/gcode.c  **** 					spindle_sync(gc_state.modal.spindle, gc_block.values.s);
1460:grbl/gcode.c  **** 				}
1461:grbl/gcode.c  **** 			}
1462:grbl/gcode.c  **** #else
1463:grbl/gcode.c  **** 			spindle_sync(gc_state.modal.spindle, 0.0);
1464:grbl/gcode.c  **** #endif
1465:grbl/gcode.c  **** 		}
1466:grbl/gcode.c  **** 		gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
1467:grbl/gcode.c  **** 	}
1468:grbl/gcode.c  **** 	// NOTE: Pass zero spindle speed for all restricted laser motions.
1469:grbl/gcode.c  **** 	if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE))
1470:grbl/gcode.c  **** 	{
1471:grbl/gcode.c  **** 		pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use.
1472:grbl/gcode.c  **** 	} // else { pl_data->spindle_speed = 0.0; } // Initialized as zero already.
1473:grbl/gcode.c  **** 
1474:grbl/gcode.c  **** 	// [5. Select tool ]: NOT SUPPORTED. Only tracks tool value.
1475:grbl/gcode.c  **** 	gc_state.tool = gc_block.values.t;
1476:grbl/gcode.c  **** 
1477:grbl/gcode.c  **** 	// [6. Change tool ]: NOT SUPPORTED
1478:grbl/gcode.c  **** 
1479:grbl/gcode.c  **** 	// [7. Spindle control ]:
1480:grbl/gcode.c  **** 	if (gc_state.modal.spindle != gc_block.modal.spindle)
1481:grbl/gcode.c  **** 	{
1482:grbl/gcode.c  **** 		// Update spindle control and apply spindle speed when enabling it in this block.
1483:grbl/gcode.c  **** 		// NOTE: All spindle state changes are synced, even in laser mode. Also, pl_data,
1484:grbl/gcode.c  **** 		// rather than gc_state, is used to manage laser state for non-laser motions.
1485:grbl/gcode.c  **** 		spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
1486:grbl/gcode.c  **** 		gc_state.modal.spindle = gc_block.modal.spindle;
1487:grbl/gcode.c  **** 	}
1488:grbl/gcode.c  **** 	pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
1489:grbl/gcode.c  **** 
1490:grbl/gcode.c  **** 	// [8. Coolant control ]:
1491:grbl/gcode.c  **** 	if (gc_state.modal.coolant != gc_block.modal.coolant)
1492:grbl/gcode.c  **** 	{
1493:grbl/gcode.c  **** 		// NOTE: Coolant M-codes are modal. Only one command per line is allowed. But, multiple states
1494:grbl/gcode.c  **** 		// can exist at the same time, while coolant disable clears all states.
1495:grbl/gcode.c  **** 		coolant_sync(gc_block.modal.coolant);
1496:grbl/gcode.c  **** 		if (gc_block.modal.coolant == COOLANT_DISABLE)
1497:grbl/gcode.c  **** 		{
1498:grbl/gcode.c  **** 			gc_state.modal.coolant = COOLANT_DISABLE;
1499:grbl/gcode.c  **** 		}
1500:grbl/gcode.c  **** 		else
1501:grbl/gcode.c  **** 		{
1502:grbl/gcode.c  **** 			gc_state.modal.coolant |= gc_block.modal.coolant;
1503:grbl/gcode.c  **** 		}
1504:grbl/gcode.c  **** 	}
1505:grbl/gcode.c  **** 	pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
1506:grbl/gcode.c  **** 
1507:grbl/gcode.c  **** 	// [9. Override control ]: NOT SUPPORTED. Always enabled. Except for a Grbl-only parking control.
1508:grbl/gcode.c  **** #ifdef ENABLE_PARKING_OVERRIDE_CONTROL
1509:grbl/gcode.c  **** 	if (gc_state.modal.override != gc_block.modal.override)
1510:grbl/gcode.c  **** 	{
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 37


1511:grbl/gcode.c  **** 		gc_state.modal.override = gc_block.modal.override;
1512:grbl/gcode.c  **** 		mc_override_ctrl_update(gc_state.modal.override);
1513:grbl/gcode.c  **** 	}
1514:grbl/gcode.c  **** #endif
1515:grbl/gcode.c  **** 
1516:grbl/gcode.c  **** 	// [10. Dwell ]:
1517:grbl/gcode.c  **** 	if (gc_block.non_modal_command == NON_MODAL_DWELL)
1518:grbl/gcode.c  **** 	{
1519:grbl/gcode.c  **** 		mc_dwell(gc_block.values.p);
1520:grbl/gcode.c  **** 	}
1521:grbl/gcode.c  **** 
1522:grbl/gcode.c  **** 	// [11. Set active plane ]:
1523:grbl/gcode.c  **** 	gc_state.modal.plane_select = gc_block.modal.plane_select;
1524:grbl/gcode.c  **** 
1525:grbl/gcode.c  **** 	// [12. Set length units ]:
1526:grbl/gcode.c  **** 	gc_state.modal.units = gc_block.modal.units;
1527:grbl/gcode.c  **** 
1528:grbl/gcode.c  **** 	// [13. Cutter radius compensation ]: G41/42 NOT SUPPORTED
1529:grbl/gcode.c  **** 	// gc_state.modal.cutter_comp = gc_block.modal.cutter_comp; // NOTE: Not needed since always disab
1530:grbl/gcode.c  **** 
1531:grbl/gcode.c  **** 	// [14. Cutter length compensation ]: G43.1 and G49 supported. G43 NOT SUPPORTED.
1532:grbl/gcode.c  **** 	// NOTE: If G43 were supported, its operation wouldn't be any different from G43.1 in terms
1533:grbl/gcode.c  **** 	// of execution. The error-checking step would simply load the offset value into the correct
1534:grbl/gcode.c  **** 	// axis of the block XYZ value array.
1535:grbl/gcode.c  **** 	if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET)
1536:grbl/gcode.c  **** 	{ // Indicates a change.
1537:grbl/gcode.c  **** 		gc_state.modal.tool_length = gc_block.modal.tool_length;
1538:grbl/gcode.c  **** 		if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL)
1539:grbl/gcode.c  **** 		{ // G49
1540:grbl/gcode.c  **** 			gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0;
1541:grbl/gcode.c  **** 		} // else G43.1
1542:grbl/gcode.c  **** 		if (gc_state.tool_length_offset
1543:grbl/gcode.c  **** 				!= gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS])
1544:grbl/gcode.c  **** 		{
1545:grbl/gcode.c  **** 			gc_state.tool_length_offset =
1546:grbl/gcode.c  **** 					gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS];
1547:grbl/gcode.c  **** 			system_flag_wco_change();
1548:grbl/gcode.c  **** 		}
1549:grbl/gcode.c  **** 	}
1550:grbl/gcode.c  **** 
1551:grbl/gcode.c  **** 	// [15. Coordinate system selection ]:
1552:grbl/gcode.c  **** 	if (gc_state.modal.coord_select != gc_block.modal.coord_select)
1553:grbl/gcode.c  **** 	{
1554:grbl/gcode.c  **** 		gc_state.modal.coord_select = gc_block.modal.coord_select;
1555:grbl/gcode.c  **** 		memcpy(gc_state.coord_system, block_coord_system, N_AXIS * sizeof(float));
1556:grbl/gcode.c  **** 		system_flag_wco_change();
1557:grbl/gcode.c  **** 	}
1558:grbl/gcode.c  **** 
1559:grbl/gcode.c  **** 	// [16. Set path control mode ]: G61.1/G64 NOT SUPPORTED
1560:grbl/gcode.c  **** 	// gc_state.modal.control = gc_block.modal.control; // NOTE: Always default.
1561:grbl/gcode.c  **** 
1562:grbl/gcode.c  **** 	// [17. Set distance mode ]:
1563:grbl/gcode.c  **** 	gc_state.modal.distance = gc_block.modal.distance;
1564:grbl/gcode.c  **** 
1565:grbl/gcode.c  **** 	// [18. Set retract mode ]: NOT SUPPORTED
1566:grbl/gcode.c  **** 
1567:grbl/gcode.c  **** 	// [19. Go to predefined position, Set G10, or Set axis offsets ]:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 38


1568:grbl/gcode.c  **** 	switch (gc_block.non_modal_command)
1569:grbl/gcode.c  **** 	{
1570:grbl/gcode.c  **** 	case NON_MODAL_SET_COORDINATE_DATA:
1571:grbl/gcode.c  **** 		settings_write_coord_data(coord_select, gc_block.values.ijk);
1572:grbl/gcode.c  **** 		// Update system coordinate system if currently active.
1573:grbl/gcode.c  **** 		if (gc_state.modal.coord_select == coord_select)
1574:grbl/gcode.c  **** 		{
1575:grbl/gcode.c  **** 			memcpy(gc_state.coord_system, gc_block.values.ijk,
1576:grbl/gcode.c  **** 			N_AXIS * sizeof(float));
1577:grbl/gcode.c  **** 			system_flag_wco_change();
1578:grbl/gcode.c  **** 		}
1579:grbl/gcode.c  **** 		break;
1580:grbl/gcode.c  **** 	case NON_MODAL_GO_HOME_0:
1581:grbl/gcode.c  **** 	case NON_MODAL_GO_HOME_1:
1582:grbl/gcode.c  **** 		// Move to intermediate position before going home. Obeys current coordinate system and offsets
1583:grbl/gcode.c  **** 		// and absolute and incremental modes.
1584:grbl/gcode.c  **** 		pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
1585:grbl/gcode.c  **** 		if (axis_command)
1586:grbl/gcode.c  **** 		{
1587:grbl/gcode.c  **** 			mc_line(gc_block.values.xyz, pl_data);
1588:grbl/gcode.c  **** 		}
1589:grbl/gcode.c  **** 		mc_line(gc_block.values.ijk, pl_data);
1590:grbl/gcode.c  **** 		memcpy(gc_state.position, gc_block.values.ijk, N_AXIS * sizeof(float));
1591:grbl/gcode.c  **** 		break;
1592:grbl/gcode.c  **** 	case NON_MODAL_SET_HOME_0:
1593:grbl/gcode.c  **** 		settings_write_coord_data(SETTING_INDEX_G28, gc_state.position);
1594:grbl/gcode.c  **** 		break;
1595:grbl/gcode.c  **** 	case NON_MODAL_SET_HOME_1:
1596:grbl/gcode.c  **** 		settings_write_coord_data(SETTING_INDEX_G30, gc_state.position);
1597:grbl/gcode.c  **** 		break;
1598:grbl/gcode.c  **** 	case NON_MODAL_SET_COORDINATE_OFFSET:
1599:grbl/gcode.c  **** 		memcpy(gc_state.coord_offset, gc_block.values.xyz,
1600:grbl/gcode.c  **** 				sizeof(gc_block.values.xyz));
1601:grbl/gcode.c  **** 		system_flag_wco_change();
1602:grbl/gcode.c  **** 		break;
1603:grbl/gcode.c  **** 	case NON_MODAL_RESET_COORDINATE_OFFSET:
1604:grbl/gcode.c  **** 		clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
1605:grbl/gcode.c  **** 		system_flag_wco_change();
1606:grbl/gcode.c  **** 		break;
1607:grbl/gcode.c  **** 	}
1608:grbl/gcode.c  **** 
1609:grbl/gcode.c  **** 	// [20. Motion modes ]:
1610:grbl/gcode.c  **** 	// NOTE: Commands G10,G28,G30,G92 lock out and prevent axis words from use in motion modes.
1611:grbl/gcode.c  **** 	// Enter motion modes only if there are axis words or a motion mode command word in the block.
1612:grbl/gcode.c  **** 	gc_state.modal.motion = gc_block.modal.motion;
1613:grbl/gcode.c  **** 	if (gc_state.modal.motion != MOTION_MODE_NONE)
1614:grbl/gcode.c  **** 	{
1615:grbl/gcode.c  **** 		if (axis_command == AXIS_COMMAND_MOTION_MODE)
1616:grbl/gcode.c  **** 		{
1617:grbl/gcode.c  **** 			uint8_t gc_update_pos = GC_UPDATE_POS_TARGET;
1618:grbl/gcode.c  **** 			if (gc_state.modal.motion == MOTION_MODE_LINEAR)
1619:grbl/gcode.c  **** 			{
1620:grbl/gcode.c  **** 				mc_line(gc_block.values.xyz, pl_data);
1621:grbl/gcode.c  **** 			}
1622:grbl/gcode.c  **** 			else if (gc_state.modal.motion == MOTION_MODE_SEEK)
1623:grbl/gcode.c  **** 			{
1624:grbl/gcode.c  **** 				pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 39


1625:grbl/gcode.c  **** 				mc_line(gc_block.values.xyz, pl_data);
1626:grbl/gcode.c  **** 			}
1627:grbl/gcode.c  **** 			else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC)
1628:grbl/gcode.c  **** 					|| (gc_state.modal.motion == MOTION_MODE_CCW_ARC))
1629:grbl/gcode.c  **** 			{
1630:grbl/gcode.c  **** 				mc_arc(gc_block.values.xyz, pl_data, gc_state.position,
1631:grbl/gcode.c  **** 						gc_block.values.ijk, gc_block.values.r, axis_0, axis_1, axis_linear,
1632:grbl/gcode.c  **** 						bit_istrue(gc_parser_flags, GC_PARSER_ARC_IS_CLOCKWISE));
1633:grbl/gcode.c  **** 			}
1634:grbl/gcode.c  **** 			else
1635:grbl/gcode.c  **** 			{
1636:grbl/gcode.c  **** 				// NOTE: gc_block.values.xyz is returned from mc_probe_cycle with the updated position value. S
1637:grbl/gcode.c  **** 				// upon a successful probing cycle, the machine position and the returned value should be the s
1638:grbl/gcode.c  **** #ifndef ALLOW_FEED_OVERRIDE_DURING_PROBE_CYCLES
1639:grbl/gcode.c  **** 				pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
1640:grbl/gcode.c  **** #endif
1641:grbl/gcode.c  **** 				gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data,
1642:grbl/gcode.c  **** 						gc_parser_flags);
1643:grbl/gcode.c  **** 			}
1644:grbl/gcode.c  **** 
1645:grbl/gcode.c  **** 			// As far as the parser is concerned, the position is now == target. In reality the
1646:grbl/gcode.c  **** 			// motion control system might still be processing the action and the real tool position
1647:grbl/gcode.c  **** 			// in any intermediate location.
1648:grbl/gcode.c  **** 			if (gc_update_pos == GC_UPDATE_POS_TARGET)
1649:grbl/gcode.c  **** 			{
1650:grbl/gcode.c  **** 				memcpy(gc_state.position, gc_block.values.xyz,
1651:grbl/gcode.c  **** 						sizeof(gc_block.values.xyz)); // gc_state.position[] = gc_block.values.xyz[]
1652:grbl/gcode.c  **** 			}
1653:grbl/gcode.c  **** 			else if (gc_update_pos == GC_UPDATE_POS_SYSTEM)
1654:grbl/gcode.c  **** 			{
1655:grbl/gcode.c  **** 				gc_sync_position(); // gc_state.position[] = sys_position
1656:grbl/gcode.c  **** 			} // == GC_UPDATE_POS_NONE
1657:grbl/gcode.c  **** 		}
1658:grbl/gcode.c  **** 	}
1659:grbl/gcode.c  **** 
1660:grbl/gcode.c  **** 	// [21. Program flow ]:
1661:grbl/gcode.c  **** 	// M0,M1,M2,M30: Perform non-running program flow actions. During a program pause, the buffer may
1662:grbl/gcode.c  **** 	// refill and can only be resumed by the cycle start run-time command.
1663:grbl/gcode.c  **** 	gc_state.modal.program_flow = gc_block.modal.program_flow;
1664:grbl/gcode.c  **** 	if (gc_state.modal.program_flow)
1665:grbl/gcode.c  **** 	{
1666:grbl/gcode.c  **** 		protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on
1667:grbl/gcode.c  **** 		if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED)
1668:grbl/gcode.c  **** 		{
1669:grbl/gcode.c  **** 			if (sys.state != STATE_CHECK_MODE)
1670:grbl/gcode.c  **** 			{
1671:grbl/gcode.c  **** 				system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
1672:grbl/gcode.c  **** 				protocol_execute_realtime(); // Execute suspend.
1673:grbl/gcode.c  **** 			}
1674:grbl/gcode.c  **** 		}
1675:grbl/gcode.c  **** 		else
1676:grbl/gcode.c  **** 		{ // == PROGRAM_FLOW_COMPLETED
1677:grbl/gcode.c  **** 			// Upon program complete, only a subset of g-codes reset to certain defaults, according to
1678:grbl/gcode.c  **** 			// LinuxCNC's program end descriptions and testing. Only modal groups [G-code 1,2,3,5,7,12]
1679:grbl/gcode.c  **** 			// and [M-code 7,8,9] reset to [G1,G17,G90,G94,G40,G54,M5,M9,M48]. The remaining modal groups
1680:grbl/gcode.c  **** 			// [G-code 4,6,8,10,13,14,15] and [M-code 4,5,6] and the modal words [F,S,T,H] do not reset.
1681:grbl/gcode.c  **** 			gc_state.modal.motion = MOTION_MODE_LINEAR;
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 40


1682:grbl/gcode.c  **** 			gc_state.modal.plane_select = PLANE_SELECT_XY;
1683:grbl/gcode.c  **** 			gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
1684:grbl/gcode.c  **** 			gc_state.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
1685:grbl/gcode.c  **** 			// gc_state.modal.cutter_comp = CUTTER_COMP_DISABLE; // Not supported.
1686:grbl/gcode.c  **** 			gc_state.modal.coord_select = 0; // G54
1687:grbl/gcode.c  **** 			gc_state.modal.spindle = SPINDLE_DISABLE;
1688:grbl/gcode.c  **** 			gc_state.modal.coolant = COOLANT_DISABLE;
1689:grbl/gcode.c  **** #ifdef ENABLE_PARKING_OVERRIDE_CONTROL
1690:grbl/gcode.c  **** #ifdef DEACTIVATE_PARKING_UPON_INIT
1691:grbl/gcode.c  **** 			gc_state.modal.override = OVERRIDE_DISABLED;
1692:grbl/gcode.c  **** #else
1693:grbl/gcode.c  **** 			gc_state.modal.override = OVERRIDE_PARKING_MOTION;
1694:grbl/gcode.c  **** #endif
1695:grbl/gcode.c  **** #endif
1696:grbl/gcode.c  **** 
1697:grbl/gcode.c  **** #ifdef RESTORE_OVERRIDES_AFTER_PROGRAM_END
1698:grbl/gcode.c  **** 			sys.f_override = DEFAULT_FEED_OVERRIDE;
1699:grbl/gcode.c  **** 			sys.r_override = DEFAULT_RAPID_OVERRIDE;
1700:grbl/gcode.c  **** 			sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
1701:grbl/gcode.c  **** #endif
1702:grbl/gcode.c  **** 
1703:grbl/gcode.c  **** 			// Execute coordinate change and spindle/coolant stop.
1704:grbl/gcode.c  **** 			if (sys.state != STATE_CHECK_MODE)
1705:grbl/gcode.c  **** 			{
1706:grbl/gcode.c  **** 				if (!(settings_read_coord_data(gc_state.modal.coord_select,
1707:grbl/gcode.c  **** 						gc_state.coord_system)))
1708:grbl/gcode.c  **** 				{
1709:grbl/gcode.c  **** 					FAIL(STATUS_SETTING_READ_FAIL);
1710:grbl/gcode.c  **** 				}
1711:grbl/gcode.c  **** 				system_flag_wco_change(); // Set to refresh immediately just in case something altered.
1712:grbl/gcode.c  **** 				spindle_set_state(SPINDLE_DISABLE, 0.0);
1713:grbl/gcode.c  **** 				coolant_set_state(COOLANT_DISABLE);
1714:grbl/gcode.c  **** 			}
1715:grbl/gcode.c  **** 			report_feedback_message(MESSAGE_PROGRAM_END);
1716:grbl/gcode.c  **** 		}
1717:grbl/gcode.c  **** 		gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
1718:grbl/gcode.c  **** 	}
1719:grbl/gcode.c  **** 
1720:grbl/gcode.c  **** #ifdef ENABLE_DIGITAL_OUTPUT
1721:grbl/gcode.c  **** 	// [Digital output control ]: M62 M63
1722:grbl/gcode.c  **** 	if (gc_block.modal.digital)
1723:grbl/gcode.c  **** 	{
1724:grbl/gcode.c  **** 		output_select = trunc(gc_block.values.p); // Convert p value to int.
1725:grbl/gcode.c  **** 		outputs_digital_action(output_select, gc_block.modal.digital);
1726:grbl/gcode.c  **** 	}
1727:grbl/gcode.c  **** #endif
1728:grbl/gcode.c  **** #ifdef ENABLE_WAIT_ON_INPUT
1729:grbl/gcode.c  **** 	// [Digital input control ]: M66 P- L- Q-  where P is channel number L is mode and Q is timeout(s)
1730:grbl/gcode.c  **** 	if (gc_block.modal.waitoninput)
1731:grbl/gcode.c  **** 	{
1732:grbl/gcode.c  **** 		input_select = trunc(gc_block.values.p); // Convert p value to int.
1733:grbl/gcode.c  **** 		wait_on_input_action(input_select, gc_block.values.l, &gc_block.values.q);
1734:grbl/gcode.c  **** 	}
1735:grbl/gcode.c  **** #endif
1736:grbl/gcode.c  **** 
1737:grbl/gcode.c  **** #ifdef ENABLE_ANALOG_OUTPUT
1738:grbl/gcode.c  **** 	// [Analog control ]: M67 E- Q-  where E is channel number and Q is value to set
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 41


1739:grbl/gcode.c  **** 	if (gc_block.modal.analog)
1740:grbl/gcode.c  **** 	{
1741:grbl/gcode.c  **** 		outputs_analog_action(gc_block.values.e, &gc_block.values.q);
1742:grbl/gcode.c  **** 	}
1743:grbl/gcode.c  **** #endif
1744:grbl/gcode.c  **** #ifdef ENABLE_ACCEL_SCALING
1745:grbl/gcode.c  **** 	// [Acceleration Scaling ]: M100 P- Q- wehre P is the axis, and Q is the fractional value to scale
1746:grbl/gcode.c  **** 	if (gc_block.modal.accel_scaling)
1747:grbl/gcode.c  **** 	{
1748:grbl/gcode.c  **** 		output_select = trunc(gc_block.values.p); // Convert p value to int.
1749:grbl/gcode.c  **** 		acceleration_scaling(output_select, &gc_block.values.q); // in settings.c
1750:grbl/gcode.c  **** 		plan_reset(); // Clear block buffer and planner variables
1751:grbl/gcode.c  **** 	}
1752:grbl/gcode.c  **** #endif
1753:grbl/gcode.c  **** 
1754:grbl/gcode.c  **** 	// TODO: % to denote start of program.
1755:grbl/gcode.c  **** 
1756:grbl/gcode.c  **** 	return (STATUS_OK);
1757:grbl/gcode.c  **** }
 528              		.loc 1 1757 0
 529 02ce 1846     		mov	r0, r3
 530 02d0 19B0     		add	sp, sp, #100
 531              	.LCFI4:
 532              		.cfi_remember_state
 533              		.cfi_def_cfa_offset 36
 534              		@ sp needed
 535 02d2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 536              	.LVL31:
 537              	.L530:
 538              	.LCFI5:
 539              		.cfi_restore_state
 101:grbl/gcode.c  **** 		gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 540              		.loc 1 101 0
 541 02d6 0123     		movs	r3, #1
 102:grbl/gcode.c  **** #ifdef USE_LINE_NUMBERS
 542              		.loc 1 102 0
 543 02d8 0022     		movs	r2, #0
 101:grbl/gcode.c  **** 		gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 544              		.loc 1 101 0
 545 02da 7370     		strb	r3, [r6, #1]
 100:grbl/gcode.c  **** 		gc_block.modal.motion = MOTION_MODE_LINEAR;
 546              		.loc 1 100 0
 547 02dc 0993     		str	r3, [sp, #36]
 548 02de 0527     		movs	r7, #5
 549 02e0 1123     		movs	r3, #17
 102:grbl/gcode.c  **** #ifdef USE_LINE_NUMBERS
 550              		.loc 1 102 0
 551 02e2 B270     		strb	r2, [r6, #2]
 552              	.LVL32:
 553 02e4 CDE90A37 		strd	r3, r7, [sp, #40]
 122:grbl/gcode.c  **** 	} // Start parsing after `$J=`
 554              		.loc 1 122 0
 555 02e8 0322     		movs	r2, #3
 556 02ea AAE6     		b	.L12
 557              	.LVL33:
 558              	.L49:
 419:grbl/gcode.c  **** 				break;
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 42


 559              		.loc 1 419 0
 560 02ec 0123     		movs	r3, #1
 561 02ee F373     		strb	r3, [r6, #15]
 420:grbl/gcode.c  **** #endif
 562              		.loc 1 420 0
 563 02f0 4FF40043 		mov	r3, #32768
 564              	.LVL34:
 565              	.L34:
 316:grbl/gcode.c  **** 			{
 566              		.loc 1 316 0
 567 02f4 1F42     		tst	r7, r3
 568 02f6 40F03D82 		bne	.L534
 434:grbl/gcode.c  **** 			break;
 569              		.loc 1 434 0
 570 02fa 1F43     		orrs	r7, r7, r3
 571              	.LVL35:
 572              	.L39:
 573 02fc 9DF84320 		ldrb	r2, [sp, #67]	@ zero_extendqisi2
 574              	.LVL36:
 129:grbl/gcode.c  **** 	{ // Loop until no more g-code words in line.
 575              		.loc 1 129 0
 576 0300 AC5C     		ldrb	r4, [r5, r2]	@ zero_extendqisi2
 577 0302 002C     		cmp	r4, #0
 578 0304 7FF4ACAE 		bne	.L79
 579              	.LVL37:
 580              	.L531:
 611:grbl/gcode.c  **** 	{
 581              		.loc 1 611 0
 582 0308 069B     		ldr	r3, [sp, #24]
 583 030a 23B1     		cbz	r3, .L80
 615:grbl/gcode.c  **** 		} // Assign implicit motion-mode
 584              		.loc 1 615 0
 585 030c 079B     		ldr	r3, [sp, #28]
 586 030e 002B     		cmp	r3, #0
 587 0310 08BF     		it	eq
 588 0312 0223     		moveq	r3, #2
 589 0314 0793     		str	r3, [sp, #28]
 590              	.L80:
 591              	.LVL38:
 620:grbl/gcode.c  **** 	{
 592              		.loc 1 620 0
 593 0316 18F0200F 		tst	r8, #32
 594 031a 04D0     		beq	.L81
 623:grbl/gcode.c  **** 		{
 595              		.loc 1 623 0
 596 031c C64B     		ldr	r3, .L562
 597 031e 726A     		ldr	r2, [r6, #36]
 598 0320 9A42     		cmp	r2, r3
 599 0322 00F34082 		bgt	.L264
 600              	.L81:
 642:grbl/gcode.c  **** 	{
 601              		.loc 1 642 0
 602 0326 099B     		ldr	r3, [sp, #36]
 603 0328 002B     		cmp	r3, #0
 604 032a 40F02582 		bne	.L535
 655:grbl/gcode.c  **** 		{ // = G93
 605              		.loc 1 655 0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 43


 606 032e B378     		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 607 0330 012B     		cmp	r3, #1
 608 0332 00F08183 		beq	.L536
 685:grbl/gcode.c  **** 			{ // Last state is also G94
 609              		.loc 1 685 0
 610 0336 C14B     		ldr	r3, .L562+4
 611 0338 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 612 033a 33B9     		cbnz	r3, .L83
 687:grbl/gcode.c  **** 				{
 613              		.loc 1 687 0
 614 033c 18F0010F 		tst	r8, #1
 615 0340 40F01E82 		bne	.L529
 696:grbl/gcode.c  **** 				}
 616              		.loc 1 696 0
 617 0344 BD4B     		ldr	r3, .L562+4
 618 0346 5B69     		ldr	r3, [r3, #20]	@ float
 619 0348 3361     		str	r3, [r6, #16]	@ float
 620              	.L83:
 704:grbl/gcode.c  **** 	{
 621              		.loc 1 704 0
 622 034a 18F4807F 		tst	r8, #256
 623 034e 02D1     		bne	.L86
 706:grbl/gcode.c  **** 	}
 624              		.loc 1 706 0
 625 0350 BA4B     		ldr	r3, .L562+4
 626 0352 1B69     		ldr	r3, [r3, #16]	@ float
 627 0354 3363     		str	r3, [r6, #48]	@ float
 628              	.L86:
 730:grbl/gcode.c  **** 	{
 629              		.loc 1 730 0
 630 0356 3478     		ldrb	r4, [r6]	@ zero_extendqisi2
 631 0358 042C     		cmp	r4, #4
 632 035a 00F03E82 		beq	.L537
 633              	.L87:
 740:grbl/gcode.c  **** 	{
 634              		.loc 1 740 0
 635 035e 7379     		ldrb	r3, [r6, #5]	@ zero_extendqisi2
 636 0360 002B     		cmp	r3, #0
 637 0362 00F08282 		beq	.L90
 638 0366 012B     		cmp	r3, #1
 639 0368 40F07582 		bne	.L538
 640 036c 4FF00009 		mov	r9, #0
 641 0370 4FF0020A 		mov	r10, #2
 642 0374 0525     		movs	r5, #5
 643              	.LVL39:
 749:grbl/gcode.c  **** 		axis_linear = Y_AXIS;
 644              		.loc 1 749 0
 645 0376 CDE90D93 		strd	r9, r3, [sp, #52]
 748:grbl/gcode.c  **** 		axis_1 = X_AXIS;
 646              		.loc 1 748 0
 647 037a CDF830A0 		str	r10, [sp, #48]
 648              	.L91:
 649              	.LVL40:
 761:grbl/gcode.c  **** 	{
 650              		.loc 1 761 0
 651 037e F378     		ldrb	r3, [r6, #3]	@ zero_extendqisi2
 652 0380 012B     		cmp	r3, #1
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 44


 653 0382 00F03A82 		beq	.L539
 654              	.L92:
 782:grbl/gcode.c  **** 	{ // Indicates called in block.
 655              		.loc 1 782 0
 656 0386 079B     		ldr	r3, [sp, #28]
 657 0388 032B     		cmp	r3, #3
 658 038a 00F02C82 		beq	.L540
 659              	.L96:
 799:grbl/gcode.c  **** 			sizeof(gc_state.coord_system));
 660              		.loc 1 799 0
 661 038e AC4B     		ldr	r3, .L562+8
 662 0390 93E80700 		ldm	r3, {r0, r1, r2}
 663 0394 12AB     		add	r3, sp, #72
 664 0396 83E80700 		stm	r3, {r0, r1, r2}
 801:grbl/gcode.c  **** 	{ // Check if called in block
 665              		.loc 1 801 0
 666 039a B805     		lsls	r0, r7, #22
 667 039c 0ED5     		bpl	.L97
 803:grbl/gcode.c  **** 		{
 668              		.loc 1 803 0
 669 039e F079     		ldrb	r0, [r6, #7]	@ zero_extendqisi2
 670 03a0 0628     		cmp	r0, #6
 671 03a2 00F25A83 		bhi	.L105
 807:grbl/gcode.c  **** 		{
 672              		.loc 1 807 0
 673 03a6 A54B     		ldr	r3, .L562+4
 674 03a8 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 675 03aa 8342     		cmp	r3, r0
 676 03ac 06D0     		beq	.L97
 809:grbl/gcode.c  **** 					block_coord_system)))
 677              		.loc 1 809 0
 678 03ae 12A9     		add	r1, sp, #72
 679 03b0 FFF7FEFF 		bl	settings_read_coord_data
 680              	.LVL41:
 681 03b4 0028     		cmp	r0, #0
 682 03b6 00F09983 		beq	.L290
 683 03ba 3478     		ldrb	r4, [r6]	@ zero_extendqisi2
 684              	.L97:
 826:grbl/gcode.c  **** 	{
 685              		.loc 1 826 0
 686 03bc 0A2C     		cmp	r4, #10
 687 03be 00F0F482 		beq	.L101
 688 03c2 5C2C     		cmp	r4, #92
 689 03c4 40F06682 		bne	.L541
 905:grbl/gcode.c  **** 		{
 690              		.loc 1 905 0
 691 03c8 069B     		ldr	r3, [sp, #24]
 692 03ca 002B     		cmp	r3, #0
 693 03cc 00F05183 		beq	.L118
 694              	.LVL42:
 914:grbl/gcode.c  **** 			{
 695              		.loc 1 914 0
 696 03d0 DB07     		lsls	r3, r3, #31
 697 03d2 00F15283 		bmi	.L119
 926:grbl/gcode.c  **** 			}
 698              		.loc 1 926 0
 699 03d6 994B     		ldr	r3, .L562+4
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 45


 700 03d8 9B6B     		ldr	r3, [r3, #56]	@ float
 701 03da B363     		str	r3, [r6, #56]	@ float
 702              	.L120:
 703              	.LVL43:
 914:grbl/gcode.c  **** 			{
 704              		.loc 1 914 0
 705 03dc 069B     		ldr	r3, [sp, #24]
 706 03de 9C07     		lsls	r4, r3, #30
 707 03e0 00F18783 		bmi	.L121
 926:grbl/gcode.c  **** 			}
 708              		.loc 1 926 0
 709 03e4 954B     		ldr	r3, .L562+4
 710 03e6 DB6B     		ldr	r3, [r3, #60]	@ float
 711 03e8 F363     		str	r3, [r6, #60]	@ float
 712              	.L122:
 713              	.LVL44:
 914:grbl/gcode.c  **** 			{
 714              		.loc 1 914 0
 715 03ea 069B     		ldr	r3, [sp, #24]
 716 03ec C3F38003 		ubfx	r3, r3, #2, #1
 717 03f0 002B     		cmp	r3, #0
 718 03f2 00F03483 		beq	.L123
 918:grbl/gcode.c  **** 				if (idx == TOOL_LENGTH_OFFSET_AXIS)
 719              		.loc 1 918 0
 720 03f6 914B     		ldr	r3, .L562+4
 721 03f8 1499     		ldr	r1, [sp, #80]	@ float
 722 03fa 1C46     		mov	r4, r3
 723 03fc 986A     		ldr	r0, [r3, #40]	@ float
 724 03fe FFF7FEFF 		bl	__aeabi_fsub
 725              	.LVL45:
 726 0402 316C     		ldr	r1, [r6, #64]	@ float
 727 0404 FFF7FEFF 		bl	__aeabi_fsub
 728              	.LVL46:
 921:grbl/gcode.c  **** 				}
 729              		.loc 1 921 0
 730 0408 616C     		ldr	r1, [r4, #68]	@ float
 731 040a FFF7FEFF 		bl	__aeabi_fsub
 732              	.LVL47:
  80:grbl/gcode.c  **** 	uint8_t output_select = 0;
 733              		.loc 1 80 0
 734 040e 0023     		movs	r3, #0
 735 0410 7478     		ldrb	r4, [r6, #1]	@ zero_extendqisi2
 736 0412 0F93     		str	r3, [sp, #60]
 921:grbl/gcode.c  **** 				}
 737              		.loc 1 921 0
 738 0414 3064     		str	r0, [r6, #64]	@ float
 739              	.LVL48:
 740              	.L117:
1032:grbl/gcode.c  **** 	{
 741              		.loc 1 1032 0
 742 0416 502C     		cmp	r4, #80
 743 0418 40F00983 		bne	.L149
 744              	.LVL49:
 745              	.L294:
1038:grbl/gcode.c  **** 		} // [No axis words allowed]
 746              		.loc 1 1038 0
 747 041c 1F23     		movs	r3, #31
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 46


 748 041e 56E7     		b	.L298
 749              	.LVL50:
 750              	.L41:
 337:grbl/gcode.c  **** 				{
 751              		.loc 1 337 0
 752 0420 BAF1000F 		cmp	r10, #0
 753 0424 00F09C81 		beq	.L51
 754 0428 BAF1010F 		cmp	r10, #1
 755 042c 40F09381 		bne	.L542
 756 0430 4FF40063 		mov	r3, #2048
 757 0434 5EE7     		b	.L34
 758              	.LVL51:
 759              	.L45:
 397:grbl/gcode.c  **** 				break;
 760              		.loc 1 397 0
 761 0436 0123     		movs	r3, #1
 762 0438 3373     		strb	r3, [r6, #12]
 398:grbl/gcode.c  **** 			case 63:
 763              		.loc 1 398 0
 764 043a 4FF40043 		mov	r3, #32768
 765 043e 59E7     		b	.L34
 766              	.LVL52:
 767              	.L46:
 401:grbl/gcode.c  **** 				break;
 768              		.loc 1 401 0
 769 0440 0223     		movs	r3, #2
 770 0442 3373     		strb	r3, [r6, #12]
 402:grbl/gcode.c  **** #endif
 771              		.loc 1 402 0
 772 0444 4FF40043 		mov	r3, #32768
 773 0448 54E7     		b	.L34
 774              	.LVL53:
 775              	.L43:
 352:grbl/gcode.c  **** 				{
 776              		.loc 1 352 0
 777 044a BAF1040F 		cmp	r10, #4
 778 044e 00F0AC81 		beq	.L54
 779 0452 BAF1050F 		cmp	r10, #5
 780 0456 40F07981 		bne	.L543
 361:grbl/gcode.c  **** 					break;
 781              		.loc 1 361 0
 782 045a 0023     		movs	r3, #0
 783 045c B372     		strb	r3, [r6, #10]
 362:grbl/gcode.c  **** 				}
 784              		.loc 1 362 0
 785 045e 4FF48053 		mov	r3, #4096
 786 0462 47E7     		b	.L34
 787              	.LVL54:
 788              	.L44:
 373:grbl/gcode.c  **** 				{
 789              		.loc 1 373 0
 790 0464 BAF1080F 		cmp	r10, #8
 791 0468 00F0A481 		beq	.L57
 792 046c BAF1090F 		cmp	r10, #9
 793 0470 40F07B81 		bne	.L544
 384:grbl/gcode.c  **** 					break;
 794              		.loc 1 384 0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 47


 795 0474 0023     		movs	r3, #0
 796 0476 7372     		strb	r3, [r6, #9]
 385:grbl/gcode.c  **** 				}
 797              		.loc 1 385 0
 798 0478 4FF40053 		mov	r3, #8192
 799 047c 3AE7     		b	.L34
 800              	.LVL55:
 801              	.L47:
 407:grbl/gcode.c  **** 				break;
 802              		.loc 1 407 0
 803 047e 0123     		movs	r3, #1
 804 0480 7373     		strb	r3, [r6, #13]
 408:grbl/gcode.c  **** #endif
 805              		.loc 1 408 0
 806 0482 4FF40043 		mov	r3, #32768
 807 0486 35E7     		b	.L34
 808              	.LVL56:
 809              	.L48:
 413:grbl/gcode.c  **** 				break;
 810              		.loc 1 413 0
 811 0488 0123     		movs	r3, #1
 812 048a B373     		strb	r3, [r6, #14]
 414:grbl/gcode.c  **** #endif
 813              		.loc 1 414 0
 814 048c 4FF40043 		mov	r3, #32768
 815 0490 30E7     		b	.L34
 816              	.LVL57:
 817              	.L237:
 165:grbl/gcode.c  **** 			{
 818              		.loc 1 165 0
 819 0492 8023     		movs	r3, #128
 310:grbl/gcode.c  **** 			{
 820              		.loc 1 310 0
 821 0494 0028     		cmp	r0, #0
 822 0496 3FF42DAF 		beq	.L34
 823              	.LVL58:
 824              	.L40:
 312:grbl/gcode.c  **** 			} // [Unsupported or invalid Gxx.x command]
 825              		.loc 1 312 0
 826 049a 1723     		movs	r3, #23
 827 049c 17E7     		b	.L298
 828              	.LVL59:
 829              	.L28:
 231:grbl/gcode.c  **** 				{
 830              		.loc 1 231 0
 831 049e 0028     		cmp	r0, #0
 832 04a0 40F04B81 		bne	.L36
 833              	.LVL60:
 234:grbl/gcode.c  **** 				}
 834              		.loc 1 234 0
 835 04a4 AAF15A0A 		sub	r10, r10, #90
 836              	.LVL61:
 837 04a8 86F804A0 		strb	r10, [r6, #4]
 838              	.LVL62:
 839 04ac 0823     		movs	r3, #8
 840 04ae 21E7     		b	.L34
 841              	.LVL63:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 48


 842              	.L21:
 227:grbl/gcode.c  **** 				break;
 843              		.loc 1 227 0
 844 04b0 AAF1110A 		sub	r10, r10, #17
 845              	.LVL64:
 846 04b4 86F805A0 		strb	r10, [r6, #5]
 228:grbl/gcode.c  **** 			case 90:
 847              		.loc 1 228 0
 848 04b8 0423     		movs	r3, #4
 849              	.LVL65:
 310:grbl/gcode.c  **** 			{
 850              		.loc 1 310 0
 851 04ba 0028     		cmp	r0, #0
 852 04bc 3FF41AAF 		beq	.L34
 853 04c0 EBE7     		b	.L40
 854              	.LVL66:
 855              	.L26:
 300:grbl/gcode.c  **** 				{
 856              		.loc 1 300 0
 857 04c2 0028     		cmp	r0, #0
 858 04c4 7FF402AF 		bne	.L270
 859 04c8 4FF48063 		mov	r3, #1024
 860 04cc 12E7     		b	.L34
 861              	.LVL67:
 862              	.L27:
 211:grbl/gcode.c  **** 				if (int_value == 38)
 863              		.loc 1 211 0
 864 04ce 5023     		movs	r3, #80
 865 04d0 7370     		strb	r3, [r6, #1]
 866 04d2 0223     		movs	r3, #2
 867              	.LVL68:
 310:grbl/gcode.c  **** 			{
 868              		.loc 1 310 0
 869 04d4 0028     		cmp	r0, #0
 870 04d6 3FF40DAF 		beq	.L34
 871 04da DEE7     		b	.L40
 872              	.LVL69:
 873              	.L20:
 173:grbl/gcode.c  **** 				{ // Ignore G28.1, G30.1, and G92.1
 874              		.loc 1 173 0
 875 04dc 0028     		cmp	r0, #0
 876 04de 40F00D81 		bne	.L30
 175:grbl/gcode.c  **** 					{
 877              		.loc 1 175 0
 878 04e2 079B     		ldr	r3, [sp, #28]
 879 04e4 002B     		cmp	r3, #0
 880 04e6 40F0C682 		bne	.L242
 881              	.LVL70:
 186:grbl/gcode.c  **** 				{
 882              		.loc 1 186 0
 883 04ea BAF11C0F 		cmp	r10, #28
 185:grbl/gcode.c  **** 				if ((int_value == 28) || (int_value == 30) || (int_value == 92))
 884              		.loc 1 185 0
 885 04ee 86F800A0 		strb	r10, [r6]
 186:grbl/gcode.c  **** 				{
 886              		.loc 1 186 0
 887 04f2 00F05581 		beq	.L293
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 49


 888 04f6 BAF11E0F 		cmp	r10, #30
 889 04fa 00F05181 		beq	.L293
 179:grbl/gcode.c  **** 				}
 890              		.loc 1 179 0
 891 04fe 0123     		movs	r3, #1
 892 0500 0793     		str	r3, [sp, #28]
 893 0502 03E1     		b	.L232
 894              	.LVL71:
 895              	.L25:
 296:grbl/gcode.c  **** 				break;
 896              		.loc 1 296 0
 897 0504 AAF1360A 		sub	r10, r10, #54
 898              	.LVL72:
 899 0508 86F807A0 		strb	r10, [r6, #7]
 297:grbl/gcode.c  **** 			case 61:
 900              		.loc 1 297 0
 901 050c 4FF40073 		mov	r3, #512
 902              	.LVL73:
 310:grbl/gcode.c  **** 			{
 903              		.loc 1 310 0
 904 0510 0028     		cmp	r0, #0
 905 0512 3FF4EFAE 		beq	.L34
 906 0516 C0E7     		b	.L40
 907              	.LVL74:
 908              	.L29:
 250:grbl/gcode.c  **** 				break;
 909              		.loc 1 250 0
 910 0518 CAF15E0A 		rsb	r10, r10, #94
 911              	.LVL75:
 912 051c 86F802A0 		strb	r10, [r6, #2]
 251:grbl/gcode.c  **** 			case 20:
 913              		.loc 1 251 0
 914 0520 2023     		movs	r3, #32
 915              	.LVL76:
 310:grbl/gcode.c  **** 			{
 916              		.loc 1 310 0
 917 0522 0028     		cmp	r0, #0
 918 0524 3FF4E6AE 		beq	.L34
 919 0528 B7E7     		b	.L40
 920              	.LVL77:
 921              	.L24:
 269:grbl/gcode.c  **** 				{
 922              		.loc 1 269 0
 923 052a 079B     		ldr	r3, [sp, #28]
 924 052c 002B     		cmp	r3, #0
 925 052e 40F0A282 		bne	.L242
 926              	.LVL78:
 274:grbl/gcode.c  **** 				{ // G49
 927              		.loc 1 274 0
 928 0532 BAF1310F 		cmp	r10, #49
 929 0536 00F04281 		beq	.L545
 278:grbl/gcode.c  **** 				{ // G43.1
 930              		.loc 1 278 0
 931 053a 0A28     		cmp	r0, #10
 932 053c 7FF4C6AE 		bne	.L270
 280:grbl/gcode.c  **** 				}
 933              		.loc 1 280 0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 50


 934 0540 0122     		movs	r2, #1
 935 0542 B271     		strb	r2, [r6, #6]
 936              	.LVL79:
 273:grbl/gcode.c  **** 				if (int_value == 49)
 937              		.loc 1 273 0
 938 0544 0322     		movs	r2, #3
 280:grbl/gcode.c  **** 				}
 939              		.loc 1 280 0
 940 0546 4FF48073 		mov	r3, #256
 273:grbl/gcode.c  **** 				if (int_value == 49)
 941              		.loc 1 273 0
 942 054a 0792     		str	r2, [sp, #28]
 943 054c D2E6     		b	.L34
 944              	.LVL80:
 945              	.L22:
 255:grbl/gcode.c  **** 				break;
 946              		.loc 1 255 0
 947 054e CAF1150A 		rsb	r10, r10, #21
 948              	.LVL81:
 949 0552 86F803A0 		strb	r10, [r6, #3]
 256:grbl/gcode.c  **** 			case 40:
 950              		.loc 1 256 0
 951 0556 4023     		movs	r3, #64
 952              	.LVL82:
 310:grbl/gcode.c  **** 			{
 953              		.loc 1 310 0
 954 0558 0028     		cmp	r0, #0
 955 055a 3FF4CBAE 		beq	.L34
 956 055e 9CE7     		b	.L40
 957              	.LVL83:
 958              	.L19:
 186:grbl/gcode.c  **** 				{
 959              		.loc 1 186 0
 960 0560 BAF11C0F 		cmp	r10, #28
 185:grbl/gcode.c  **** 				if ((int_value == 28) || (int_value == 30) || (int_value == 92))
 961              		.loc 1 185 0
 962 0564 86F800A0 		strb	r10, [r6]
 186:grbl/gcode.c  **** 				{
 963              		.loc 1 186 0
 964 0568 00F0D480 		beq	.L32
 186:grbl/gcode.c  **** 				{
 965              		.loc 1 186 0 is_stmt 0 discriminator 1
 966 056c BAF11E0F 		cmp	r10, #30
 967 0570 00F0D080 		beq	.L32
 968              	.LVL84:
 969              	.L239:
 970 0574 0123     		movs	r3, #1
 971              	.LVL85:
 310:grbl/gcode.c  **** 			{
 972              		.loc 1 310 0 is_stmt 1
 973 0576 0028     		cmp	r0, #0
 974 0578 3FF4BCAE 		beq	.L34
 975 057c 8DE7     		b	.L40
 976              	.LVL86:
 977              	.L75:
 554:grbl/gcode.c  **** 				break;
 978              		.loc 1 554 0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 51


 979 057e 069B     		ldr	r3, [sp, #24]
 562:grbl/gcode.c  **** 			{
 980              		.loc 1 562 0
 981 0580 18F4805F 		tst	r8, #4096
 554:grbl/gcode.c  **** 				break;
 982              		.loc 1 554 0
 983 0584 43F00403 		orr	r3, r3, #4
 553:grbl/gcode.c  **** 				axis_words |= (1 << Z_AXIS);
 984              		.loc 1 553 0
 985 0588 C6F840B0 		str	fp, [r6, #64]	@ float
 554:grbl/gcode.c  **** 				break;
 986              		.loc 1 554 0
 987 058c 0693     		str	r3, [sp, #24]
 988              	.LVL87:
 562:grbl/gcode.c  **** 			{
 989              		.loc 1 562 0
 990 058e 40F02281 		bne	.L261
 991 0592 4FF48054 		mov	r4, #4096
 992              	.LVL88:
 993              	.L76:
 576:grbl/gcode.c  **** 
 994              		.loc 1 576 0
 995 0596 48EA0408 		orr	r8, r8, r4
 996              	.LVL89:
 997 059a AFE6     		b	.L39
 998              	.LVL90:
 999              	.L74:
 549:grbl/gcode.c  **** 				break;
 1000              		.loc 1 549 0
 1001 059c 069B     		ldr	r3, [sp, #24]
 562:grbl/gcode.c  **** 			{
 1002              		.loc 1 562 0
 1003 059e 18F4006F 		tst	r8, #2048
 549:grbl/gcode.c  **** 				break;
 1004              		.loc 1 549 0
 1005 05a2 43F00203 		orr	r3, r3, #2
 548:grbl/gcode.c  **** 				axis_words |= (1 << Y_AXIS);
 1006              		.loc 1 548 0
 1007 05a6 C6F83CB0 		str	fp, [r6, #60]	@ float
 549:grbl/gcode.c  **** 				break;
 1008              		.loc 1 549 0
 1009 05aa 0693     		str	r3, [sp, #24]
 1010              	.LVL91:
 562:grbl/gcode.c  **** 			{
 1011              		.loc 1 562 0
 1012 05ac 40F01381 		bne	.L261
 1013 05b0 4FF40064 		mov	r4, #2048
 1014 05b4 EFE7     		b	.L76
 1015              	.LVL92:
 1016              	.L73:
 544:grbl/gcode.c  **** 				break;
 1017              		.loc 1 544 0
 1018 05b6 069B     		ldr	r3, [sp, #24]
 562:grbl/gcode.c  **** 			{
 1019              		.loc 1 562 0
 1020 05b8 18F4806F 		tst	r8, #1024
 544:grbl/gcode.c  **** 				break;
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 52


 1021              		.loc 1 544 0
 1022 05bc 43F00103 		orr	r3, r3, #1
 543:grbl/gcode.c  **** 				axis_words |= (1 << X_AXIS);
 1023              		.loc 1 543 0
 1024 05c0 C6F838B0 		str	fp, [r6, #56]	@ float
 544:grbl/gcode.c  **** 				break;
 1025              		.loc 1 544 0
 1026 05c4 0693     		str	r3, [sp, #24]
 1027              	.LVL93:
 562:grbl/gcode.c  **** 			{
 1028              		.loc 1 562 0
 1029 05c6 40F00681 		bne	.L261
 1030 05ca 4FF48064 		mov	r4, #1024
 1031 05ce E2E7     		b	.L76
 1032              	.LVL94:
 1033              	.L67:
 513:grbl/gcode.c  **** 				break;
 1034              		.loc 1 513 0
 1035 05d0 5846     		mov	r0, fp
 1036              	.LVL95:
 1037 05d2 FFF7FEFF 		bl	__aeabi_f2iz
 1038              	.LVL96:
 562:grbl/gcode.c  **** 			{
 1039              		.loc 1 562 0
 1040 05d6 18F0200F 		tst	r8, #32
 513:grbl/gcode.c  **** 				break;
 1041              		.loc 1 513 0
 1042 05da 7062     		str	r0, [r6, #36]
 1043              	.LVL97:
 562:grbl/gcode.c  **** 			{
 1044              		.loc 1 562 0
 1045 05dc 40F0FB80 		bne	.L261
 1046 05e0 2024     		movs	r4, #32
 1047              	.L77:
 571:grbl/gcode.c  **** 				{
 1048              		.loc 1 571 0
 1049 05e2 5846     		mov	r0, fp
 1050 05e4 0021     		movs	r1, #0
 1051 05e6 FFF7FEFF 		bl	__aeabi_fcmplt
 1052              	.LVL98:
 1053 05ea 0028     		cmp	r0, #0
 1054 05ec D3D0     		beq	.L76
 573:grbl/gcode.c  **** 				} // [Word value cannot be negative]
 1055              		.loc 1 573 0
 1056 05ee 0423     		movs	r3, #4
 1057 05f0 6DE6     		b	.L298
 1058              	.LVL99:
 1059              	.L68:
 562:grbl/gcode.c  **** 			{
 1060              		.loc 1 562 0
 1061 05f2 18F0400F 		tst	r8, #64
 517:grbl/gcode.c  **** 				break;
 1062              		.loc 1 517 0
 1063 05f6 C6F828B0 		str	fp, [r6, #40]	@ float
 1064              	.LVL100:
 562:grbl/gcode.c  **** 			{
 1065              		.loc 1 562 0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 53


 1066 05fa 40F0EC80 		bne	.L261
 1067 05fe 4024     		movs	r4, #64
 1068 0600 EFE7     		b	.L77
 1069              	.LVL101:
 1070              	.L69:
 1071 0602 18F4003F 		tst	r8, #131072
 523:grbl/gcode.c  **** 				break;
 1072              		.loc 1 523 0
 1073 0606 C6F848B0 		str	fp, [r6, #72]	@ float
 1074              	.LVL102:
 562:grbl/gcode.c  **** 			{
 1075              		.loc 1 562 0
 1076 060a 40F0E480 		bne	.L261
 1077 060e 4FF40034 		mov	r4, #131072
 1078 0612 C0E7     		b	.L76
 1079              	.LVL103:
 1080              	.L70:
 1081 0614 18F0800F 		tst	r8, #128
 527:grbl/gcode.c  **** 				break;
 1082              		.loc 1 527 0
 1083 0618 C6F82CB0 		str	fp, [r6, #44]	@ float
 1084              	.LVL104:
 562:grbl/gcode.c  **** 			{
 1085              		.loc 1 562 0
 1086 061c 40F0DB80 		bne	.L261
 1087 0620 8024     		movs	r4, #128
 1088 0622 B8E7     		b	.L76
 1089              	.LVL105:
 1090              	.L71:
 1091 0624 18F4807F 		tst	r8, #256
 531:grbl/gcode.c  **** 				break;
 1092              		.loc 1 531 0
 1093 0628 C6F830B0 		str	fp, [r6, #48]	@ float
 1094              	.LVL106:
 562:grbl/gcode.c  **** 			{
 1095              		.loc 1 562 0
 1096 062c 40F0D380 		bne	.L261
 1097 0630 4FF48074 		mov	r4, #256
 1098 0634 D5E7     		b	.L77
 1099              	.L563:
 1100 0636 00BF     		.align	2
 1101              	.L562:
 1102 0638 80969800 		.word	10000000
 1103 063c 00000000 		.word	gc_state
 1104 0640 2C000000 		.word	gc_state+44
 1105              	.LVL107:
 1106              	.L72:
 535:grbl/gcode.c  **** 				{
 1107              		.loc 1 535 0
 1108 0644 9049     		ldr	r1, .L564+8
 1109 0646 5846     		mov	r0, fp
 1110              	.LVL108:
 1111 0648 FFF7FEFF 		bl	__aeabi_fcmpgt
 1112              	.LVL109:
 1113 064c 0028     		cmp	r0, #0
 1114 064e 40F08583 		bne	.L257
 562:grbl/gcode.c  **** 			{
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 54


 1115              		.loc 1 562 0
 1116 0652 18F4007F 		tst	r8, #512
 539:grbl/gcode.c  **** 				break;
 1117              		.loc 1 539 0
 1118 0656 86F834A0 		strb	r10, [r6, #52]
 1119              	.LVL110:
 562:grbl/gcode.c  **** 			{
 1120              		.loc 1 562 0
 1121 065a 40F0BC80 		bne	.L261
 1122 065e 4FF40074 		mov	r4, #512
 1123 0662 BEE7     		b	.L77
 1124              	.LVL111:
 1125              	.L60:
 1126 0664 18F4803F 		tst	r8, #65536
 485:grbl/gcode.c  **** 				break;
 1127              		.loc 1 485 0
 1128 0668 86F844A0 		strb	r10, [r6, #68]
 1129              	.LVL112:
 562:grbl/gcode.c  **** 			{
 1130              		.loc 1 562 0
 1131 066c 40F0B380 		bne	.L261
 1132 0670 4FF48034 		mov	r4, #65536
 1133 0674 8FE7     		b	.L76
 1134              	.LVL113:
 1135              	.L62:
 1136 0676 18F0010F 		tst	r8, #1
 489:grbl/gcode.c  **** 				break;
 1137              		.loc 1 489 0
 1138 067a C6F810B0 		str	fp, [r6, #16]	@ float
 1139              	.LVL114:
 562:grbl/gcode.c  **** 			{
 1140              		.loc 1 562 0
 1141 067e 40F0AA80 		bne	.L261
 1142 0682 0124     		movs	r4, #1
 1143 0684 ADE7     		b	.L77
 1144              	.LVL115:
 1145              	.L63:
 495:grbl/gcode.c  **** 				break;
 1146              		.loc 1 495 0
 1147 0686 089B     		ldr	r3, [sp, #32]
 562:grbl/gcode.c  **** 			{
 1148              		.loc 1 562 0
 1149 0688 18F0020F 		tst	r8, #2
 495:grbl/gcode.c  **** 				break;
 1150              		.loc 1 495 0
 1151 068c 43F00103 		orr	r3, r3, #1
 494:grbl/gcode.c  **** 				ijk_words |= (1 << X_AXIS);
 1152              		.loc 1 494 0
 1153 0690 C6F814B0 		str	fp, [r6, #20]	@ float
 495:grbl/gcode.c  **** 				break;
 1154              		.loc 1 495 0
 1155 0694 0893     		str	r3, [sp, #32]
 1156              	.LVL116:
 562:grbl/gcode.c  **** 			{
 1157              		.loc 1 562 0
 1158 0696 40F09E80 		bne	.L261
 1159 069a 0224     		movs	r4, #2
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 55


 1160 069c 7BE7     		b	.L76
 1161              	.LVL117:
 1162              	.L64:
 500:grbl/gcode.c  **** 				break;
 1163              		.loc 1 500 0
 1164 069e 089B     		ldr	r3, [sp, #32]
 562:grbl/gcode.c  **** 			{
 1165              		.loc 1 562 0
 1166 06a0 18F0040F 		tst	r8, #4
 500:grbl/gcode.c  **** 				break;
 1167              		.loc 1 500 0
 1168 06a4 43F00203 		orr	r3, r3, #2
 499:grbl/gcode.c  **** 				ijk_words |= (1 << Y_AXIS);
 1169              		.loc 1 499 0
 1170 06a8 C6F818B0 		str	fp, [r6, #24]	@ float
 500:grbl/gcode.c  **** 				break;
 1171              		.loc 1 500 0
 1172 06ac 0893     		str	r3, [sp, #32]
 1173              	.LVL118:
 562:grbl/gcode.c  **** 			{
 1174              		.loc 1 562 0
 1175 06ae 40F09280 		bne	.L261
 1176 06b2 0424     		movs	r4, #4
 1177 06b4 6FE7     		b	.L76
 1178              	.LVL119:
 1179              	.L65:
 505:grbl/gcode.c  **** 				break;
 1180              		.loc 1 505 0
 1181 06b6 089B     		ldr	r3, [sp, #32]
 562:grbl/gcode.c  **** 			{
 1182              		.loc 1 562 0
 1183 06b8 18F0080F 		tst	r8, #8
 505:grbl/gcode.c  **** 				break;
 1184              		.loc 1 505 0
 1185 06bc 43F00403 		orr	r3, r3, #4
 504:grbl/gcode.c  **** 				ijk_words |= (1 << Z_AXIS);
 1186              		.loc 1 504 0
 1187 06c0 C6F81CB0 		str	fp, [r6, #28]	@ float
 505:grbl/gcode.c  **** 				break;
 1188              		.loc 1 505 0
 1189 06c4 0893     		str	r3, [sp, #32]
 1190              	.LVL120:
 562:grbl/gcode.c  **** 			{
 1191              		.loc 1 562 0
 1192 06c6 40F08680 		bne	.L261
 1193 06ca 0824     		movs	r4, #8
 1194 06cc 63E7     		b	.L76
 1195              	.LVL121:
 1196              	.L66:
 1197 06ce 18F0100F 		tst	r8, #16
 509:grbl/gcode.c  **** 				break;
 1198              		.loc 1 509 0
 1199 06d2 86F820A0 		strb	r10, [r6, #32]
 1200              	.LVL122:
 562:grbl/gcode.c  **** 			{
 1201              		.loc 1 562 0
 1202 06d6 7ED1     		bne	.L261
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 56


 1203 06d8 1024     		movs	r4, #16
 1204 06da 5CE7     		b	.L76
 1205              	.LVL123:
 1206              	.L533:
 214:grbl/gcode.c  **** 							|| (mantissa == 50)))
 1207              		.loc 1 214 0
 1208 06dc 6B4A     		ldr	r2, .L564+12
 1209 06de 22FA03F3 		lsr	r3, r2, r3
 1210 06e2 DC07     		lsls	r4, r3, #31
 1211              	.LVL124:
 1212 06e4 7FF5F2AD 		bpl	.L270
 219:grbl/gcode.c  **** 					mantissa = 0; // Set to zero to indicate valid non-integer G command.
 1213              		.loc 1 219 0
 1214 06e8 0222     		movs	r2, #2
 1215 06ea 694B     		ldr	r3, .L564+16
 1216 06ec 0792     		str	r2, [sp, #28]
 1217 06ee A3FB0013 		umull	r1, r3, r3, r0
 1218 06f2 DB08     		lsrs	r3, r3, #3
 1219 06f4 763B     		subs	r3, r3, #118
 1220 06f6 7370     		strb	r3, [r6, #1]
 1221              	.LVL125:
 207:grbl/gcode.c  **** 				// No break. Continues to next line.
 1222              		.loc 1 207 0
 1223 06f8 1346     		mov	r3, r2
 1224 06fa FBE5     		b	.L34
 1225              	.LVL126:
 1226              	.L30:
 186:grbl/gcode.c  **** 				{
 1227              		.loc 1 186 0
 1228 06fc BAF11C0F 		cmp	r10, #28
 185:grbl/gcode.c  **** 				if ((int_value == 28) || (int_value == 30) || (int_value == 92))
 1229              		.loc 1 185 0
 1230 0700 86F800A0 		strb	r10, [r6]
 186:grbl/gcode.c  **** 				{
 1231              		.loc 1 186 0
 1232 0704 07D0     		beq	.L229
 1233 0706 BAF11E0F 		cmp	r10, #30
 1234 070a 04D0     		beq	.L229
 1235              	.LVL127:
 1236              	.L232:
 186:grbl/gcode.c  **** 				{
 1237              		.loc 1 186 0 is_stmt 0 discriminator 2
 1238 070c BAF15C0F 		cmp	r10, #92
 1239 0710 7FF430AF 		bne	.L239
 1240              	.L32:
 188:grbl/gcode.c  **** 					{
 1241              		.loc 1 188 0 is_stmt 1
 1242 0714 10B1     		cbz	r0, .L33
 1243              	.L229:
 188:grbl/gcode.c  **** 					{
 1244              		.loc 1 188 0 is_stmt 0 discriminator 1
 1245 0716 0A28     		cmp	r0, #10
 1246 0718 7FF4D8AD 		bne	.L270
 1247              	.L33:
 192:grbl/gcode.c  **** 					mantissa = 0; // Set to zero to indicate valid non-integer G command.
 1248              		.loc 1 192 0 is_stmt 1
 1249 071c 8244     		add	r10, r10, r0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 57


 1250              	.LVL128:
 1251 071e 86F800A0 		strb	r10, [r6]
 1252              	.LVL129:
 1253 0722 0123     		movs	r3, #1
 1254 0724 E6E5     		b	.L34
 1255              	.LVL130:
 1256              	.L234:
 136:grbl/gcode.c  **** 		} // [Expected word letter]
 1257              		.loc 1 136 0
 1258 0726 0123     		movs	r3, #1
 1259              		.loc 1 1757 0
 1260 0728 1846     		mov	r0, r3
 1261 072a 19B0     		add	sp, sp, #100
 1262              	.LCFI6:
 1263              		.cfi_remember_state
 1264              		.cfi_def_cfa_offset 36
 1265              		@ sp needed
 1266 072c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1267              	.LVL131:
 1268              	.L235:
 1269              	.LCFI7:
 1270              		.cfi_restore_state
 141:grbl/gcode.c  **** 		} // [Expected word value]
 1271              		.loc 1 141 0
 1272 0730 0223     		movs	r3, #2
 1273              		.loc 1 1757 0
 1274 0732 1846     		mov	r0, r3
 1275 0734 19B0     		add	sp, sp, #100
 1276              	.LCFI8:
 1277              		.cfi_remember_state
 1278              		.cfi_def_cfa_offset 36
 1279              		@ sp needed
 1280 0736 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1281              	.LVL132:
 1282              	.L36:
 1283              	.LCFI9:
 1284              		.cfi_restore_state
 239:grbl/gcode.c  **** 					{
 1285              		.loc 1 239 0
 1286 073a 0A28     		cmp	r0, #10
 1287 073c 7FF4C6AD 		bne	.L270
 239:grbl/gcode.c  **** 					{
 1288              		.loc 1 239 0 is_stmt 0 discriminator 1
 1289 0740 BAF15A0F 		cmp	r10, #90
 1290 0744 3FF4C2AD 		beq	.L270
 1291 0748 1023     		movs	r3, #16
 1292 074a D3E5     		b	.L34
 1293              	.LVL133:
 1294              	.L543:
 355:grbl/gcode.c  **** 					break;
 1295              		.loc 1 355 0 is_stmt 1
 1296 074c 1023     		movs	r3, #16
 1297 074e B372     		strb	r3, [r6, #10]
 356:grbl/gcode.c  **** 				case 4:
 1298              		.loc 1 356 0
 1299 0750 4FF48053 		mov	r3, #4096
 1300 0754 CEE5     		b	.L34
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 58


 1301              	.LVL134:
 1302              	.L542:
 345:grbl/gcode.c  **** 				}
 1303              		.loc 1 345 0
 1304 0756 86F808A0 		strb	r10, [r6, #8]
 1305 075a 4FF40063 		mov	r3, #2048
 1306 075e C9E5     		b	.L34
 1307              	.L51:
 340:grbl/gcode.c  **** 					break; // Program pause
 1308              		.loc 1 340 0
 1309 0760 0323     		movs	r3, #3
 1310 0762 3372     		strb	r3, [r6, #8]
 341:grbl/gcode.c  **** 				case 1:
 1311              		.loc 1 341 0
 1312 0764 4FF40063 		mov	r3, #2048
 1313 0768 C4E5     		b	.L34
 1314              	.LVL135:
 1315              	.L544:
 377:grbl/gcode.c  **** 					break;
 1316              		.loc 1 377 0
 1317 076a 8023     		movs	r3, #128
 1318 076c 7372     		strb	r3, [r6, #9]
 378:grbl/gcode.c  **** #endif
 1319              		.loc 1 378 0
 1320 076e 4FF40053 		mov	r3, #8192
 1321 0772 BFE5     		b	.L34
 1322              	.LVL136:
 1323              	.L534:
 318:grbl/gcode.c  **** 			}
 1324              		.loc 1 318 0
 1325 0774 1523     		movs	r3, #21
 1326 0776 AAE5     		b	.L298
 1327              	.LVL137:
 1328              	.L535:
 644:grbl/gcode.c  **** 		{
 1329              		.loc 1 644 0
 1330 0778 18F0010F 		tst	r8, #1
 1331 077c 00F06B81 		beq	.L275
 1332              	.L529:
 689:grbl/gcode.c  **** 					{
 1333              		.loc 1 689 0
 1334 0780 F378     		ldrb	r3, [r6, #3]	@ zero_extendqisi2
 1335 0782 012B     		cmp	r3, #1
 1336 0784 7FF4E1AD 		bne	.L83
 691:grbl/gcode.c  **** 					}
 1337              		.loc 1 691 0
 1338 0788 3069     		ldr	r0, [r6, #16]	@ float
 1339 078a FFF7FEFF 		bl	__aeabi_f2d
 1340              	.LVL138:
 1341 078e 3CA3     		adr	r3, .L564
 1342 0790 D3E90023 		ldrd	r2, [r3]
 1343 0794 FFF7FEFF 		bl	__aeabi_dmul
 1344              	.LVL139:
 1345 0798 FFF7FEFF 		bl	__aeabi_d2f
 1346              	.LVL140:
 1347 079c 3061     		str	r0, [r6, #16]	@ float
 1348 079e D4E5     		b	.L83
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 59


 1349              	.LVL141:
 1350              	.L293:
 179:grbl/gcode.c  **** 				}
 1351              		.loc 1 179 0
 1352 07a0 0123     		movs	r3, #1
 1353 07a2 0793     		str	r3, [sp, #28]
 1354 07a4 BAE7     		b	.L33
 1355              	.LVL142:
 1356              	.L264:
 625:grbl/gcode.c  **** 		} // [Exceeds max line number]
 1357              		.loc 1 625 0
 1358 07a6 1B23     		movs	r3, #27
 1359 07a8 91E5     		b	.L298
 1360              	.LVL143:
 1361              	.L54:
 358:grbl/gcode.c  **** 					break;
 1362              		.loc 1 358 0
 1363 07aa 2023     		movs	r3, #32
 1364 07ac B372     		strb	r3, [r6, #10]
 359:grbl/gcode.c  **** 				case 5:
 1365              		.loc 1 359 0
 1366 07ae 4FF48053 		mov	r3, #4096
 1367 07b2 9FE5     		b	.L34
 1368              	.LVL144:
 1369              	.L57:
 381:grbl/gcode.c  **** 					break;
 1370              		.loc 1 381 0
 1371 07b4 4023     		movs	r3, #64
 1372 07b6 7372     		strb	r3, [r6, #9]
 382:grbl/gcode.c  **** 				case 9:
 1373              		.loc 1 382 0
 1374 07b8 4FF40053 		mov	r3, #8192
 1375 07bc 9AE5     		b	.L34
 1376              	.LVL145:
 1377              	.L545:
 273:grbl/gcode.c  **** 				if (int_value == 49)
 1378              		.loc 1 273 0
 1379 07be 0322     		movs	r2, #3
 276:grbl/gcode.c  **** 				}
 1380              		.loc 1 276 0
 1381 07c0 B371     		strb	r3, [r6, #6]
 1382              	.LVL146:
 273:grbl/gcode.c  **** 				if (int_value == 49)
 1383              		.loc 1 273 0
 1384 07c2 0792     		str	r2, [sp, #28]
 276:grbl/gcode.c  **** 				}
 1385              		.loc 1 276 0
 1386 07c4 4FF48073 		mov	r3, #256
 1387 07c8 94E5     		b	.L34
 1388              	.LVL147:
 1389              	.L241:
 1390 07ca 0223     		movs	r3, #2
 1391 07cc 0793     		str	r3, [sp, #28]
 1392              	.LVL148:
 310:grbl/gcode.c  **** 			{
 1393              		.loc 1 310 0
 1394 07ce 0028     		cmp	r0, #0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 60


 1395 07d0 3FF490AD 		beq	.L34
 1396 07d4 61E6     		b	.L40
 1397              	.LVL149:
 1398              	.L261:
 564:grbl/gcode.c  **** 			} // [Word repeated]
 1399              		.loc 1 564 0
 1400 07d6 1923     		movs	r3, #25
 1401 07d8 79E5     		b	.L298
 1402              	.LVL150:
 1403              	.L537:
 732:grbl/gcode.c  **** 		{
 1404              		.loc 1 732 0
 1405 07da 18F0400F 		tst	r8, #64
 1406 07de 38D0     		beq	.L285
 736:grbl/gcode.c  **** 	}
 1407              		.loc 1 736 0
 1408 07e0 28F04008 		bic	r8, r8, #64
 1409              	.LVL151:
 1410 07e4 BBE5     		b	.L87
 1411              	.LVL152:
 1412              	.L540:
 784:grbl/gcode.c  **** 		{
 1413              		.loc 1 784 0
 1414 07e6 B379     		ldrb	r3, [r6, #6]	@ zero_extendqisi2
 1415 07e8 012B     		cmp	r3, #1
 1416 07ea 7FF4D0AD 		bne	.L96
 786:grbl/gcode.c  **** 			{
 1417              		.loc 1 786 0
 1418 07ee 069B     		ldr	r3, [sp, #24]
 1419 07f0 042B     		cmp	r3, #4
 1420 07f2 3FF4CCAD 		beq	.L96
 788:grbl/gcode.c  **** 			}
 1421              		.loc 1 788 0
 1422 07f6 2523     		movs	r3, #37
 1423 07f8 69E5     		b	.L298
 1424              	.L539:
 1425              	.LVL153:
 765:grbl/gcode.c  **** 			{
 1426              		.loc 1 765 0
 1427 07fa 069B     		ldr	r3, [sp, #24]
 1428 07fc D907     		lsls	r1, r3, #31
 1429 07fe 0BD5     		bpl	.L93
 767:grbl/gcode.c  **** 			}
 1430              		.loc 1 767 0
 1431 0800 B06B     		ldr	r0, [r6, #56]	@ float
 1432 0802 FFF7FEFF 		bl	__aeabi_f2d
 1433              	.LVL154:
 1434 0806 1EA3     		adr	r3, .L564
 1435 0808 D3E90023 		ldrd	r2, [r3]
 1436 080c FFF7FEFF 		bl	__aeabi_dmul
 1437              	.LVL155:
 1438 0810 FFF7FEFF 		bl	__aeabi_d2f
 1439              	.LVL156:
 1440 0814 069B     		ldr	r3, [sp, #24]
 1441 0816 B063     		str	r0, [r6, #56]	@ float
 1442              	.L93:
 1443              	.LVL157:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 61


 765:grbl/gcode.c  **** 			{
 1444              		.loc 1 765 0
 1445 0818 9A07     		lsls	r2, r3, #30
 1446 081a 0BD5     		bpl	.L94
 767:grbl/gcode.c  **** 			}
 1447              		.loc 1 767 0
 1448 081c F06B     		ldr	r0, [r6, #60]	@ float
 1449 081e FFF7FEFF 		bl	__aeabi_f2d
 1450              	.LVL158:
 1451 0822 17A3     		adr	r3, .L564
 1452 0824 D3E90023 		ldrd	r2, [r3]
 1453 0828 FFF7FEFF 		bl	__aeabi_dmul
 1454              	.LVL159:
 1455 082c FFF7FEFF 		bl	__aeabi_d2f
 1456              	.LVL160:
 1457 0830 069B     		ldr	r3, [sp, #24]
 1458 0832 F063     		str	r0, [r6, #60]	@ float
 1459              	.L94:
 1460              	.LVL161:
 765:grbl/gcode.c  **** 			{
 1461              		.loc 1 765 0
 1462 0834 5B07     		lsls	r3, r3, #29
 1463 0836 7FF5A6AD 		bpl	.L92
 767:grbl/gcode.c  **** 			}
 1464              		.loc 1 767 0
 1465 083a 306C     		ldr	r0, [r6, #64]	@ float
 1466 083c FFF7FEFF 		bl	__aeabi_f2d
 1467              	.LVL162:
 1468 0840 0FA3     		adr	r3, .L564
 1469 0842 D3E90023 		ldrd	r2, [r3]
 1470 0846 FFF7FEFF 		bl	__aeabi_dmul
 1471              	.LVL163:
 1472 084a FFF7FEFF 		bl	__aeabi_d2f
 1473              	.LVL164:
 1474 084e 3064     		str	r0, [r6, #64]	@ float
 1475              	.LVL165:
 1476 0850 99E5     		b	.L92
 1477              	.LVL166:
 1478              	.L285:
1303:grbl/gcode.c  **** 		} // [P word missing] need P value for M62,M63
 1479              		.loc 1 1303 0
 1480 0852 1C23     		movs	r3, #28
 1481 0854 3BE5     		b	.L298
 1482              	.LVL167:
 1483              	.L538:
 753:grbl/gcode.c  **** 		axis_1 = Z_AXIS;
 1484              		.loc 1 753 0
 1485 0856 4FF0010A 		mov	r10, #1
 1486 085a 4FF00209 		mov	r9, #2
 755:grbl/gcode.c  **** 	}
 1487              		.loc 1 755 0
 1488 085e 0023     		movs	r3, #0
 753:grbl/gcode.c  **** 		axis_1 = Z_AXIS;
 1489              		.loc 1 753 0
 1490 0860 CDE90CA9 		strd	r10, r9, [sp, #48]
 752:grbl/gcode.c  **** 		axis_0 = Y_AXIS;
 1491              		.loc 1 752 0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 62


 1492 0864 0625     		movs	r5, #6
 1493              	.LVL168:
 755:grbl/gcode.c  **** 	}
 1494              		.loc 1 755 0
 1495 0866 0E93     		str	r3, [sp, #56]
 1496 0868 89E5     		b	.L91
 1497              	.LVL169:
 1498              	.L90:
 740:grbl/gcode.c  **** 	{
 1499              		.loc 1 740 0
 1500 086a 4FF00109 		mov	r9, #1
 1501 086e 9A46     		mov	r10, r3
 744:grbl/gcode.c  **** 		axis_linear = Z_AXIS;
 1502              		.loc 1 744 0
 1503 0870 CDE90C39 		strd	r3, r9, [sp, #48]
 745:grbl/gcode.c  **** 		break;
 1504              		.loc 1 745 0
 1505 0874 0223     		movs	r3, #2
 740:grbl/gcode.c  **** 	{
 1506              		.loc 1 740 0
 1507 0876 0325     		movs	r5, #3
 1508              	.LVL170:
 745:grbl/gcode.c  **** 		break;
 1509              		.loc 1 745 0
 1510 0878 0E93     		str	r3, [sp, #56]
 1511 087a 80E5     		b	.L91
 1512              	.L565:
 1513 087c AFF30080 		.align	3
 1514              	.L564:
 1515 0880 66666666 		.word	1717986918
 1516 0884 66663940 		.word	1077503590
 1517 0888 00007F43 		.word	1132396544
 1518 088c 01041040 		.word	1074791425
 1519 0890 CDCCCCCC 		.word	-858993459
 1520              	.LVL171:
 1521              	.L541:
 937:grbl/gcode.c  **** 		{ // TLO block any axis command.
 1522              		.loc 1 937 0
 1523 0894 079B     		ldr	r3, [sp, #28]
 1524 0896 032B     		cmp	r3, #3
 1525 0898 21D0     		beq	.L144
 939:grbl/gcode.c  **** 			{
 1526              		.loc 1 939 0
 1527 089a 069A     		ldr	r2, [sp, #24]
 1528 089c FAB1     		cbz	r2, .L144
 1529 089e 3379     		ldrb	r3, [r6, #4]	@ zero_extendqisi2
 1530 08a0 002B     		cmp	r3, #0
 1531 08a2 00F05381 		beq	.L125
 1532              	.LVL172:
 943:grbl/gcode.c  **** 					{
 1533              		.loc 1 943 0
 1534 08a6 D007     		lsls	r0, r2, #31
 1535 08a8 00F19A82 		bmi	.L126
 945:grbl/gcode.c  **** 					}
 1536              		.loc 1 945 0
 1537 08ac A04B     		ldr	r3, .L566
 943:grbl/gcode.c  **** 					{
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 63


 1538              		.loc 1 943 0
 1539 08ae 9107     		lsls	r1, r2, #30
 945:grbl/gcode.c  **** 					}
 1540              		.loc 1 945 0
 1541 08b0 1B6A     		ldr	r3, [r3, #32]	@ float
 1542 08b2 B363     		str	r3, [r6, #56]	@ float
 1543              	.LVL173:
 943:grbl/gcode.c  **** 					{
 1544              		.loc 1 943 0
 1545 08b4 40F1A182 		bpl	.L127
 951:grbl/gcode.c  **** 						{
 1546              		.loc 1 951 0
 1547 08b8 352C     		cmp	r4, #53
 1548 08ba 00F00881 		beq	.L133
 1549              	.L130:
 965:grbl/gcode.c  **** 							}
 1550              		.loc 1 965 0
 1551 08be 9C4B     		ldr	r3, .L566
 1552 08c0 F16B     		ldr	r1, [r6, #60]	@ float
 1553 08c2 586A     		ldr	r0, [r3, #36]	@ float
 1554 08c4 FFF7FEFF 		bl	__aeabi_fadd
 1555              	.LVL174:
 943:grbl/gcode.c  **** 					{
 1556              		.loc 1 943 0
 1557 08c8 069B     		ldr	r3, [sp, #24]
 965:grbl/gcode.c  **** 							}
 1558              		.loc 1 965 0
 1559 08ca F063     		str	r0, [r6, #60]	@ float
 1560              	.LVL175:
 943:grbl/gcode.c  **** 					{
 1561              		.loc 1 943 0
 1562 08cc 5807     		lsls	r0, r3, #29
 1563 08ce 40F12B81 		bpl	.L524
 1564              	.L134:
 965:grbl/gcode.c  **** 							}
 1565              		.loc 1 965 0
 1566 08d2 974B     		ldr	r3, .L566
 1567 08d4 316C     		ldr	r1, [r6, #64]	@ float
 1568 08d6 986A     		ldr	r0, [r3, #40]	@ float
 1569 08d8 FFF7FEFF 		bl	__aeabi_fadd
 1570              	.LVL176:
 1571 08dc 3064     		str	r0, [r6, #64]	@ float
 1572              	.LVL177:
 1573              	.L144:
 974:grbl/gcode.c  **** 		{
 1574              		.loc 1 974 0
 1575 08de 1E2C     		cmp	r4, #30
 1576 08e0 00F01481 		beq	.L146
 1577 08e4 352C     		cmp	r4, #53
 1578 08e6 00F0F580 		beq	.L147
 1579 08ea 1C2C     		cmp	r4, #28
 1580 08ec 00F0F980 		beq	.L297
 1581 08f0 7478     		ldrb	r4, [r6, #1]	@ zero_extendqisi2
1032:grbl/gcode.c  **** 	{
 1582              		.loc 1 1032 0
 1583 08f2 502C     		cmp	r4, #80
 1584 08f4 40F0F280 		bne	.L525
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 64


1036:grbl/gcode.c  **** 		{
 1585              		.loc 1 1036 0
 1586 08f8 069B     		ldr	r3, [sp, #24]
 1587 08fa 002B     		cmp	r3, #0
 1588 08fc 7FF48EAD 		bne	.L294
 1589 0900 099A     		ldr	r2, [sp, #36]
 1590 0902 0F93     		str	r3, [sp, #60]
 1591              	.LVL178:
 1592              	.L152:
1284:grbl/gcode.c  **** 	{
 1593              		.loc 1 1284 0
 1594 0904 002A     		cmp	r2, #0
 1595 0906 00F0AF80 		beq	.L176
1287:grbl/gcode.c  **** 	}
 1596              		.loc 1 1287 0
 1597 090a 28F02103 		bic	r3, r8, #33
 1598              	.LVL179:
 1599              	.L177:
1293:grbl/gcode.c  **** 	{
 1600              		.loc 1 1293 0
 1601 090e 0799     		ldr	r1, [sp, #28]
 1602 0910 09B1     		cbz	r1, .L178
1295:grbl/gcode.c  **** 				(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A)|bit(WORD_B)|bit(WORD_C)));
 1603              		.loc 1 1295 0
 1604 0912 23F47C43 		bic	r3, r3, #64512
 1605              	.LVL180:
 1606              	.L178:
1299:grbl/gcode.c  **** 	{
 1607              		.loc 1 1299 0
 1608 0916 317B     		ldrb	r1, [r6, #12]	@ zero_extendqisi2
 1609 0918 19B1     		cbz	r1, .L179
1301:grbl/gcode.c  **** 		{
 1610              		.loc 1 1301 0
 1611 091a 5D06     		lsls	r5, r3, #25
 1612 091c 99D5     		bpl	.L285
1305:grbl/gcode.c  **** 	}
 1613              		.loc 1 1305 0
 1614 091e 23F04003 		bic	r3, r3, #64
 1615              	.LVL181:
 1616              	.L179:
1307:grbl/gcode.c  **** 	{
 1617              		.loc 1 1307 0
 1618 0922 717B     		ldrb	r1, [r6, #13]	@ zero_extendqisi2
 1619 0924 39B1     		cbz	r1, .L180
1309:grbl/gcode.c  **** 		{
 1620              		.loc 1 1309 0
 1621 0926 8349     		ldr	r1, .L566+4
 1622 0928 1940     		ands	r1, r1, r3
 1623 092a 0029     		cmp	r1, #0
 1624 092c 91D0     		beq	.L285
1313:grbl/gcode.c  **** 	}
 1625              		.loc 1 1313 0
 1626 092e 23F40033 		bic	r3, r3, #131072
 1627              	.LVL182:
 1628 0932 23F05003 		bic	r3, r3, #80
 1629              	.LVL183:
 1630              	.L180:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 65


1315:grbl/gcode.c  **** 	{
 1631              		.loc 1 1315 0
 1632 0936 B17B     		ldrb	r1, [r6, #14]	@ zero_extendqisi2
 1633 0938 21B1     		cbz	r1, .L181
1317:grbl/gcode.c  **** 		{
 1634              		.loc 1 1317 0
 1635 093a 13F4403F 		tst	r3, #196608
 1636 093e 88D0     		beq	.L285
1321:grbl/gcode.c  **** 	}
 1637              		.loc 1 1321 0
 1638 0940 23F44033 		bic	r3, r3, #196608
 1639              	.LVL184:
 1640              	.L181:
1323:grbl/gcode.c  **** 	{
 1641              		.loc 1 1323 0
 1642 0944 F17B     		ldrb	r1, [r6, #15]	@ zero_extendqisi2
 1643 0946 39B1     		cbz	r1, .L182
1325:grbl/gcode.c  **** 		{
 1644              		.loc 1 1325 0
 1645 0948 7B49     		ldr	r1, .L566+8
 1646 094a 1940     		ands	r1, r1, r3
 1647 094c 0029     		cmp	r1, #0
 1648 094e 80D0     		beq	.L285
1329:grbl/gcode.c  **** 	}
 1649              		.loc 1 1329 0
 1650 0950 23F40033 		bic	r3, r3, #131072
 1651              	.LVL185:
 1652 0954 23F04003 		bic	r3, r3, #64
 1653              	.LVL186:
 1654              	.L182:
1332:grbl/gcode.c  **** 	{
 1655              		.loc 1 1332 0
 1656 0958 002B     		cmp	r3, #0
 1657 095a 40F0D480 		bne	.L286
 1658              	.LVL187:
1346:grbl/gcode.c  **** 
 1659              		.loc 1 1346 0
 1660 095e CDE91533 		strd	r3, r3, [sp, #84]
 1661 0962 1793     		str	r3, [sp, #92]
1352:grbl/gcode.c  **** 	{
 1662              		.loc 1 1352 0
 1663 0964 002A     		cmp	r2, #0
 1664 0966 00F02281 		beq	.L183
 1665              	.LBB9:
1356:grbl/gcode.c  **** 				& ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0))))
 1666              		.loc 1 1356 0
 1667 096a 37F04903 		bics	r3, r7, #73
 1668              	.LVL188:
 1669 096e 40F02682 		bne	.L288
1361:grbl/gcode.c  **** 				|| gc_block.non_modal_command == NON_MODAL_NO_ACTION))
 1670              		.loc 1 1361 0
 1671 0972 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 1672 0974 352B     		cmp	r3, #53
 1673 0976 02D0     		beq	.L184
1361:grbl/gcode.c  **** 				|| gc_block.non_modal_command == NON_MODAL_NO_ACTION))
 1674              		.loc 1 1361 0 is_stmt 0 discriminator 1
 1675 0978 002B     		cmp	r3, #0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 66


 1676 097a 40F02082 		bne	.L288
 1677              	.L184:
1369:grbl/gcode.c  **** 
 1678              		.loc 1 1369 0 is_stmt 1
 1679 097e 6C4A     		ldr	r2, .L566
1371:grbl/gcode.c  **** 		if (status == STATUS_OK)
 1680              		.loc 1 1371 0
 1681 0980 15A8     		add	r0, sp, #84
 1682              	.LVL189:
1369:grbl/gcode.c  **** 
 1683              		.loc 1 1369 0
 1684 0982 117A     		ldrb	r1, [r2, #8]	@ zero_extendqisi2
 1685 0984 537A     		ldrb	r3, [r2, #9]	@ zero_extendqisi2
1368:grbl/gcode.c  **** 		plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 1686              		.loc 1 1368 0
 1687 0986 1269     		ldr	r2, [r2, #16]	@ float
1369:grbl/gcode.c  **** 
 1688              		.loc 1 1369 0
 1689 0988 0B43     		orrs	r3, r3, r1
1371:grbl/gcode.c  **** 		if (status == STATUS_OK)
 1690              		.loc 1 1371 0
 1691 098a 6C49     		ldr	r1, .L566+12
1369:grbl/gcode.c  **** 
 1692              		.loc 1 1369 0
 1693 098c 8DF85C30 		strb	r3, [sp, #92]
1368:grbl/gcode.c  **** 		plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 1694              		.loc 1 1368 0
 1695 0990 1692     		str	r2, [sp, #88]	@ float
1371:grbl/gcode.c  **** 		if (status == STATUS_OK)
 1696              		.loc 1 1371 0
 1697 0992 FFF7FEFF 		bl	jog_execute
 1698              	.LVL190:
1372:grbl/gcode.c  **** 		{
 1699              		.loc 1 1372 0
 1700 0996 0346     		mov	r3, r0
 1701 0998 0028     		cmp	r0, #0
 1702 099a 7FF498AC 		bne	.L298
1374:grbl/gcode.c  **** 					sizeof(gc_block.values.xyz));
 1703              		.loc 1 1374 0
 1704 099e 684A     		ldr	r2, .L566+16
 1705 09a0 684C     		ldr	r4, .L566+20
 1706 09a2 07CA     		ldm	r2, {r0, r1, r2}
 1707              	.LVL191:
 1708 09a4 84E80700 		stm	r4, {r0, r1, r2}
 1709 09a8 91E4     		b	.L298
 1710              	.LVL192:
 1711              	.L101:
 1712              	.LBE9:
 832:grbl/gcode.c  **** 		{
 1713              		.loc 1 832 0
 1714 09aa 069B     		ldr	r3, [sp, #24]
 1715 09ac 002B     		cmp	r3, #0
 1716 09ae 60D0     		beq	.L118
 837:grbl/gcode.c  **** 		{
 1717              		.loc 1 837 0
 1718 09b0 18F0500F 		tst	r8, #80
 1719 09b4 3FF44DAF 		beq	.L285
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 67


 841:grbl/gcode.c  **** 		if (coord_select > N_COORDINATE_SYSTEM)
 1720              		.loc 1 841 0
 1721 09b8 B06A     		ldr	r0, [r6, #40]	@ float
 1722 09ba FFF7FEFF 		bl	__aeabi_f2d
 1723              	.LVL193:
 1724 09be FFF7FEFF 		bl	trunc
 1725              	.LVL194:
 1726 09c2 FFF7FEFF 		bl	__aeabi_d2uiz
 1727              	.LVL195:
 1728 09c6 C0B2     		uxtb	r0, r0
 1729              	.LVL196:
 842:grbl/gcode.c  **** 		{
 1730              		.loc 1 842 0
 1731 09c8 0628     		cmp	r0, #6
 1732 09ca 46D8     		bhi	.L105
 846:grbl/gcode.c  **** 		{
 1733              		.loc 1 846 0
 1734 09cc 96F82030 		ldrb	r3, [r6, #32]	@ zero_extendqisi2
 1735 09d0 142B     		cmp	r3, #20
 1736 09d2 06D0     		beq	.L106
 848:grbl/gcode.c  **** 			{
 1737              		.loc 1 848 0
 1738 09d4 022B     		cmp	r3, #2
 1739 09d6 7FF479AC 		bne	.L270
 850:grbl/gcode.c  **** 				{
 1740              		.loc 1 850 0
 1741 09da 18F0800F 		tst	r8, #128
 1742 09de 7FF475AC 		bne	.L270
 1743              	.L106:
 1744              	.LVL197:
 863:grbl/gcode.c  **** 		{
 1745              		.loc 1 863 0
 1746 09e2 0028     		cmp	r0, #0
 1747 09e4 00F0E281 		beq	.L107
 865:grbl/gcode.c  **** 		} // Adjust P1-P6 index to EEPROM coordinate data indexing.
 1748              		.loc 1 865 0
 1749 09e8 0138     		subs	r0, r0, #1
 1750              	.LVL198:
 1751 09ea C3B2     		uxtb	r3, r0
 1752 09ec 1846     		mov	r0, r3
 1753              	.LVL199:
 1754 09ee 0F93     		str	r3, [sp, #60]
 1755              	.LVL200:
 1756              	.L108:
 873:grbl/gcode.c  **** 		{
 1757              		.loc 1 873 0
 1758 09f0 5549     		ldr	r1, .L566+24
 1759 09f2 FFF7FEFF 		bl	settings_read_coord_data
 1760              	.LVL201:
 1761 09f6 0028     		cmp	r0, #0
 1762 09f8 78D0     		beq	.L290
 1763 09fa 96F82030 		ldrb	r3, [r6, #32]	@ zero_extendqisi2
 860:grbl/gcode.c  **** 
 1764              		.loc 1 860 0
 1765 09fe 28F05008 		bic	r8, r8, #80
 1766              	.LVL202:
 1767 0a02 142B     		cmp	r3, #20
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 68


 882:grbl/gcode.c  **** 			{
 1768              		.loc 1 882 0
 1769 0a04 069B     		ldr	r3, [sp, #24]
 1770 0a06 00F0BF82 		beq	.L110
 1771              	.LVL203:
 1772 0a0a D907     		lsls	r1, r3, #31
 1773 0a0c 02D5     		bpl	.L111
 898:grbl/gcode.c  **** 				}
 1774              		.loc 1 898 0
 1775 0a0e B36B     		ldr	r3, [r6, #56]	@ float
 1776 0a10 7361     		str	r3, [r6, #20]	@ float
 1777 0a12 069B     		ldr	r3, [sp, #24]
 1778              	.L111:
 1779              	.LVL204:
 882:grbl/gcode.c  **** 			{
 1780              		.loc 1 882 0
 1781 0a14 9A07     		lsls	r2, r3, #30
 1782 0a16 02D5     		bpl	.L112
 898:grbl/gcode.c  **** 				}
 1783              		.loc 1 898 0
 1784 0a18 F36B     		ldr	r3, [r6, #60]	@ float
 1785 0a1a B361     		str	r3, [r6, #24]	@ float
 1786 0a1c 069B     		ldr	r3, [sp, #24]
 1787              	.L112:
 1788              	.LVL205:
 882:grbl/gcode.c  **** 			{
 1789              		.loc 1 882 0
 1790 0a1e 5C07     		lsls	r4, r3, #29
 1791 0a20 01D5     		bpl	.L114
 898:grbl/gcode.c  **** 				}
 1792              		.loc 1 898 0
 1793 0a22 336C     		ldr	r3, [r6, #64]	@ float
 1794 0a24 F361     		str	r3, [r6, #28]	@ float
 1795              	.LVL206:
 1796              	.L114:
1032:grbl/gcode.c  **** 	{
 1797              		.loc 1 1032 0
 1798 0a26 7478     		ldrb	r4, [r6, #1]	@ zero_extendqisi2
 1799 0a28 502C     		cmp	r4, #80
 1800 0a2a 3FF4F7AC 		beq	.L294
 1801              	.LVL207:
 1802              	.L149:
1044:grbl/gcode.c  **** 	{
 1803              		.loc 1 1044 0
 1804 0a2e 079B     		ldr	r3, [sp, #28]
 1805 0a30 022B     		cmp	r3, #2
 1806 0a32 2CD0     		beq	.L546
 1807              	.L276:
1067:grbl/gcode.c  **** 			{
 1808              		.loc 1 1067 0
 1809 0a34 099A     		ldr	r2, [sp, #36]
 1810 0a36 65E7     		b	.L152
 1811              	.LVL208:
 1812              	.L536:
 658:grbl/gcode.c  **** 			{
 1813              		.loc 1 658 0
 1814 0a38 079B     		ldr	r3, [sp, #28]
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 69


 1815 0a3a 022B     		cmp	r3, #2
 1816 0a3c 7FF485AC 		bne	.L83
 660:grbl/gcode.c  **** 						&& (gc_block.modal.motion != MOTION_MODE_SEEK))
 1817              		.loc 1 660 0
 1818 0a40 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
 1819 0a42 502B     		cmp	r3, #80
 1820 0a44 3FF481AC 		beq	.L83
 661:grbl/gcode.c  **** 				{
 1821              		.loc 1 661 0
 1822 0a48 002B     		cmp	r3, #0
 1823 0a4a 3FF47EAC 		beq	.L83
 663:grbl/gcode.c  **** 					{
 1824              		.loc 1 663 0
 1825 0a4e 18F0010F 		tst	r8, #1
 1826 0a52 7FF47AAC 		bne	.L83
 1827              	.LVL209:
 1828              	.L275:
1064:grbl/gcode.c  **** 			} // [Feed rate undefined]
 1829              		.loc 1 1064 0
 1830 0a56 1623     		movs	r3, #22
 1831 0a58 39E4     		b	.L298
 1832              	.LVL210:
 1833              	.L105:
 805:grbl/gcode.c  **** 		} // [Greater than N sys]
 1834              		.loc 1 805 0
 1835 0a5a 1D23     		movs	r3, #29
 1836 0a5c 37E4     		b	.L298
 1837              	.LVL211:
 1838              	.L123:
 926:grbl/gcode.c  **** 			}
 1839              		.loc 1 926 0
 1840 0a5e 344A     		ldr	r2, .L566
  80:grbl/gcode.c  **** 	uint8_t output_select = 0;
 1841              		.loc 1 80 0
 1842 0a60 0F93     		str	r3, [sp, #60]
 926:grbl/gcode.c  **** 			}
 1843              		.loc 1 926 0
 1844 0a62 126C     		ldr	r2, [r2, #64]	@ float
 1845 0a64 3264     		str	r2, [r6, #64]	@ float
 1846              	.LVL212:
 1847 0a66 DEE7     		b	.L114
 1848              	.LVL213:
 1849              	.L176:
1291:grbl/gcode.c  **** 	}
 1850              		.loc 1 1291 0
 1851 0a68 28F44873 		bic	r3, r8, #800
 1852 0a6c 23F00103 		bic	r3, r3, #1
 1853              	.LVL214:
 1854 0a70 4DE7     		b	.L177
 1855              	.LVL215:
 1856              	.L118:
 834:grbl/gcode.c  **** 		}
 1857              		.loc 1 834 0
 1858 0a72 1A23     		movs	r3, #26
 1859 0a74 2BE4     		b	.L298
 1860              	.LVL216:
 1861              	.L242:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 70


 177:grbl/gcode.c  **** 					} // [Axis word/command conflict]
 1862              		.loc 1 177 0
 1863 0a76 1823     		movs	r3, #24
 1864 0a78 29E4     		b	.L298
 1865              	.LVL217:
 1866              	.L119:
 918:grbl/gcode.c  **** 				if (idx == TOOL_LENGTH_OFFSET_AXIS)
 1867              		.loc 1 918 0
 1868 0a7a 2D4B     		ldr	r3, .L566
 1869 0a7c 1299     		ldr	r1, [sp, #72]	@ float
 1870 0a7e 186A     		ldr	r0, [r3, #32]	@ float
 1871 0a80 FFF7FEFF 		bl	__aeabi_fsub
 1872              	.LVL218:
 1873 0a84 B16B     		ldr	r1, [r6, #56]	@ float
 1874 0a86 FFF7FEFF 		bl	__aeabi_fsub
 1875              	.LVL219:
 917:grbl/gcode.c  **** 						- block_coord_system[idx] - gc_block.values.xyz[idx];
 1876              		.loc 1 917 0
 1877 0a8a B063     		str	r0, [r6, #56]	@ float
 1878 0a8c A6E4     		b	.L120
 1879              	.LVL220:
 1880              	.L546:
1047:grbl/gcode.c  **** 		{
 1881              		.loc 1 1047 0
 1882 0a8e 94B1     		cbz	r4, .L162
1062:grbl/gcode.c  **** 			{
 1883              		.loc 1 1062 0
 1884 0a90 0021     		movs	r1, #0
 1885 0a92 3069     		ldr	r0, [r6, #16]	@ float
 1886 0a94 FFF7FEFF 		bl	__aeabi_fcmpeq
 1887              	.LVL221:
 1888 0a98 0028     		cmp	r0, #0
 1889 0a9a DCD1     		bne	.L275
1067:grbl/gcode.c  **** 			{
 1890              		.loc 1 1067 0
 1891 0a9c 8C2C     		cmp	r4, #140
 1892 0a9e 00F09483 		beq	.L158
 1893 0aa2 00F28A83 		bhi	.L159
 1894 0aa6 022C     		cmp	r4, #2
 1895 0aa8 00F0C682 		beq	.L277
 1896 0aac 032C     		cmp	r4, #3
 1897 0aae 00F0C582 		beq	.L160
 1898 0ab2 012C     		cmp	r4, #1
 1899 0ab4 BED1     		bne	.L276
 1900              	.L162:
 1901              	.LBB10:
1072:grbl/gcode.c  **** 				{
 1902              		.loc 1 1072 0
 1903 0ab6 069B     		ldr	r3, [sp, #24]
 1904 0ab8 099A     		ldr	r2, [sp, #36]
 1905 0aba 002B     		cmp	r3, #0
 1906 0abc 079B     		ldr	r3, [sp, #28]
 1907 0abe 08BF     		it	eq
 1908 0ac0 0023     		moveq	r3, #0
 1909 0ac2 0793     		str	r3, [sp, #28]
 1910              	.LVL222:
 1911 0ac4 1EE7     		b	.L152
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 71


 1912              	.LVL223:
 1913              	.L129:
 1914              	.LBE10:
 943:grbl/gcode.c  **** 					{
 1915              		.loc 1 943 0
 1916 0ac6 069B     		ldr	r3, [sp, #24]
 1917 0ac8 9B07     		lsls	r3, r3, #30
 1918 0aca 40F19681 		bpl	.L127
 1919              	.L133:
 1920              	.LVL224:
 1921 0ace 069B     		ldr	r3, [sp, #24]
 1922 0ad0 5A07     		lsls	r2, r3, #29
 1923 0ad2 29D5     		bpl	.L524
 1924              	.LVL225:
 1925              	.L147:
1022:grbl/gcode.c  **** 					|| gc_block.modal.motion == MOTION_MODE_LINEAR))
 1926              		.loc 1 1022 0
 1927 0ad4 7478     		ldrb	r4, [r6, #1]	@ zero_extendqisi2
 1928 0ad6 012C     		cmp	r4, #1
 1929 0ad8 00F23D81 		bhi	.L271
 1930              	.L525:
 1931 0adc 0023     		movs	r3, #0
 1932 0ade 0F93     		str	r3, [sp, #60]
 1933 0ae0 A5E7     		b	.L149
 1934              	.L297:
 983:grbl/gcode.c  **** 				{
 1935              		.loc 1 983 0
 1936 0ae2 1949     		ldr	r1, .L566+24
 1937 0ae4 0620     		movs	r0, #6
 1938 0ae6 FFF7FEFF 		bl	settings_read_coord_data
 1939              	.LVL226:
 1940 0aea A8B9     		cbnz	r0, .L153
 1941              	.LVL227:
 1942              	.L290:
1709:grbl/gcode.c  **** 				}
 1943              		.loc 1 1709 0
 1944 0aec 0723     		movs	r3, #7
 1945 0aee FFF7EEBB 		b	.L298
 1946              	.LVL228:
 1947              	.L121:
 918:grbl/gcode.c  **** 				if (idx == TOOL_LENGTH_OFFSET_AXIS)
 1948              		.loc 1 918 0
 1949 0af2 0F4B     		ldr	r3, .L566
 1950 0af4 1399     		ldr	r1, [sp, #76]	@ float
 1951 0af6 586A     		ldr	r0, [r3, #36]	@ float
 1952 0af8 FFF7FEFF 		bl	__aeabi_fsub
 1953              	.LVL229:
 1954 0afc F16B     		ldr	r1, [r6, #60]	@ float
 1955 0afe FFF7FEFF 		bl	__aeabi_fsub
 1956              	.LVL230:
 917:grbl/gcode.c  **** 						- block_coord_system[idx] - gc_block.values.xyz[idx];
 1957              		.loc 1 917 0
 1958 0b02 F063     		str	r0, [r6, #60]	@ float
 1959 0b04 71E4     		b	.L122
 1960              	.LVL231:
 1961              	.L286:
1334:grbl/gcode.c  **** 	} // [Unused words]
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 72


 1962              		.loc 1 1334 0
 1963 0b06 2423     		movs	r3, #36
 1964              	.LVL232:
 1965 0b08 FFF7E1BB 		b	.L298
 1966              	.LVL233:
 1967              	.L146:
 990:grbl/gcode.c  **** 				{
 1968              		.loc 1 990 0
 1969 0b0c 0E49     		ldr	r1, .L566+24
 1970 0b0e 0720     		movs	r0, #7
 1971 0b10 FFF7FEFF 		bl	settings_read_coord_data
 1972              	.LVL234:
 1973 0b14 0028     		cmp	r0, #0
 1974 0b16 E9D0     		beq	.L290
 1975              	.L153:
 995:grbl/gcode.c  **** 			{
 1976              		.loc 1 995 0
 1977 0b18 069B     		ldr	r3, [sp, #24]
 1978 0b1a 002B     		cmp	r3, #0
 1979 0b1c 40F03281 		bne	.L151
 1980 0b20 099A     		ldr	r2, [sp, #36]
  80:grbl/gcode.c  **** 	uint8_t output_select = 0;
 1981              		.loc 1 80 0
 1982 0b22 0F93     		str	r3, [sp, #60]
1008:grbl/gcode.c  **** 			}
 1983              		.loc 1 1008 0
 1984 0b24 0793     		str	r3, [sp, #28]
 1985              	.LVL235:
 1986 0b26 EDE6     		b	.L152
 1987              	.LVL236:
 1988              	.L524:
 945:grbl/gcode.c  **** 					}
 1989              		.loc 1 945 0
 1990 0b28 014B     		ldr	r3, .L566
 1991 0b2a 9B6A     		ldr	r3, [r3, #40]	@ float
 1992 0b2c 3364     		str	r3, [r6, #64]	@ float
 1993 0b2e D6E6     		b	.L144
 1994              	.L567:
 1995              		.align	2
 1996              	.L566:
 1997 0b30 00000000 		.word	gc_state
 1998 0b34 50000200 		.word	131152
 1999 0b38 40000200 		.word	131136
 2000 0b3c 00000000 		.word	gc_block
 2001 0b40 38000000 		.word	gc_block+56
 2002 0b44 20000000 		.word	gc_state+32
 2003 0b48 14000000 		.word	gc_block+20
 2004              	.LVL237:
 2005              	.L125:
 943:grbl/gcode.c  **** 					{
 2006              		.loc 1 943 0
 2007 0b4c D107     		lsls	r1, r2, #31
 2008 0b4e 1346     		mov	r3, r2
 2009 0b50 40F13881 		bpl	.L136
 951:grbl/gcode.c  **** 						{
 2010              		.loc 1 951 0
 2011 0b54 352C     		cmp	r4, #53
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 73


 2012 0b56 09D0     		beq	.L138
 957:grbl/gcode.c  **** 								if (idx == TOOL_LENGTH_OFFSET_AXIS)
 2013              		.loc 1 957 0
 2014 0b58 9D4B     		ldr	r3, .L568
 2015 0b5a 1299     		ldr	r1, [sp, #72]	@ float
 2016 0b5c 986B     		ldr	r0, [r3, #56]	@ float
 2017 0b5e FFF7FEFF 		bl	__aeabi_fadd
 2018              	.LVL238:
 956:grbl/gcode.c  **** 										+ gc_state.coord_offset[idx];
 2019              		.loc 1 956 0
 2020 0b62 B16B     		ldr	r1, [r6, #56]	@ float
 2021 0b64 FFF7FEFF 		bl	__aeabi_fadd
 2022              	.LVL239:
 2023 0b68 069B     		ldr	r3, [sp, #24]
 2024 0b6a B063     		str	r0, [r6, #56]	@ float
 2025              	.L138:
 2026              	.LVL240:
 943:grbl/gcode.c  **** 					{
 2027              		.loc 1 943 0
 2028 0b6c 9A07     		lsls	r2, r3, #30
 2029 0b6e 40F12181 		bpl	.L139
 951:grbl/gcode.c  **** 						{
 2030              		.loc 1 951 0
 2031 0b72 352C     		cmp	r4, #53
 2032 0b74 09D0     		beq	.L141
 957:grbl/gcode.c  **** 								if (idx == TOOL_LENGTH_OFFSET_AXIS)
 2033              		.loc 1 957 0
 2034 0b76 964B     		ldr	r3, .L568
 2035 0b78 1399     		ldr	r1, [sp, #76]	@ float
 2036 0b7a D86B     		ldr	r0, [r3, #60]	@ float
 2037 0b7c FFF7FEFF 		bl	__aeabi_fadd
 2038              	.LVL241:
 956:grbl/gcode.c  **** 										+ gc_state.coord_offset[idx];
 2039              		.loc 1 956 0
 2040 0b80 F16B     		ldr	r1, [r6, #60]	@ float
 2041 0b82 FFF7FEFF 		bl	__aeabi_fadd
 2042              	.LVL242:
 2043 0b86 069B     		ldr	r3, [sp, #24]
 2044 0b88 F063     		str	r0, [r6, #60]	@ float
 2045              	.L141:
 2046              	.LVL243:
 943:grbl/gcode.c  **** 					{
 2047              		.loc 1 943 0
 2048 0b8a 5807     		lsls	r0, r3, #29
 2049 0b8c CCD5     		bpl	.L524
 951:grbl/gcode.c  **** 						{
 2050              		.loc 1 951 0
 2051 0b8e 352C     		cmp	r4, #53
 2052 0b90 A0D0     		beq	.L147
 957:grbl/gcode.c  **** 								if (idx == TOOL_LENGTH_OFFSET_AXIS)
 2053              		.loc 1 957 0
 2054 0b92 8F4B     		ldr	r3, .L568
 2055 0b94 1498     		ldr	r0, [sp, #80]	@ float
 2056 0b96 196C     		ldr	r1, [r3, #64]	@ float
 2057 0b98 FFF7FEFF 		bl	__aeabi_fadd
 2058              	.LVL244:
 956:grbl/gcode.c  **** 										+ gc_state.coord_offset[idx];
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 74


 2059              		.loc 1 956 0
 2060 0b9c 316C     		ldr	r1, [r6, #64]	@ float
 2061 0b9e FFF7FEFF 		bl	__aeabi_fadd
 2062              	.LVL245:
 960:grbl/gcode.c  **** 								}
 2063              		.loc 1 960 0
 2064 0ba2 8B4B     		ldr	r3, .L568
 2065 0ba4 596C     		ldr	r1, [r3, #68]	@ float
 2066 0ba6 FFF7FEFF 		bl	__aeabi_fadd
 2067              	.LVL246:
 2068 0baa 3064     		str	r0, [r6, #64]	@ float
 2069              	.LVL247:
 2070 0bac 97E6     		b	.L144
 2071              	.LVL248:
 2072              	.L183:
1381:grbl/gcode.c  **** 	{
 2073              		.loc 1 1381 0
 2074 0bae 894B     		ldr	r3, .L568+4
 2075              	.LVL249:
 2076 0bb0 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 2077 0bb4 9C07     		lsls	r4, r3, #30
 2078 0bb6 13D5     		bpl	.L527
1383:grbl/gcode.c  **** 				|| (gc_block.modal.motion == MOTION_MODE_CW_ARC)
 2079              		.loc 1 1383 0
 2080 0bb8 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
 2081 0bba 013B     		subs	r3, r3, #1
 2082 0bbc 022B     		cmp	r3, #2
 2083 0bbe 04D9     		bls	.L186
1387:grbl/gcode.c  **** 		}
 2084              		.loc 1 1387 0
 2085 0bc0 099B     		ldr	r3, [sp, #36]
 2086 0bc2 43F04003 		orr	r3, r3, #64
 2087 0bc6 DBB2     		uxtb	r3, r3
 2088 0bc8 0993     		str	r3, [sp, #36]
 2089              	.LVL250:
 2090              	.L186:
1393:grbl/gcode.c  **** 		{
 2091              		.loc 1 1393 0
 2092 0bca 069B     		ldr	r3, [sp, #24]
 2093 0bcc 1BB1     		cbz	r3, .L187
1393:grbl/gcode.c  **** 		{
 2094              		.loc 1 1393 0 is_stmt 0 discriminator 1
 2095 0bce 079B     		ldr	r3, [sp, #28]
 2096 0bd0 022B     		cmp	r3, #2
 2097 0bd2 00F07C83 		beq	.L547
 2098              	.L187:
1401:grbl/gcode.c  **** 			{
 2099              		.loc 1 1401 0 is_stmt 1
 2100 0bd6 7E4B     		ldr	r3, .L568
 2101 0bd8 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 2102 0bda 102B     		cmp	r3, #16
 2103 0bdc 00F0B181 		beq	.L518
 2104              	.L527:
 2105 0be0 099B     		ldr	r3, [sp, #36]
 2106 0be2 03F04005 		and	r5, r3, #64
 2107              	.LVL251:
 2108              	.L185:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 75


1426:grbl/gcode.c  **** #ifdef USE_LINE_NUMBERS
 2109              		.loc 1 1426 0
 2110 0be6 7A49     		ldr	r1, .L568
 2111 0be8 726A     		ldr	r2, [r6, #36]
1434:grbl/gcode.c  **** 	if (gc_state.modal.feed_rate)
 2112              		.loc 1 1434 0
 2113 0bea B378     		ldrb	r3, [r6, #2]	@ zero_extendqisi2
1426:grbl/gcode.c  **** #ifdef USE_LINE_NUMBERS
 2114              		.loc 1 1426 0
 2115 0bec CA61     		str	r2, [r1, #28]
1434:grbl/gcode.c  **** 	if (gc_state.modal.feed_rate)
 2116              		.loc 1 1434 0
 2117 0bee 4B70     		strb	r3, [r1, #1]
1435:grbl/gcode.c  **** 	{
 2118              		.loc 1 1435 0
 2119 0bf0 13B1     		cbz	r3, .L189
1437:grbl/gcode.c  **** 	} // Set condition flag for planner use.
 2120              		.loc 1 1437 0
 2121 0bf2 0823     		movs	r3, #8
 2122 0bf4 8DF85C30 		strb	r3, [sp, #92]
 2123              	.L189:
1445:grbl/gcode.c  **** 			|| bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC))
 2124              		.loc 1 1445 0
 2125 0bf8 754A     		ldr	r2, .L568
1441:grbl/gcode.c  **** 	pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 2126              		.loc 1 1441 0
 2127 0bfa 3369     		ldr	r3, [r6, #16]	@ float
1445:grbl/gcode.c  **** 			|| bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC))
 2128              		.loc 1 1445 0
 2129 0bfc D2F81080 		ldr	r8, [r2, #16]	@ float
 2130 0c00 376B     		ldr	r7, [r6, #48]	@ float
 2131              	.LVL252:
 2132 0c02 4046     		mov	r0, r8
 2133 0c04 3946     		mov	r1, r7
1441:grbl/gcode.c  **** 	pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 2134              		.loc 1 1441 0
 2135 0c06 5361     		str	r3, [r2, #20]	@ float
 2136 0c08 EDB2     		uxtb	r5, r5
1442:grbl/gcode.c  **** 
 2137              		.loc 1 1442 0
 2138 0c0a 1593     		str	r3, [sp, #84]	@ float
 2139              	.LVL253:
 2140 0c0c 547A     		ldrb	r4, [r2, #9]	@ zero_extendqisi2
1445:grbl/gcode.c  **** 			|| bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC))
 2141              		.loc 1 1445 0
 2142 0c0e FFF7FEFF 		bl	__aeabi_fcmpeq
 2143              	.LVL254:
 2144 0c12 0028     		cmp	r0, #0
 2145 0c14 00F0A580 		beq	.L190
1446:grbl/gcode.c  **** 	{
 2146              		.loc 1 1446 0
 2147 0c18 099B     		ldr	r3, [sp, #36]
 2148 0c1a 9806     		lsls	r0, r3, #26
 2149 0c1c 00F1A180 		bmi	.L190
 2150 0c20 4746     		mov	r7, r8
 2151              	.L191:
1469:grbl/gcode.c  **** 	{
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 76


 2152              		.loc 1 1469 0
 2153 0c22 05B9     		cbnz	r5, .L194
1471:grbl/gcode.c  **** 	} // else { pl_data->spindle_speed = 0.0; } // Initialized as zero already.
 2154              		.loc 1 1471 0
 2155 0c24 1697     		str	r7, [sp, #88]	@ float
 2156              	.L194:
1480:grbl/gcode.c  **** 	{
 2157              		.loc 1 1480 0
 2158 0c26 B07A     		ldrb	r0, [r6, #10]	@ zero_extendqisi2
1475:grbl/gcode.c  **** 
 2159              		.loc 1 1475 0
 2160 0c28 96F83430 		ldrb	r3, [r6, #52]	@ zero_extendqisi2
 2161 0c2c 684D     		ldr	r5, .L568
1480:grbl/gcode.c  **** 	{
 2162              		.loc 1 1480 0
 2163 0c2e A042     		cmp	r0, r4
1475:grbl/gcode.c  **** 
 2164              		.loc 1 1475 0
 2165 0c30 2B76     		strb	r3, [r5, #24]
1480:grbl/gcode.c  **** 	{
 2166              		.loc 1 1480 0
 2167 0c32 04D0     		beq	.L195
1485:grbl/gcode.c  **** 		gc_state.modal.spindle = gc_block.modal.spindle;
 2168              		.loc 1 1485 0
 2169 0c34 1699     		ldr	r1, [sp, #88]	@ float
 2170 0c36 FFF7FEFF 		bl	spindle_sync
 2171              	.LVL255:
1486:grbl/gcode.c  **** 	}
 2172              		.loc 1 1486 0
 2173 0c3a B47A     		ldrb	r4, [r6, #10]	@ zero_extendqisi2
 2174 0c3c 6C72     		strb	r4, [r5, #9]
 2175              	.L195:
1491:grbl/gcode.c  **** 	{
 2176              		.loc 1 1491 0
 2177 0c3e 644D     		ldr	r5, .L568
1488:grbl/gcode.c  **** 
 2178              		.loc 1 1488 0
 2179 0c40 9DF85C20 		ldrb	r2, [sp, #92]	@ zero_extendqisi2
1491:grbl/gcode.c  **** 	{
 2180              		.loc 1 1491 0
 2181 0c44 707A     		ldrb	r0, [r6, #9]	@ zero_extendqisi2
 2182 0c46 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
1488:grbl/gcode.c  **** 
 2183              		.loc 1 1488 0
 2184 0c48 1443     		orrs	r4, r4, r2
1491:grbl/gcode.c  **** 	{
 2185              		.loc 1 1491 0
 2186 0c4a 8342     		cmp	r3, r0
1488:grbl/gcode.c  **** 
 2187              		.loc 1 1488 0
 2188 0c4c 8DF85C40 		strb	r4, [sp, #92]
1491:grbl/gcode.c  **** 	{
 2189              		.loc 1 1491 0
 2190 0c50 08D0     		beq	.L196
1495:grbl/gcode.c  **** 		if (gc_block.modal.coolant == COOLANT_DISABLE)
 2191              		.loc 1 1495 0
 2192 0c52 FFF7FEFF 		bl	coolant_sync
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 77


 2193              	.LVL256:
1496:grbl/gcode.c  **** 		{
 2194              		.loc 1 1496 0
 2195 0c56 707A     		ldrb	r0, [r6, #9]	@ zero_extendqisi2
 2196 0c58 0028     		cmp	r0, #0
 2197 0c5a 40F08681 		bne	.L197
 2198 0c5e 9DF85C40 		ldrb	r4, [sp, #92]	@ zero_extendqisi2
1498:grbl/gcode.c  **** 		}
 2199              		.loc 1 1498 0
 2200 0c62 2872     		strb	r0, [r5, #8]
 2201              	.L196:
1517:grbl/gcode.c  **** 	{
 2202              		.loc 1 1517 0
 2203 0c64 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
1505:grbl/gcode.c  **** 
 2204              		.loc 1 1505 0
 2205 0c66 0443     		orrs	r4, r4, r0
1517:grbl/gcode.c  **** 	{
 2206              		.loc 1 1517 0
 2207 0c68 042B     		cmp	r3, #4
1505:grbl/gcode.c  **** 
 2208              		.loc 1 1505 0
 2209 0c6a 8DF85C40 		strb	r4, [sp, #92]
1517:grbl/gcode.c  **** 	{
 2210              		.loc 1 1517 0
 2211 0c6e 00F0BB81 		beq	.L548
 2212              	.L198:
1526:grbl/gcode.c  **** 
 2213              		.loc 1 1526 0
 2214 0c72 F378     		ldrb	r3, [r6, #3]	@ zero_extendqisi2
1523:grbl/gcode.c  **** 
 2215              		.loc 1 1523 0
 2216 0c74 5649     		ldr	r1, .L568
 2217 0c76 7279     		ldrb	r2, [r6, #5]	@ zero_extendqisi2
1526:grbl/gcode.c  **** 
 2218              		.loc 1 1526 0
 2219 0c78 8B70     		strb	r3, [r1, #2]
1535:grbl/gcode.c  **** 	{ // Indicates a change.
 2220              		.loc 1 1535 0
 2221 0c7a 079B     		ldr	r3, [sp, #28]
1523:grbl/gcode.c  **** 
 2222              		.loc 1 1523 0
 2223 0c7c 0A71     		strb	r2, [r1, #4]
1535:grbl/gcode.c  **** 	{ // Indicates a change.
 2224              		.loc 1 1535 0
 2225 0c7e 032B     		cmp	r3, #3
 2226 0c80 00F0E280 		beq	.L549
 2227              	.L200:
1552:grbl/gcode.c  **** 	{
 2228              		.loc 1 1552 0
 2229 0c84 524C     		ldr	r4, .L568
 2230 0c86 F379     		ldrb	r3, [r6, #7]	@ zero_extendqisi2
 2231 0c88 A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 2232 0c8a 9A42     		cmp	r2, r3
 2233 0c8c 08D0     		beq	.L204
1555:grbl/gcode.c  **** 		system_flag_wco_change();
 2234              		.loc 1 1555 0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 78


 2235 0c8e 12AA     		add	r2, sp, #72
1554:grbl/gcode.c  **** 		memcpy(gc_state.coord_system, block_coord_system, N_AXIS * sizeof(float));
 2236              		.loc 1 1554 0
 2237 0c90 A371     		strb	r3, [r4, #6]
1555:grbl/gcode.c  **** 		system_flag_wco_change();
 2238              		.loc 1 1555 0
 2239 0c92 04F12C03 		add	r3, r4, #44
 2240 0c96 07CA     		ldm	r2, {r0, r1, r2}
 2241 0c98 83E80700 		stm	r3, {r0, r1, r2}
1556:grbl/gcode.c  **** 	}
 2242              		.loc 1 1556 0
 2243 0c9c FFF7FEFF 		bl	system_flag_wco_change
 2244              	.LVL257:
 2245              	.L204:
1568:grbl/gcode.c  **** 	{
 2246              		.loc 1 1568 0
 2247 0ca0 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
1563:grbl/gcode.c  **** 
 2248              		.loc 1 1563 0
 2249 0ca2 3279     		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 2250 0ca4 4A49     		ldr	r1, .L568
1568:grbl/gcode.c  **** 	{
 2251              		.loc 1 1568 0
 2252 0ca6 262B     		cmp	r3, #38
1563:grbl/gcode.c  **** 
 2253              		.loc 1 1563 0
 2254 0ca8 CA70     		strb	r2, [r1, #3]
1568:grbl/gcode.c  **** 	{
 2255              		.loc 1 1568 0
 2256 0caa 00F09881 		beq	.L206
 2257 0cae 40F2AF80 		bls	.L550
 2258 0cb2 5C2B     		cmp	r3, #92
 2259 0cb4 00F03D81 		beq	.L210
 2260 0cb8 662B     		cmp	r3, #102
 2261 0cba 00F03081 		beq	.L211
 2262 0cbe 282B     		cmp	r3, #40
 2263 0cc0 03D1     		bne	.L205
1596:grbl/gcode.c  **** 		break;
 2264              		.loc 1 1596 0
 2265 0cc2 4549     		ldr	r1, .L568+8
 2266 0cc4 0720     		movs	r0, #7
 2267 0cc6 FFF7FEFF 		bl	settings_write_coord_data
 2268              	.LVL258:
 2269              	.L205:
1612:grbl/gcode.c  **** 	if (gc_state.modal.motion != MOTION_MODE_NONE)
 2270              		.loc 1 1612 0
 2271 0cca 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
 2272 0ccc 404A     		ldr	r2, .L568
1613:grbl/gcode.c  **** 	{
 2273              		.loc 1 1613 0
 2274 0cce 502B     		cmp	r3, #80
1612:grbl/gcode.c  **** 	if (gc_state.modal.motion != MOTION_MODE_NONE)
 2275              		.loc 1 1612 0
 2276 0cd0 1370     		strb	r3, [r2]
1613:grbl/gcode.c  **** 	{
 2277              		.loc 1 1613 0
 2278 0cd2 03D0     		beq	.L215
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 79


1615:grbl/gcode.c  **** 		{
 2279              		.loc 1 1615 0
 2280 0cd4 079A     		ldr	r2, [sp, #28]
 2281 0cd6 022A     		cmp	r2, #2
 2282 0cd8 00F00281 		beq	.L551
 2283              	.L215:
1663:grbl/gcode.c  **** 	if (gc_state.modal.program_flow)
 2284              		.loc 1 1663 0
 2285 0cdc 337A     		ldrb	r3, [r6, #8]	@ zero_extendqisi2
 2286 0cde 3C4A     		ldr	r2, .L568
 2287 0ce0 D371     		strb	r3, [r2, #7]
1664:grbl/gcode.c  **** 	{
 2288              		.loc 1 1664 0
 2289 0ce2 002B     		cmp	r3, #0
 2290 0ce4 40F0C380 		bne	.L552
 2291              	.L222:
1722:grbl/gcode.c  **** 	{
 2292              		.loc 1 1722 0
 2293 0ce8 347B     		ldrb	r4, [r6, #12]	@ zero_extendqisi2
 2294 0cea 54B1     		cbz	r4, .L226
1724:grbl/gcode.c  **** 		outputs_digital_action(output_select, gc_block.modal.digital);
 2295              		.loc 1 1724 0
 2296 0cec B06A     		ldr	r0, [r6, #40]	@ float
 2297 0cee FFF7FEFF 		bl	__aeabi_f2d
 2298              	.LVL259:
 2299 0cf2 FFF7FEFF 		bl	trunc
 2300              	.LVL260:
 2301 0cf6 FFF7FEFF 		bl	__aeabi_d2uiz
 2302              	.LVL261:
1725:grbl/gcode.c  **** 	}
 2303              		.loc 1 1725 0
 2304 0cfa 2146     		mov	r1, r4
 2305 0cfc C0B2     		uxtb	r0, r0
 2306 0cfe FFF7FEFF 		bl	outputs_digital_action
 2307              	.LVL262:
 2308              	.L226:
1730:grbl/gcode.c  **** 	{
 2309              		.loc 1 1730 0
 2310 0d02 737B     		ldrb	r3, [r6, #13]	@ zero_extendqisi2
 2311 0d04 63B1     		cbz	r3, .L227
1732:grbl/gcode.c  **** 		wait_on_input_action(input_select, gc_block.values.l, &gc_block.values.q);
 2312              		.loc 1 1732 0
 2313 0d06 B06A     		ldr	r0, [r6, #40]	@ float
 2314 0d08 FFF7FEFF 		bl	__aeabi_f2d
 2315              	.LVL263:
 2316 0d0c FFF7FEFF 		bl	trunc
 2317              	.LVL264:
 2318 0d10 FFF7FEFF 		bl	__aeabi_d2uiz
 2319              	.LVL265:
1733:grbl/gcode.c  **** 	}
 2320              		.loc 1 1733 0
 2321 0d14 96F82010 		ldrb	r1, [r6, #32]	@ zero_extendqisi2
 2322 0d18 C0B2     		uxtb	r0, r0
 2323 0d1a 304A     		ldr	r2, .L568+12
 2324 0d1c FFF7FEFF 		bl	wait_on_input_action
 2325              	.LVL266:
 2326              	.L227:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 80


1739:grbl/gcode.c  **** 	{
 2327              		.loc 1 1739 0
 2328 0d20 B37B     		ldrb	r3, [r6, #14]	@ zero_extendqisi2
 2329 0d22 23B1     		cbz	r3, .L228
1741:grbl/gcode.c  **** 	}
 2330              		.loc 1 1741 0
 2331 0d24 2D49     		ldr	r1, .L568+12
 2332 0d26 96F84400 		ldrb	r0, [r6, #68]	@ zero_extendqisi2
 2333 0d2a FFF7FEFF 		bl	outputs_analog_action
 2334              	.LVL267:
 2335              	.L228:
1746:grbl/gcode.c  **** 	{
 2336              		.loc 1 1746 0
 2337 0d2e F37B     		ldrb	r3, [r6, #15]	@ zero_extendqisi2
 2338 0d30 002B     		cmp	r3, #0
 2339 0d32 3FF4CCAA 		beq	.L298
1748:grbl/gcode.c  **** 		acceleration_scaling(output_select, &gc_block.values.q); // in settings.c
 2340              		.loc 1 1748 0
 2341 0d36 B06A     		ldr	r0, [r6, #40]	@ float
 2342 0d38 FFF7FEFF 		bl	__aeabi_f2d
 2343              	.LVL268:
 2344 0d3c FFF7FEFF 		bl	trunc
 2345              	.LVL269:
 2346 0d40 FFF7FEFF 		bl	__aeabi_d2uiz
 2347              	.LVL270:
1749:grbl/gcode.c  **** 		plan_reset(); // Clear block buffer and planner variables
 2348              		.loc 1 1749 0
 2349 0d44 2549     		ldr	r1, .L568+12
 2350 0d46 C0B2     		uxtb	r0, r0
 2351 0d48 FFF7FEFF 		bl	acceleration_scaling
 2352              	.LVL271:
1750:grbl/gcode.c  **** 	}
 2353              		.loc 1 1750 0
 2354 0d4c FFF7FEFF 		bl	plan_reset
 2355              	.LVL272:
1756:grbl/gcode.c  **** }
 2356              		.loc 1 1756 0
 2357 0d50 0023     		movs	r3, #0
 2358 0d52 FFF7BCBA 		b	.L298
 2359              	.LVL273:
 2360              	.L271:
1025:grbl/gcode.c  **** 			}
 2361              		.loc 1 1025 0
 2362 0d56 1E23     		movs	r3, #30
 2363 0d58 FFF7B9BA 		b	.L298
 2364              	.LVL274:
 2365              	.L257:
 537:grbl/gcode.c  **** 				}
 2366              		.loc 1 537 0
 2367 0d5c 2623     		movs	r3, #38
 2368 0d5e FFF7B6BA 		b	.L298
 2369              	.LVL275:
 2370              	.L190:
1448:grbl/gcode.c  **** 		{
 2371              		.loc 1 1448 0
 2372 0d62 64B1     		cbz	r4, .L192
1451:grbl/gcode.c  **** 			{
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 81


 2373              		.loc 1 1451 0
 2374 0d64 099B     		ldr	r3, [sp, #36]
 2375 0d66 1906     		lsls	r1, r3, #24
 2376 0d68 09D4     		bmi	.L192
1453:grbl/gcode.c  **** 				{
 2377              		.loc 1 1453 0
 2378 0d6a 002D     		cmp	r5, #0
 2379 0d6c 00F00481 		beq	.L193
1455:grbl/gcode.c  **** 				}
 2380              		.loc 1 1455 0
 2381 0d70 2046     		mov	r0, r4
 2382 0d72 0021     		movs	r1, #0
 2383 0d74 FFF7FEFF 		bl	spindle_sync
 2384              	.LVL276:
 2385 0d78 154B     		ldr	r3, .L568
 2386 0d7a 376B     		ldr	r7, [r6, #48]	@ float
 2387 0d7c 5C7A     		ldrb	r4, [r3, #9]	@ zero_extendqisi2
 2388              	.L192:
1466:grbl/gcode.c  **** 	}
 2389              		.loc 1 1466 0
 2390 0d7e 144B     		ldr	r3, .L568
 2391 0d80 1F61     		str	r7, [r3, #16]	@ float
 2392 0d82 4EE7     		b	.L191
 2393              	.LVL277:
 2394              	.L151:
1000:grbl/gcode.c  **** 					{
 2395              		.loc 1 1000 0
 2396 0d84 D907     		lsls	r1, r3, #31
 2397 0d86 03D4     		bmi	.L154
1002:grbl/gcode.c  **** 					}
 2398              		.loc 1 1002 0
 2399 0d88 114B     		ldr	r3, .L568
 2400 0d8a 1B6A     		ldr	r3, [r3, #32]	@ float
 2401 0d8c 7361     		str	r3, [r6, #20]	@ float
 2402 0d8e 069B     		ldr	r3, [sp, #24]
 2403              	.L154:
 2404              	.LVL278:
1000:grbl/gcode.c  **** 					{
 2405              		.loc 1 1000 0
 2406 0d90 9A07     		lsls	r2, r3, #30
 2407 0d92 03D4     		bmi	.L155
1002:grbl/gcode.c  **** 					}
 2408              		.loc 1 1002 0
 2409 0d94 0E4B     		ldr	r3, .L568
 2410 0d96 5B6A     		ldr	r3, [r3, #36]	@ float
 2411 0d98 B361     		str	r3, [r6, #24]	@ float
 2412 0d9a 069B     		ldr	r3, [sp, #24]
 2413              	.L155:
 2414              	.LVL279:
1000:grbl/gcode.c  **** 					{
 2415              		.loc 1 1000 0
 2416 0d9c 5B07     		lsls	r3, r3, #29
 2417 0d9e 02D4     		bmi	.L156
1002:grbl/gcode.c  **** 					}
 2418              		.loc 1 1002 0
 2419 0da0 0B4B     		ldr	r3, .L568
 2420 0da2 9B6A     		ldr	r3, [r3, #40]	@ float
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 82


 2421 0da4 F361     		str	r3, [r6, #28]	@ float
 2422              	.L156:
 2423              	.LVL280:
  80:grbl/gcode.c  **** 	uint8_t output_select = 0;
 2424              		.loc 1 80 0 discriminator 2
 2425 0da6 0023     		movs	r3, #0
 2426 0da8 0F93     		str	r3, [sp, #60]
 2427 0daa 3CE6     		b	.L114
 2428              	.LVL281:
 2429              	.L107:
 869:grbl/gcode.c  **** 		} // Index P0 as the active coordinate system
 2430              		.loc 1 869 0
 2431 0dac F379     		ldrb	r3, [r6, #7]	@ zero_extendqisi2
 2432 0dae 0F93     		str	r3, [sp, #60]
 2433              	.LVL282:
 2434 0db0 1846     		mov	r0, r3
 2435 0db2 1DE6     		b	.L108
 2436              	.LVL283:
 2437              	.L139:
 945:grbl/gcode.c  **** 					}
 2438              		.loc 1 945 0
 2439 0db4 064B     		ldr	r3, .L568
 2440 0db6 5B6A     		ldr	r3, [r3, #36]	@ float
 2441 0db8 F363     		str	r3, [r6, #60]	@ float
 2442 0dba 069B     		ldr	r3, [sp, #24]
 2443 0dbc E5E6     		b	.L141
 2444              	.LVL284:
 2445              	.L288:
 2446              	.LBB16:
1359:grbl/gcode.c  **** 		};
 2447              		.loc 1 1359 0
 2448 0dbe 1023     		movs	r3, #16
 2449 0dc0 FFF785BA 		b	.L298
 2450              	.LVL285:
 2451              	.L136:
 2452              	.LBE16:
 945:grbl/gcode.c  **** 					}
 2453              		.loc 1 945 0
 2454 0dc4 024B     		ldr	r3, .L568
 2455 0dc6 1B6A     		ldr	r3, [r3, #32]	@ float
 2456 0dc8 B363     		str	r3, [r6, #56]	@ float
 2457 0dca 069B     		ldr	r3, [sp, #24]
 2458 0dcc CEE6     		b	.L138
 2459              	.L569:
 2460 0dce 00BF     		.align	2
 2461              	.L568:
 2462 0dd0 00000000 		.word	gc_state
 2463 0dd4 00000000 		.word	settings
 2464 0dd8 20000000 		.word	gc_state+32
 2465 0ddc 48000000 		.word	gc_block+72
 2466              	.L126:
 951:grbl/gcode.c  **** 						{
 2467              		.loc 1 951 0
 2468 0de0 352C     		cmp	r4, #53
 2469 0de2 3FF470AE 		beq	.L129
 965:grbl/gcode.c  **** 							}
 2470              		.loc 1 965 0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 83


 2471 0de6 8D4B     		ldr	r3, .L570
 2472 0de8 B16B     		ldr	r1, [r6, #56]	@ float
 2473 0dea 186A     		ldr	r0, [r3, #32]	@ float
 2474 0dec FFF7FEFF 		bl	__aeabi_fadd
 2475              	.LVL286:
 943:grbl/gcode.c  **** 					{
 2476              		.loc 1 943 0
 2477 0df0 069B     		ldr	r3, [sp, #24]
 965:grbl/gcode.c  **** 							}
 2478              		.loc 1 965 0
 2479 0df2 B063     		str	r0, [r6, #56]	@ float
 2480              	.LVL287:
 943:grbl/gcode.c  **** 					{
 2481              		.loc 1 943 0
 2482 0df4 9A07     		lsls	r2, r3, #30
 2483 0df6 3FF562AD 		bmi	.L130
 2484              	.L127:
 945:grbl/gcode.c  **** 					}
 2485              		.loc 1 945 0
 2486 0dfa 884B     		ldr	r3, .L570
 2487 0dfc 5B6A     		ldr	r3, [r3, #36]	@ float
 2488 0dfe F363     		str	r3, [r6, #60]	@ float
 2489              	.LVL288:
 943:grbl/gcode.c  **** 					{
 2490              		.loc 1 943 0
 2491 0e00 069B     		ldr	r3, [sp, #24]
 2492 0e02 5B07     		lsls	r3, r3, #29
 2493 0e04 7FF590AE 		bpl	.L524
 951:grbl/gcode.c  **** 						{
 2494              		.loc 1 951 0
 2495 0e08 352C     		cmp	r4, #53
 2496 0e0a 7FF462AD 		bne	.L134
 2497 0e0e 61E6     		b	.L147
 2498              	.LVL289:
 2499              	.L550:
1568:grbl/gcode.c  **** 	{
 2500              		.loc 1 1568 0
 2501 0e10 1C2B     		cmp	r3, #28
 2502 0e12 00F0ED80 		beq	.L208
 2503 0e16 1E2B     		cmp	r3, #30
 2504 0e18 00F0EA80 		beq	.L208
 2505 0e1c 0A2B     		cmp	r3, #10
 2506 0e1e 7FF454AF 		bne	.L205
1571:grbl/gcode.c  **** 		// Update system coordinate system if currently active.
 2507              		.loc 1 1571 0
 2508 0e22 0F9D     		ldr	r5, [sp, #60]
 2509 0e24 7E4C     		ldr	r4, .L570+4
 2510 0e26 2846     		mov	r0, r5
 2511 0e28 2146     		mov	r1, r4
 2512 0e2a FFF7FEFF 		bl	settings_write_coord_data
 2513              	.LVL290:
1573:grbl/gcode.c  **** 		{
 2514              		.loc 1 1573 0
 2515 0e2e 7B4B     		ldr	r3, .L570
 2516 0e30 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2517 0e32 AB42     		cmp	r3, r5
 2518 0e34 7FF449AF 		bne	.L205
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 84


1575:grbl/gcode.c  **** 			N_AXIS * sizeof(float));
 2519              		.loc 1 1575 0
 2520 0e38 94E80700 		ldm	r4, {r0, r1, r2}
 2521 0e3c 794B     		ldr	r3, .L570+8
 2522 0e3e 83E80700 		stm	r3, {r0, r1, r2}
1577:grbl/gcode.c  **** 		}
 2523              		.loc 1 1577 0
 2524 0e42 FFF7FEFF 		bl	system_flag_wco_change
 2525              	.LVL291:
 2526 0e46 40E7     		b	.L205
 2527              	.L549:
1537:grbl/gcode.c  **** 		if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL)
 2528              		.loc 1 1537 0
 2529 0e48 B379     		ldrb	r3, [r6, #6]	@ zero_extendqisi2
 2530 0e4a 4B71     		strb	r3, [r1, #5]
1538:grbl/gcode.c  **** 		{ // G49
 2531              		.loc 1 1538 0
 2532 0e4c 0BB9     		cbnz	r3, .L201
1540:grbl/gcode.c  **** 		} // else G43.1
 2533              		.loc 1 1540 0
 2534 0e4e 0023     		movs	r3, #0
 2535 0e50 3364     		str	r3, [r6, #64]	@ float
 2536              	.L201:
1543:grbl/gcode.c  **** 		{
 2537              		.loc 1 1543 0
 2538 0e52 346C     		ldr	r4, [r6, #64]	@ float
1542:grbl/gcode.c  **** 				!= gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS])
 2539              		.loc 1 1542 0
 2540 0e54 714B     		ldr	r3, .L570
 2541 0e56 2146     		mov	r1, r4
 2542 0e58 586C     		ldr	r0, [r3, #68]	@ float
 2543 0e5a FFF7FEFF 		bl	__aeabi_fcmpeq
 2544              	.LVL292:
 2545 0e5e 0028     		cmp	r0, #0
 2546 0e60 7FF410AF 		bne	.L200
1545:grbl/gcode.c  **** 					gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS];
 2547              		.loc 1 1545 0
 2548 0e64 6D4B     		ldr	r3, .L570
 2549 0e66 5C64     		str	r4, [r3, #68]	@ float
1547:grbl/gcode.c  **** 		}
 2550              		.loc 1 1547 0
 2551 0e68 FFF7FEFF 		bl	system_flag_wco_change
 2552              	.LVL293:
 2553 0e6c 0AE7     		b	.L200
 2554              	.L552:
1666:grbl/gcode.c  **** 		if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED)
 2555              		.loc 1 1666 0
 2556 0e6e FFF7FEFF 		bl	protocol_buffer_synchronize
 2557              	.LVL294:
1667:grbl/gcode.c  **** 		{
 2558              		.loc 1 1667 0
 2559 0e72 6A4B     		ldr	r3, .L570
 2560 0e74 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2561 0e76 032B     		cmp	r3, #3
 2562 0e78 28D0     		beq	.L553
1698:grbl/gcode.c  **** 			sys.r_override = DEFAULT_RAPID_OVERRIDE;
 2563              		.loc 1 1698 0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 85


 2564 0e7a 46F26442 		movw	r2, #25700
1682:grbl/gcode.c  **** 			gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 2565              		.loc 1 1682 0
 2566 0e7e 0024     		movs	r4, #0
1681:grbl/gcode.c  **** 			gc_state.modal.plane_select = PLANE_SELECT_XY;
 2567              		.loc 1 1681 0
 2568 0e80 0120     		movs	r0, #1
1699:grbl/gcode.c  **** 			sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 2569              		.loc 1 1699 0
 2570 0e82 6421     		movs	r1, #100
1698:grbl/gcode.c  **** 			sys.r_override = DEFAULT_RAPID_OVERRIDE;
 2571              		.loc 1 1698 0
 2572 0e84 684B     		ldr	r3, .L570+12
1682:grbl/gcode.c  **** 			gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 2573              		.loc 1 1682 0
 2574 0e86 654D     		ldr	r5, .L570
1698:grbl/gcode.c  **** 			sys.r_override = DEFAULT_RAPID_OVERRIDE;
 2575              		.loc 1 1698 0
 2576 0e88 1A81     		strh	r2, [r3, #8]	@ movhi
1704:grbl/gcode.c  **** 			{
 2577              		.loc 1 1704 0
 2578 0e8a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1682:grbl/gcode.c  **** 			gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 2579              		.loc 1 1682 0
 2580 0e8c 2C71     		strb	r4, [r5, #4]
1704:grbl/gcode.c  **** 			{
 2581              		.loc 1 1704 0
 2582 0e8e 022A     		cmp	r2, #2
1683:grbl/gcode.c  **** 			gc_state.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 2583              		.loc 1 1683 0
 2584 0e90 EC70     		strb	r4, [r5, #3]
1686:grbl/gcode.c  **** 			gc_state.modal.spindle = SPINDLE_DISABLE;
 2585              		.loc 1 1686 0
 2586 0e92 AC71     		strb	r4, [r5, #6]
1688:grbl/gcode.c  **** #ifdef ENABLE_PARKING_OVERRIDE_CONTROL
 2587              		.loc 1 1688 0
 2588 0e94 2C81     		strh	r4, [r5, #8]	@ movhi
1681:grbl/gcode.c  **** 			gc_state.modal.plane_select = PLANE_SELECT_XY;
 2589              		.loc 1 1681 0
 2590 0e96 2880     		strh	r0, [r5]	@ movhi
1699:grbl/gcode.c  **** 			sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 2591              		.loc 1 1699 0
 2592 0e98 9972     		strb	r1, [r3, #10]
1704:grbl/gcode.c  **** 			{
 2593              		.loc 1 1704 0
 2594 0e9a 10D0     		beq	.L225
1706:grbl/gcode.c  **** 						gc_state.coord_system)))
 2595              		.loc 1 1706 0
 2596 0e9c 05F12C01 		add	r1, r5, #44
 2597 0ea0 2046     		mov	r0, r4
 2598 0ea2 FFF7FEFF 		bl	settings_read_coord_data
 2599              	.LVL295:
 2600 0ea6 0028     		cmp	r0, #0
 2601 0ea8 3FF420AE 		beq	.L290
1711:grbl/gcode.c  **** 				spindle_set_state(SPINDLE_DISABLE, 0.0);
 2602              		.loc 1 1711 0
 2603 0eac FFF7FEFF 		bl	system_flag_wco_change
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 86


 2604              	.LVL296:
1712:grbl/gcode.c  **** 				coolant_set_state(COOLANT_DISABLE);
 2605              		.loc 1 1712 0
 2606 0eb0 2046     		mov	r0, r4
 2607 0eb2 0021     		movs	r1, #0
 2608 0eb4 FFF7FEFF 		bl	spindle_set_state
 2609              	.LVL297:
1713:grbl/gcode.c  **** 			}
 2610              		.loc 1 1713 0
 2611 0eb8 2046     		mov	r0, r4
 2612 0eba FFF7FEFF 		bl	coolant_set_state
 2613              	.LVL298:
 2614              	.L225:
1715:grbl/gcode.c  **** 		}
 2615              		.loc 1 1715 0
 2616 0ebe 0820     		movs	r0, #8
 2617 0ec0 FFF7FEFF 		bl	report_feedback_message
 2618              	.LVL299:
 2619              	.L224:
1717:grbl/gcode.c  **** 	}
 2620              		.loc 1 1717 0
 2621 0ec4 0023     		movs	r3, #0
 2622 0ec6 554A     		ldr	r2, .L570
 2623 0ec8 D371     		strb	r3, [r2, #7]
 2624 0eca 0DE7     		b	.L222
 2625              	.L553:
1669:grbl/gcode.c  **** 			{
 2626              		.loc 1 1669 0
 2627 0ecc 564B     		ldr	r3, .L570+12
 2628 0ece 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2629 0ed0 022B     		cmp	r3, #2
 2630 0ed2 F7D0     		beq	.L224
1671:grbl/gcode.c  **** 				protocol_execute_realtime(); // Execute suspend.
 2631              		.loc 1 1671 0
 2632 0ed4 0820     		movs	r0, #8
 2633 0ed6 FFF7FEFF 		bl	system_set_exec_state_flag
 2634              	.LVL300:
1672:grbl/gcode.c  **** 			}
 2635              		.loc 1 1672 0
 2636 0eda FFF7FEFF 		bl	protocol_execute_realtime
 2637              	.LVL301:
 2638 0ede F1E7     		b	.L224
 2639              	.L551:
 2640              	.LVL302:
 2641              	.LBB17:
1618:grbl/gcode.c  **** 			{
 2642              		.loc 1 1618 0
 2643 0ee0 012B     		cmp	r3, #1
 2644 0ee2 00F04E82 		beq	.L554
1622:grbl/gcode.c  **** 			{
 2645              		.loc 1 1622 0
 2646 0ee6 002B     		cmp	r3, #0
 2647 0ee8 00F03E82 		beq	.L555
1627:grbl/gcode.c  **** 					|| (gc_state.modal.motion == MOTION_MODE_CCW_ARC))
 2648              		.loc 1 1627 0
 2649 0eec 023B     		subs	r3, r3, #2
 2650 0eee 012B     		cmp	r3, #1
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 87


 2651 0ef0 40F20882 		bls	.L556
1639:grbl/gcode.c  **** #endif
 2652              		.loc 1 1639 0
 2653 0ef4 9DF85C30 		ldrb	r3, [sp, #92]	@ zero_extendqisi2
1641:grbl/gcode.c  **** 						gc_parser_flags);
 2654              		.loc 1 1641 0
 2655 0ef8 4C4D     		ldr	r5, .L570+16
1639:grbl/gcode.c  **** #endif
 2656              		.loc 1 1639 0
 2657 0efa 43F00403 		orr	r3, r3, #4
1641:grbl/gcode.c  **** 						gc_parser_flags);
 2658              		.loc 1 1641 0
 2659 0efe 099A     		ldr	r2, [sp, #36]
 2660 0f00 15A9     		add	r1, sp, #84
 2661              	.LVL303:
 2662 0f02 2846     		mov	r0, r5
1639:grbl/gcode.c  **** #endif
 2663              		.loc 1 1639 0
 2664 0f04 8DF85C30 		strb	r3, [sp, #92]
1641:grbl/gcode.c  **** 						gc_parser_flags);
 2665              		.loc 1 1641 0
 2666 0f08 FFF7FEFF 		bl	mc_probe_cycle
 2667              	.LVL304:
1648:grbl/gcode.c  **** 			{
 2668              		.loc 1 1648 0
 2669 0f0c 0028     		cmp	r0, #0
 2670 0f0e 40F0F181 		bne	.L221
 2671 0f12 474C     		ldr	r4, .L570+20
 2672              	.LVL305:
 2673              	.L218:
1650:grbl/gcode.c  **** 						sizeof(gc_block.values.xyz)); // gc_state.position[] = gc_block.values.xyz[]
 2674              		.loc 1 1650 0
 2675 0f14 95E80700 		ldm	r5, {r0, r1, r2}
 2676 0f18 84E80700 		stm	r4, {r0, r1, r2}
 2677 0f1c DEE6     		b	.L215
 2678              	.L211:
 2679              	.LBE17:
1604:grbl/gcode.c  **** 		system_flag_wco_change();
 2680              		.loc 1 1604 0
 2681 0f1e 0023     		movs	r3, #0
 2682 0f20 444A     		ldr	r2, .L570+24
 2683 0f22 A2F13801 		sub	r1, r2, #56
 2684 0f26 8B63     		str	r3, [r1, #56]
 2685 0f28 C2E90133 		strd	r3, r3, [r2, #4]
1605:grbl/gcode.c  **** 		break;
 2686              		.loc 1 1605 0
 2687 0f2c FFF7FEFF 		bl	system_flag_wco_change
 2688              	.LVL306:
1606:grbl/gcode.c  **** 	}
 2689              		.loc 1 1606 0
 2690 0f30 CBE6     		b	.L205
 2691              	.L210:
1599:grbl/gcode.c  **** 				sizeof(gc_block.values.xyz));
 2692              		.loc 1 1599 0
 2693 0f32 404B     		ldr	r3, .L570+24
 2694 0f34 3D4A     		ldr	r2, .L570+16
 2695 0f36 07CA     		ldm	r2, {r0, r1, r2}
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 88


 2696 0f38 83E80700 		stm	r3, {r0, r1, r2}
1601:grbl/gcode.c  **** 		break;
 2697              		.loc 1 1601 0
 2698 0f3c FFF7FEFF 		bl	system_flag_wco_change
 2699              	.LVL307:
1602:grbl/gcode.c  **** 	case NON_MODAL_RESET_COORDINATE_OFFSET:
 2700              		.loc 1 1602 0
 2701 0f40 C3E6     		b	.L205
 2702              	.LVL308:
 2703              	.L518:
1405:grbl/gcode.c  **** 				{
 2704              		.loc 1 1405 0
 2705 0f42 364B     		ldr	r3, .L570
 2706 0f44 0999     		ldr	r1, [sp, #36]
 2707 0f46 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2708 0f48 01F04005 		and	r5, r1, #64
1403:grbl/gcode.c  **** 						|| (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 2709              		.loc 1 1403 0
 2710 0f4c 013B     		subs	r3, r3, #1
 2711 0f4e 022B     		cmp	r3, #2
 2712 0f50 EAB2     		uxtb	r2, r5
 2713 0f52 00F2C481 		bhi	.L188
1407:grbl/gcode.c  **** 					{
 2714              		.loc 1 1407 0
 2715 0f56 002A     		cmp	r2, #0
 2716 0f58 3FF445AE 		beq	.L185
1409:grbl/gcode.c  **** 					}
 2717              		.loc 1 1409 0
 2718 0f5c 41F02003 		orr	r3, r1, #32
 2719 0f60 DBB2     		uxtb	r3, r3
 2720 0f62 0993     		str	r3, [sp, #36]
 2721              	.LVL309:
 2722 0f64 03F04005 		and	r5, r3, #64
 2723 0f68 3DE6     		b	.L185
 2724              	.LVL310:
 2725              	.L197:
1502:grbl/gcode.c  **** 		}
 2726              		.loc 1 1502 0
 2727 0f6a 2C4A     		ldr	r2, .L570
 2728 0f6c 9DF85C40 		ldrb	r4, [sp, #92]	@ zero_extendqisi2
 2729 0f70 137A     		ldrb	r3, [r2, #8]	@ zero_extendqisi2
 2730 0f72 1843     		orrs	r0, r0, r3
 2731 0f74 1072     		strb	r0, [r2, #8]
 2732 0f76 75E6     		b	.L196
 2733              	.L193:
1459:grbl/gcode.c  **** 				}
 2734              		.loc 1 1459 0
 2735 0f78 3946     		mov	r1, r7
 2736 0f7a 2046     		mov	r0, r4
 2737 0f7c FFF7FEFF 		bl	spindle_sync
 2738              	.LVL311:
 2739 0f80 264B     		ldr	r3, .L570
 2740 0f82 376B     		ldr	r7, [r6, #48]	@ float
 2741 0f84 5C7A     		ldrb	r4, [r3, #9]	@ zero_extendqisi2
 2742 0f86 FAE6     		b	.L192
 2743              	.LVL312:
 2744              	.L110:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 89


 882:grbl/gcode.c  **** 			{
 2745              		.loc 1 882 0
 2746 0f88 D807     		lsls	r0, r3, #31
 2747 0f8a 08D5     		bpl	.L115
 889:grbl/gcode.c  **** 					if (idx == TOOL_LENGTH_OFFSET_AXIS)
 2748              		.loc 1 889 0
 2749 0f8c 234B     		ldr	r3, .L570
 2750 0f8e 996B     		ldr	r1, [r3, #56]	@ float
 2751 0f90 186A     		ldr	r0, [r3, #32]	@ float
 2752 0f92 FFF7FEFF 		bl	__aeabi_fsub
 2753              	.LVL313:
 2754 0f96 B16B     		ldr	r1, [r6, #56]	@ float
 2755 0f98 FFF7FEFF 		bl	__aeabi_fsub
 2756              	.LVL314:
 888:grbl/gcode.c  **** 							- gc_state.coord_offset[idx] - gc_block.values.xyz[idx];
 2757              		.loc 1 888 0
 2758 0f9c 7061     		str	r0, [r6, #20]	@ float
 2759              	.L115:
 2760              	.LVL315:
 882:grbl/gcode.c  **** 			{
 2761              		.loc 1 882 0
 2762 0f9e 069B     		ldr	r3, [sp, #24]
 2763 0fa0 9907     		lsls	r1, r3, #30
 2764 0fa2 08D5     		bpl	.L116
 889:grbl/gcode.c  **** 					if (idx == TOOL_LENGTH_OFFSET_AXIS)
 2765              		.loc 1 889 0
 2766 0fa4 1D4B     		ldr	r3, .L570
 2767 0fa6 D96B     		ldr	r1, [r3, #60]	@ float
 2768 0fa8 586A     		ldr	r0, [r3, #36]	@ float
 2769 0faa FFF7FEFF 		bl	__aeabi_fsub
 2770              	.LVL316:
 2771 0fae F16B     		ldr	r1, [r6, #60]	@ float
 2772 0fb0 FFF7FEFF 		bl	__aeabi_fsub
 2773              	.LVL317:
 888:grbl/gcode.c  **** 							- gc_state.coord_offset[idx] - gc_block.values.xyz[idx];
 2774              		.loc 1 888 0
 2775 0fb4 B061     		str	r0, [r6, #24]	@ float
 2776              	.L116:
 2777              	.LVL318:
 882:grbl/gcode.c  **** 			{
 2778              		.loc 1 882 0
 2779 0fb6 069B     		ldr	r3, [sp, #24]
 2780 0fb8 5A07     		lsls	r2, r3, #29
 2781 0fba 7FF534AD 		bpl	.L114
 889:grbl/gcode.c  **** 					if (idx == TOOL_LENGTH_OFFSET_AXIS)
 2782              		.loc 1 889 0
 2783 0fbe 174B     		ldr	r3, .L570
 2784 0fc0 1C46     		mov	r4, r3
 2785 0fc2 196C     		ldr	r1, [r3, #64]	@ float
 2786 0fc4 986A     		ldr	r0, [r3, #40]	@ float
 2787 0fc6 FFF7FEFF 		bl	__aeabi_fsub
 2788              	.LVL319:
 2789 0fca 316C     		ldr	r1, [r6, #64]	@ float
 2790 0fcc FFF7FEFF 		bl	__aeabi_fsub
 2791              	.LVL320:
 892:grbl/gcode.c  **** 					}
 2792              		.loc 1 892 0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 90


 2793 0fd0 616C     		ldr	r1, [r4, #68]	@ float
 2794 0fd2 FFF7FEFF 		bl	__aeabi_fsub
 2795              	.LVL321:
 2796 0fd6 7478     		ldrb	r4, [r6, #1]	@ zero_extendqisi2
 2797 0fd8 F061     		str	r0, [r6, #28]	@ float
 2798              	.LVL322:
 2799 0fda FFF71CBA 		b	.L117
 2800              	.LVL323:
 2801              	.L206:
1593:grbl/gcode.c  **** 		break;
 2802              		.loc 1 1593 0
 2803 0fde 1449     		ldr	r1, .L570+20
 2804 0fe0 0620     		movs	r0, #6
 2805 0fe2 FFF7FEFF 		bl	settings_write_coord_data
 2806              	.LVL324:
1594:grbl/gcode.c  **** 	case NON_MODAL_SET_HOME_1:
 2807              		.loc 1 1594 0
 2808 0fe6 70E6     		b	.L205
 2809              	.L548:
1519:grbl/gcode.c  **** 	}
 2810              		.loc 1 1519 0
 2811 0fe8 B06A     		ldr	r0, [r6, #40]	@ float
 2812 0fea FFF7FEFF 		bl	mc_dwell
 2813              	.LVL325:
 2814 0fee 40E6     		b	.L198
 2815              	.L208:
1584:grbl/gcode.c  **** 		if (axis_command)
 2816              		.loc 1 1584 0
 2817 0ff0 9DF85C30 		ldrb	r3, [sp, #92]	@ zero_extendqisi2
 2818 0ff4 43F00103 		orr	r3, r3, #1
 2819 0ff8 8DF85C30 		strb	r3, [sp, #92]
1585:grbl/gcode.c  **** 		{
 2820              		.loc 1 1585 0
 2821 0ffc 079B     		ldr	r3, [sp, #28]
 2822 0ffe 002B     		cmp	r3, #0
 2823 1000 40F0C681 		bne	.L557
 2824              	.L213:
1589:grbl/gcode.c  **** 		memcpy(gc_state.position, gc_block.values.ijk, N_AXIS * sizeof(float));
 2825              		.loc 1 1589 0
 2826 1004 064D     		ldr	r5, .L570+4
1590:grbl/gcode.c  **** 		break;
 2827              		.loc 1 1590 0
 2828 1006 0A4C     		ldr	r4, .L570+20
1589:grbl/gcode.c  **** 		memcpy(gc_state.position, gc_block.values.ijk, N_AXIS * sizeof(float));
 2829              		.loc 1 1589 0
 2830 1008 2846     		mov	r0, r5
 2831 100a 15A9     		add	r1, sp, #84
 2832              	.LVL326:
 2833 100c FFF7FEFF 		bl	mc_line
 2834              	.LVL327:
1590:grbl/gcode.c  **** 		break;
 2835              		.loc 1 1590 0
 2836 1010 95E80700 		ldm	r5, {r0, r1, r2}
 2837 1014 84E80700 		stm	r4, {r0, r1, r2}
1591:grbl/gcode.c  **** 	case NON_MODAL_SET_HOME_0:
 2838              		.loc 1 1591 0
 2839 1018 57E6     		b	.L205
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 91


 2840              	.L571:
 2841 101a 00BF     		.align	2
 2842              	.L570:
 2843 101c 00000000 		.word	gc_state
 2844 1020 14000000 		.word	gc_block+20
 2845 1024 2C000000 		.word	gc_state+44
 2846 1028 00000000 		.word	sys
 2847 102c 38000000 		.word	gc_block+56
 2848 1030 20000000 		.word	gc_state+32
 2849 1034 38000000 		.word	gc_state+56
 2850              	.LVL328:
 2851              	.L277:
 2852              	.LBB20:
1078:grbl/gcode.c  **** 			case MOTION_MODE_CCW_ARC:
 2853              		.loc 1 1078 0
 2854 1038 0B9B     		ldr	r3, [sp, #44]
 2855 103a 0993     		str	r3, [sp, #36]
 2856              	.L160:
 2857              	.LVL329:
1087:grbl/gcode.c  **** 				{
 2858              		.loc 1 1087 0
 2859 103c 069B     		ldr	r3, [sp, #24]
 2860 103e 002B     		cmp	r3, #0
 2861 1040 3FF417AD 		beq	.L118
1091:grbl/gcode.c  **** 				{
 2862              		.loc 1 1091 0
 2863 1044 2B42     		tst	r3, r5
 2864 1046 00F03F81 		beq	.L279
1098:grbl/gcode.c  **** 				y = gc_block.values.xyz[axis_1] - gc_state.position[axis_1]; // Delta y between current positio
 2865              		.loc 1 1098 0
 2866 104a C14C     		ldr	r4, .L572+24
 2867 104c 0AF10E02 		add	r2, r10, #14
 2868 1050 0AF10803 		add	r3, r10, #8
 2869 1054 54F82310 		ldr	r1, [r4, r3, lsl #2]	@ float
 2870 1058 56F82200 		ldr	r0, [r6, r2, lsl #2]	@ float
 2871 105c FFF7FEFF 		bl	__aeabi_fsub
 2872              	.LVL330:
1099:grbl/gcode.c  **** 
 2873              		.loc 1 1099 0
 2874 1060 09F10E02 		add	r2, r9, #14
 2875 1064 09F10803 		add	r3, r9, #8
1098:grbl/gcode.c  **** 				y = gc_block.values.xyz[axis_1] - gc_state.position[axis_1]; // Delta y between current positio
 2876              		.loc 1 1098 0
 2877 1068 0A90     		str	r0, [sp, #40]	@ float
 2878              	.LVL331:
1099:grbl/gcode.c  **** 
 2879              		.loc 1 1099 0
 2880 106a 54F82310 		ldr	r1, [r4, r3, lsl #2]	@ float
 2881 106e 56F82200 		ldr	r0, [r6, r2, lsl #2]	@ float
 2882              	.LVL332:
 2883 1072 FFF7FEFF 		bl	__aeabi_fsub
 2884              	.LVL333:
1101:grbl/gcode.c  **** 				{ // Arc Radius Mode
 2885              		.loc 1 1101 0
 2886 1076 18F08004 		ands	r4, r8, #128
1099:grbl/gcode.c  **** 
 2887              		.loc 1 1099 0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 92


 2888 107a 8346     		mov	fp, r0
 2889              	.LVL334:
1101:grbl/gcode.c  **** 				{ // Arc Radius Mode
 2890              		.loc 1 1101 0
 2891 107c 00F0BB80 		beq	.L164
 2892              	.LBB11:
1104:grbl/gcode.c  **** 					{
 2893              		.loc 1 1104 0
 2894 1080 0C22     		movs	r2, #12
 2895 1082 B449     		ldr	r1, .L572+28
 2896 1084 B448     		ldr	r0, .L572+32
 2897              	.LVL335:
1103:grbl/gcode.c  **** 					if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 2898              		.loc 1 1103 0
 2899 1086 28F08008 		bic	r8, r8, #128
 2900              	.LVL336:
1104:grbl/gcode.c  **** 					{
 2901              		.loc 1 1104 0
 2902 108a FFF7FEFF 		bl	memcmp
 2903              	.LVL337:
 2904 108e 0028     		cmp	r0, #0
 2905 1090 00F0FC80 		beq	.L174
 2906 1094 F06A     		ldr	r0, [r6, #44]	@ float
 2907 1096 FFF7FEFF 		bl	__aeabi_f2d
 2908              	.LVL338:
1110:grbl/gcode.c  **** 					{
 2909              		.loc 1 1110 0
 2910 109a F378     		ldrb	r3, [r6, #3]	@ zero_extendqisi2
 2911 109c 012B     		cmp	r3, #1
 2912 109e 07D1     		bne	.L166
1112:grbl/gcode.c  **** 					}
 2913              		.loc 1 1112 0
 2914 10a0 A5A3     		adr	r3, .L572
 2915 10a2 D3E90023 		ldrd	r2, [r3]
 2916 10a6 FFF7FEFF 		bl	__aeabi_dmul
 2917              	.LVL339:
 2918 10aa FFF7FEFF 		bl	__aeabi_d2f
 2919              	.LVL340:
 2920 10ae F062     		str	r0, [r6, #44]	@ float
 2921              	.L166:
1164:grbl/gcode.c  **** 							- y * y;
 2922              		.loc 1 1164 0
 2923 10b0 F06A     		ldr	r0, [r6, #44]	@ float
 2924 10b2 FFF7FEFF 		bl	__aeabi_f2d
 2925              	.LVL341:
 2926 10b6 0446     		mov	r4, r0
 2927 10b8 0D46     		mov	r5, r1
 2928 10ba 0022     		movs	r2, #0
 2929 10bc A74B     		ldr	r3, .L572+36
 2930 10be FFF7FEFF 		bl	__aeabi_dmul
 2931              	.LVL342:
 2932 10c2 2246     		mov	r2, r4
 2933 10c4 2B46     		mov	r3, r5
 2934 10c6 FFF7FEFF 		bl	__aeabi_dmul
 2935              	.LVL343:
 2936 10ca 0A9B     		ldr	r3, [sp, #40]	@ float
 2937 10cc 0446     		mov	r4, r0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 93


 2938 10ce 0D46     		mov	r5, r1
 2939 10d0 1846     		mov	r0, r3
 2940 10d2 1946     		mov	r1, r3
 2941 10d4 FFF7FEFF 		bl	__aeabi_fmul
 2942              	.LVL344:
 2943 10d8 FFF7FEFF 		bl	__aeabi_f2d
 2944              	.LVL345:
 2945 10dc 0246     		mov	r2, r0
 2946 10de 0B46     		mov	r3, r1
 2947 10e0 2046     		mov	r0, r4
 2948 10e2 2946     		mov	r1, r5
 2949 10e4 FFF7FEFF 		bl	__aeabi_dsub
 2950              	.LVL346:
 2951 10e8 0446     		mov	r4, r0
 2952 10ea 0D46     		mov	r5, r1
1165:grbl/gcode.c  **** 
 2953              		.loc 1 1165 0
 2954 10ec 5846     		mov	r0, fp
 2955 10ee 5946     		mov	r1, fp
 2956 10f0 FFF7FEFF 		bl	__aeabi_fmul
 2957              	.LVL347:
 2958 10f4 FFF7FEFF 		bl	__aeabi_f2d
 2959              	.LVL348:
 2960 10f8 0246     		mov	r2, r0
 2961 10fa 0B46     		mov	r3, r1
 2962 10fc 2046     		mov	r0, r4
 2963 10fe 2946     		mov	r1, r5
 2964 1100 FFF7FEFF 		bl	__aeabi_dsub
 2965              	.LVL349:
1164:grbl/gcode.c  **** 							- y * y;
 2966              		.loc 1 1164 0
 2967 1104 FFF7FEFF 		bl	__aeabi_d2f
 2968              	.LVL350:
1167:grbl/gcode.c  **** 					{
 2969              		.loc 1 1167 0
 2970 1108 0021     		movs	r1, #0
1164:grbl/gcode.c  **** 							- y * y;
 2971              		.loc 1 1164 0
 2972 110a 0446     		mov	r4, r0
 2973              	.LVL351:
1167:grbl/gcode.c  **** 					{
 2974              		.loc 1 1167 0
 2975 110c FFF7FEFF 		bl	__aeabi_fcmplt
 2976              	.LVL352:
 2977 1110 0028     		cmp	r0, #0
 2978 1112 40F00D81 		bne	.L280
1173:grbl/gcode.c  **** 					// Invert the sign of h_x2_div_d if the circle is counter clockwise (see sketch below)
 2979              		.loc 1 1173 0
 2980 1116 2046     		mov	r0, r4
 2981 1118 FFF7FEFF 		bl	__aeabi_f2d
 2982              	.LVL353:
 2983 111c FFF7FEFF 		bl	sqrt
 2984              	.LVL354:
 2985 1120 0546     		mov	r5, r0
 2986 1122 0C46     		mov	r4, r1
 2987              	.LVL355:
 2988 1124 0A98     		ldr	r0, [sp, #40]	@ float
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 94


 2989 1126 5946     		mov	r1, fp
 2990 1128 FFF7FEFF 		bl	hypot_f
 2991              	.LVL356:
 2992 112c FFF7FEFF 		bl	__aeabi_f2d
 2993              	.LVL357:
 2994 1130 04F10044 		add	r4, r4, #-2147483648
 2995 1134 0B46     		mov	r3, r1
 2996 1136 0246     		mov	r2, r0
 2997 1138 2146     		mov	r1, r4
 2998 113a 2846     		mov	r0, r5
 2999 113c FFF7FEFF 		bl	__aeabi_ddiv
 3000              	.LVL358:
 3001 1140 FFF7FEFF 		bl	__aeabi_d2f
 3002              	.LVL359:
1175:grbl/gcode.c  **** 					{
 3003              		.loc 1 1175 0
 3004 1144 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1199:grbl/gcode.c  **** 					{
 3005              		.loc 1 1199 0
 3006 1146 F56A     		ldr	r5, [r6, #44]	@ float
1175:grbl/gcode.c  **** 					{
 3007              		.loc 1 1175 0
 3008 1148 032B     		cmp	r3, #3
1173:grbl/gcode.c  **** 					// Invert the sign of h_x2_div_d if the circle is counter clockwise (see sketch below)
 3009              		.loc 1 1173 0
 3010 114a 0446     		mov	r4, r0
 3011              	.LVL360:
1199:grbl/gcode.c  **** 					{
 3012              		.loc 1 1199 0
 3013 114c 4FF00001 		mov	r1, #0
1177:grbl/gcode.c  **** 					}
 3014              		.loc 1 1177 0
 3015 1150 08BF     		it	eq
 3016 1152 00F10044 		addeq	r4, r0, #-2147483648
 3017              	.LVL361:
1199:grbl/gcode.c  **** 					{
 3018              		.loc 1 1199 0
 3019 1156 2846     		mov	r0, r5
 3020 1158 FFF7FEFF 		bl	__aeabi_fcmplt
 3021              	.LVL362:
 3022 115c 20B1     		cbz	r0, .L168
1202:grbl/gcode.c  **** 					}
 3023              		.loc 1 1202 0
 3024 115e 05F10045 		add	r5, r5, #-2147483648
1201:grbl/gcode.c  **** 						gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 3025              		.loc 1 1201 0
 3026 1162 04F10044 		add	r4, r4, #-2147483648
 3027              	.LVL363:
1202:grbl/gcode.c  **** 					}
 3028              		.loc 1 1202 0
 3029 1166 F562     		str	r5, [r6, #44]	@ float
 3030              	.LVL364:
 3031              	.L168:
1205:grbl/gcode.c  **** 					gc_block.values.ijk[axis_1] = 0.5 * (y + (x * h_x2_div_d));
 3032              		.loc 1 1205 0
 3033 1168 5946     		mov	r1, fp
 3034 116a 2046     		mov	r0, r4
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 95


 3035 116c FFF7FEFF 		bl	__aeabi_fmul
 3036              	.LVL365:
 3037 1170 0AF10405 		add	r5, r10, #4
 3038 1174 DDF828A0 		ldr	r10, [sp, #40]	@ float
 3039 1178 0146     		mov	r1, r0
 3040 117a 5046     		mov	r0, r10
 3041 117c FFF7FEFF 		bl	__aeabi_fsub
 3042              	.LVL366:
 3043 1180 4FF07C51 		mov	r1, #1056964608
 3044 1184 FFF7FEFF 		bl	__aeabi_fmul
 3045              	.LVL367:
 3046 1188 06EB8505 		add	r5, r6, r5, lsl #2
 3047 118c 6860     		str	r0, [r5, #4]	@ float
1206:grbl/gcode.c  **** 
 3048              		.loc 1 1206 0
 3049 118e 5146     		mov	r1, r10
 3050 1190 2046     		mov	r0, r4
 3051 1192 FFF7FEFF 		bl	__aeabi_fmul
 3052              	.LVL368:
 3053 1196 5946     		mov	r1, fp
 3054 1198 FFF7FEFF 		bl	__aeabi_fadd
 3055              	.LVL369:
 3056 119c 4FF07C51 		mov	r1, #1056964608
 3057 11a0 FFF7FEFF 		bl	__aeabi_fmul
 3058              	.LVL370:
 3059 11a4 09F10409 		add	r9, r9, #4
 3060 11a8 099B     		ldr	r3, [sp, #36]
 3061 11aa 06EB8909 		add	r9, r6, r9, lsl #2
 3062 11ae 03F00102 		and	r2, r3, #1
 3063 11b2 C9F80400 		str	r0, [r9, #4]	@ float
 3064              	.LBE11:
 3065 11b6 FFF7A5BB 		b	.L152
 3066              	.LVL371:
 3067              	.L159:
 3068              	.LBE20:
1067:grbl/gcode.c  **** 			{
 3069              		.loc 1 1067 0
 3070 11ba 8E2C     		cmp	r4, #142
 3071 11bc 05D0     		beq	.L158
 3072 11be 02D3     		bcc	.L163
 3073 11c0 8F2C     		cmp	r4, #143
 3074 11c2 7FF437AC 		bne	.L276
 3075              	.L163:
 3076              	.LBB21:
1255:grbl/gcode.c  **** 			case MOTION_MODE_PROBE_TOWARD:
 3077              		.loc 1 1255 0
 3078 11c6 0A9B     		ldr	r3, [sp, #40]
 3079 11c8 0993     		str	r3, [sp, #36]
 3080              	.L158:
 3081              	.LVL372:
1259:grbl/gcode.c  **** 				{
 3082              		.loc 1 1259 0
 3083 11ca 04F17203 		add	r3, r4, #114
1258:grbl/gcode.c  **** 						|| (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR))
 3084              		.loc 1 1258 0
 3085 11ce DBB2     		uxtb	r3, r3
 3086 11d0 012B     		cmp	r3, #1
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 96


 3087 11d2 40F2E280 		bls	.L558
 3088              	.L175:
1267:grbl/gcode.c  **** 				{
 3089              		.loc 1 1267 0
 3090 11d6 069B     		ldr	r3, [sp, #24]
 3091 11d8 002B     		cmp	r3, #0
 3092 11da 3FF44AAC 		beq	.L118
1271:grbl/gcode.c  **** 				{
 3093              		.loc 1 1271 0
 3094 11de 0C22     		movs	r2, #12
 3095 11e0 5C49     		ldr	r1, .L572+28
 3096 11e2 5D48     		ldr	r0, .L572+32
 3097 11e4 FFF7FEFF 		bl	memcmp
 3098              	.LVL373:
 3099 11e8 0028     		cmp	r0, #0
 3100 11ea 4FD0     		beq	.L174
 3101              	.L526:
 3102 11ec 099B     		ldr	r3, [sp, #36]
 3103 11ee 03F00102 		and	r2, r3, #1
 3104 11f2 FFF787BB 		b	.L152
 3105              	.LVL374:
 3106              	.L164:
 3107              	.LBB12:
1211:grbl/gcode.c  **** 					{
 3108              		.loc 1 1211 0
 3109 11f6 089B     		ldr	r3, [sp, #32]
 3110 11f8 2B42     		tst	r3, r5
 3111 11fa 62D0     		beq	.L281
1218:grbl/gcode.c  **** 					{
 3112              		.loc 1 1218 0
 3113 11fc F378     		ldrb	r3, [r6, #3]	@ zero_extendqisi2
1215:grbl/gcode.c  **** 
 3114              		.loc 1 1215 0
 3115 11fe 28F00E08 		bic	r8, r8, #14
 3116              	.LVL375:
1218:grbl/gcode.c  **** 					{
 3117              		.loc 1 1218 0
 3118 1202 012B     		cmp	r3, #1
 3119 1204 45D0     		beq	.L559
 3120              	.LVL376:
 3121              	.L170:
1231:grbl/gcode.c  **** 					float target_r = hypot_f(x, y);
 3122              		.loc 1 1231 0
 3123 1206 09F10405 		add	r5, r9, #4
 3124              	.LVL377:
 3125 120a 06EB8505 		add	r5, r6, r5, lsl #2
 3126              	.LVL378:
 3127 120e 6968     		ldr	r1, [r5, #4]	@ float
 3128 1210 5846     		mov	r0, fp
 3129 1212 FFF7FEFF 		bl	__aeabi_fsub
 3130              	.LVL379:
 3131 1216 8146     		mov	r9, r0
1230:grbl/gcode.c  **** 					y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 3132              		.loc 1 1230 0
 3133 1218 0AF10404 		add	r4, r10, #4
 3134 121c 06EB8404 		add	r4, r6, r4, lsl #2
 3135 1220 6168     		ldr	r1, [r4, #4]	@ float
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 97


 3136 1222 0A98     		ldr	r0, [sp, #40]	@ float
 3137 1224 FFF7FEFF 		bl	__aeabi_fsub
 3138              	.LVL380:
1232:grbl/gcode.c  **** 
 3139              		.loc 1 1232 0
 3140 1228 4946     		mov	r1, r9
 3141 122a FFF7FEFF 		bl	hypot_f
 3142              	.LVL381:
1235:grbl/gcode.c  **** 							gc_block.values.ijk[axis_1]);
 3143              		.loc 1 1235 0
 3144 122e 6968     		ldr	r1, [r5, #4]	@ float
1232:grbl/gcode.c  **** 
 3145              		.loc 1 1232 0
 3146 1230 8146     		mov	r9, r0
 3147              	.LVL382:
1235:grbl/gcode.c  **** 							gc_block.values.ijk[axis_1]);
 3148              		.loc 1 1235 0
 3149 1232 6068     		ldr	r0, [r4, #4]	@ float
 3150              	.LVL383:
 3151 1234 FFF7FEFF 		bl	hypot_f
 3152              	.LVL384:
 3153 1238 0546     		mov	r5, r0
1239:grbl/gcode.c  **** 					if (delta_r > 0.005)
 3154              		.loc 1 1239 0
 3155 123a 4846     		mov	r0, r9
 3156 123c 2946     		mov	r1, r5
1235:grbl/gcode.c  **** 							gc_block.values.ijk[axis_1]);
 3157              		.loc 1 1235 0
 3158 123e F562     		str	r5, [r6, #44]	@ float
1239:grbl/gcode.c  **** 					if (delta_r > 0.005)
 3159              		.loc 1 1239 0
 3160 1240 FFF7FEFF 		bl	__aeabi_fsub
 3161              	.LVL385:
 3162 1244 20F00044 		bic	r4, r0, #-2147483648
 3163              	.LVL386:
1240:grbl/gcode.c  **** 					{
 3164              		.loc 1 1240 0
 3165 1248 2046     		mov	r0, r4
 3166 124a FFF7FEFF 		bl	__aeabi_f2d
 3167              	.LVL387:
 3168 124e 3CA3     		adr	r3, .L572+8
 3169 1250 D3E90023 		ldrd	r2, [r3]
 3170 1254 8246     		mov	r10, r0
 3171 1256 8B46     		mov	fp, r1
 3172 1258 FFF7FEFF 		bl	__aeabi_dcmpgt
 3173              	.LVL388:
 3174 125c 0028     		cmp	r0, #0
 3175 125e C5D0     		beq	.L526
1242:grbl/gcode.c  **** 						{
 3176              		.loc 1 1242 0
 3177 1260 2046     		mov	r0, r4
 3178 1262 4FF07C51 		mov	r1, #1056964608
 3179 1266 FFF7FEFF 		bl	__aeabi_fcmpgt
 3180              	.LVL389:
 3181 126a 78B9     		cbnz	r0, .L174
1246:grbl/gcode.c  **** 						{
 3182              		.loc 1 1246 0
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 98


 3183 126c 2846     		mov	r0, r5
 3184 126e FFF7FEFF 		bl	__aeabi_f2d
 3185              	.LVL390:
 3186 1272 35A3     		adr	r3, .L572+16
 3187 1274 D3E90023 		ldrd	r2, [r3]
 3188 1278 FFF7FEFF 		bl	__aeabi_dmul
 3189              	.LVL391:
 3190 127c 0246     		mov	r2, r0
 3191 127e 0B46     		mov	r3, r1
 3192 1280 5046     		mov	r0, r10
 3193 1282 5946     		mov	r1, fp
 3194 1284 FFF7FEFF 		bl	__aeabi_dcmpgt
 3195              	.LVL392:
 3196 1288 0028     		cmp	r0, #0
 3197 128a AFD0     		beq	.L526
 3198              	.LVL393:
 3199              	.L174:
 3200              	.LBE12:
 3201              	.LBB13:
1106:grbl/gcode.c  **** 					} // [Invalid target]
 3202              		.loc 1 1106 0
 3203 128c 2123     		movs	r3, #33
 3204 128e FFF71EB8 		b	.L298
 3205              	.LVL394:
 3206              	.L559:
 3207 1292 334D     		ldr	r5, .L572+40
 3208              	.LVL395:
 3209              	.L172:
 3210              	.LBE13:
 3211              	.LBB14:
1222:grbl/gcode.c  **** 							{
 3212              		.loc 1 1222 0
 3213 1294 089B     		ldr	r3, [sp, #32]
 3214 1296 2341     		asrs	r3, r3, r4
 3215 1298 13F0010F 		tst	r3, #1
 3216 129c 04F10104 		add	r4, r4, #1
 3217              	.LVL396:
 3218 12a0 0AD0     		beq	.L171
1224:grbl/gcode.c  **** 							}
 3219              		.loc 1 1224 0
 3220 12a2 2868     		ldr	r0, [r5]	@ float
 3221 12a4 FFF7FEFF 		bl	__aeabi_f2d
 3222              	.LVL397:
 3223 12a8 23A3     		adr	r3, .L572
 3224 12aa D3E90023 		ldrd	r2, [r3]
 3225 12ae FFF7FEFF 		bl	__aeabi_dmul
 3226              	.LVL398:
 3227 12b2 FFF7FEFF 		bl	__aeabi_d2f
 3228              	.LVL399:
 3229 12b6 2860     		str	r0, [r5]	@ float
 3230              	.L171:
1220:grbl/gcode.c  **** 						{ // Axes indices are consistent, so loop may be used to save flash space.
 3231              		.loc 1 1220 0 discriminator 2
 3232 12b8 032C     		cmp	r4, #3
 3233 12ba 05F10405 		add	r5, r5, #4
 3234 12be E9D1     		bne	.L172
 3235 12c0 A1E7     		b	.L170
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 99


 3236              	.LVL400:
 3237              	.L281:
1213:grbl/gcode.c  **** 					} // [No offsets in plane]
 3238              		.loc 1 1213 0
 3239 12c2 2323     		movs	r3, #35
 3240 12c4 FFF703B8 		b	.L298
 3241              	.LVL401:
 3242              	.L279:
 3243              	.LBE14:
1093:grbl/gcode.c  **** 				} // [No axis words in plane]
 3244              		.loc 1 1093 0
 3245 12c8 2023     		movs	r3, #32
 3246 12ca FFF700B8 		b	.L298
 3247              	.LVL402:
 3248              	.L547:
 3249              	.LBE21:
1395:grbl/gcode.c  **** 		}
 3250              		.loc 1 1395 0
 3251 12ce 099B     		ldr	r3, [sp, #36]
 3252 12d0 63F07F03 		orn	r3, r3, #127
 3253 12d4 DBB2     		uxtb	r3, r3
 3254 12d6 0993     		str	r3, [sp, #36]
 3255              	.LVL403:
 3256 12d8 03F04005 		and	r5, r3, #64
 3257 12dc 83E4     		b	.L185
 3258              	.LVL404:
 3259              	.L188:
1415:grbl/gcode.c  **** 					{
 3260              		.loc 1 1415 0
 3261 12de 002A     		cmp	r2, #0
 3262 12e0 7FF481AC 		bne	.L185
1417:grbl/gcode.c  **** 					}
 3263              		.loc 1 1417 0
 3264 12e4 099B     		ldr	r3, [sp, #36]
 3265 12e6 43F02003 		orr	r3, r3, #32
 3266 12ea DBB2     		uxtb	r3, r3
 3267 12ec 0993     		str	r3, [sp, #36]
 3268              	.LVL405:
 3269 12ee 03F04005 		and	r5, r3, #64
 3270 12f2 78E4     		b	.L185
 3271              	.LVL406:
 3272              	.L221:
 3273              	.LBB22:
1653:grbl/gcode.c  **** 			{
 3274              		.loc 1 1653 0
 3275 12f4 0128     		cmp	r0, #1
 3276 12f6 7FF4F1AC 		bne	.L215
 3277              	.LBB18:
 3278              	.LBB19:
  58:grbl/gcode.c  **** }
 3279              		.loc 1 58 0
 3280 12fa 1A49     		ldr	r1, .L572+44
 3281 12fc 1648     		ldr	r0, .L572+32
 3282              	.LVL407:
 3283 12fe FFF7FEFF 		bl	system_convert_array_steps_to_mpos
 3284              	.LVL408:
 3285 1302 EBE4     		b	.L215
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 100


 3286              	.LVL409:
 3287              	.L556:
 3288              	.LBE19:
 3289              	.LBE18:
1630:grbl/gcode.c  **** 						gc_block.values.ijk, gc_block.values.r, axis_0, axis_1, axis_linear,
 3290              		.loc 1 1630 0
 3291 1304 099B     		ldr	r3, [sp, #36]
 3292 1306 134D     		ldr	r5, .L572+28
 3293 1308 C3F38003 		ubfx	r3, r3, #2, #1
 3294 130c 0493     		str	r3, [sp, #16]
 3295 130e 0E9B     		ldr	r3, [sp, #56]
 3296 1310 114C     		ldr	r4, .L572+32
 3297 1312 0393     		str	r3, [sp, #12]
 3298 1314 0D9B     		ldr	r3, [sp, #52]
 3299 1316 F76A     		ldr	r7, [r6, #44]	@ float
 3300 1318 0293     		str	r3, [sp, #8]
 3301 131a 0C9B     		ldr	r3, [sp, #48]
 3302 131c 15A9     		add	r1, sp, #84
 3303              	.LVL410:
 3304 131e 0193     		str	r3, [sp, #4]
 3305 1320 2246     		mov	r2, r4
 3306 1322 A5F12403 		sub	r3, r5, #36
 3307 1326 2846     		mov	r0, r5
 3308 1328 0097     		str	r7, [sp]	@ float
 3309 132a FFF7FEFF 		bl	mc_arc
 3310              	.LVL411:
 3311 132e F1E5     		b	.L218
 3312              	.LVL412:
 3313              	.L280:
 3314              	.LBE22:
 3315              	.LBB23:
 3316              	.LBB15:
1169:grbl/gcode.c  **** 					} // [Arc radius error]
 3317              		.loc 1 1169 0
 3318 1330 2223     		movs	r3, #34
 3319 1332 FEF7CCBF 		b	.L298
 3320              	.L573:
 3321 1336 00BF     		.align	3
 3322              	.L572:
 3323 1338 66666666 		.word	1717986918
 3324 133c 66663940 		.word	1077503590
 3325 1340 7B14AE47 		.word	1202590843
 3326 1344 E17A743F 		.word	1064598241
 3327 1348 FCA9F1D2 		.word	3539053052
 3328 134c 4D62503F 		.word	1062232653
 3329 1350 00000000 		.word	gc_state
 3330 1354 38000000 		.word	gc_block+56
 3331 1358 20000000 		.word	gc_state+32
 3332 135c 00001040 		.word	1074790400
 3333 1360 14000000 		.word	gc_block+20
 3334 1364 00000000 		.word	sys_position
 3335              	.LVL413:
 3336              	.L555:
 3337              	.LBE15:
 3338              	.LBE23:
 3339              	.LBB24:
1624:grbl/gcode.c  **** 				mc_line(gc_block.values.xyz, pl_data);
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 101


 3340              		.loc 1 1624 0
 3341 1368 9DF85C30 		ldrb	r3, [sp, #92]	@ zero_extendqisi2
1625:grbl/gcode.c  **** 			}
 3342              		.loc 1 1625 0
 3343 136c 0E4D     		ldr	r5, .L574
1624:grbl/gcode.c  **** 				mc_line(gc_block.values.xyz, pl_data);
 3344              		.loc 1 1624 0
 3345 136e 43F00103 		orr	r3, r3, #1
1625:grbl/gcode.c  **** 			}
 3346              		.loc 1 1625 0
 3347 1372 15A9     		add	r1, sp, #84
 3348              	.LVL414:
 3349 1374 2846     		mov	r0, r5
1624:grbl/gcode.c  **** 				mc_line(gc_block.values.xyz, pl_data);
 3350              		.loc 1 1624 0
 3351 1376 8DF85C30 		strb	r3, [sp, #92]
 3352 137a 0C4C     		ldr	r4, .L574+4
1625:grbl/gcode.c  **** 			}
 3353              		.loc 1 1625 0
 3354 137c FFF7FEFF 		bl	mc_line
 3355              	.LVL415:
 3356 1380 C8E5     		b	.L218
 3357              	.L554:
1620:grbl/gcode.c  **** 			}
 3358              		.loc 1 1620 0
 3359 1382 094D     		ldr	r5, .L574
 3360 1384 15A9     		add	r1, sp, #84
 3361              	.LVL416:
 3362 1386 2846     		mov	r0, r5
 3363 1388 FFF7FEFF 		bl	mc_line
 3364              	.LVL417:
 3365 138c 074C     		ldr	r4, .L574+4
 3366 138e C1E5     		b	.L218
 3367              	.LVL418:
 3368              	.L557:
 3369              	.LBE24:
1587:grbl/gcode.c  **** 		}
 3370              		.loc 1 1587 0
 3371 1390 15A9     		add	r1, sp, #84
 3372              	.LVL419:
 3373 1392 0548     		ldr	r0, .L574
 3374 1394 FFF7FEFF 		bl	mc_line
 3375              	.LVL420:
 3376 1398 34E6     		b	.L213
 3377              	.LVL421:
 3378              	.L558:
 3379              	.LBB25:
1261:grbl/gcode.c  **** 				}
 3380              		.loc 1 1261 0
 3381 139a 099B     		ldr	r3, [sp, #36]
 3382 139c 43F00803 		orr	r3, r3, #8
 3383 13a0 DBB2     		uxtb	r3, r3
 3384 13a2 0993     		str	r3, [sp, #36]
 3385              	.LVL422:
 3386 13a4 17E7     		b	.L175
 3387              	.L575:
 3388 13a6 00BF     		.align	2
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 102


 3389              	.L574:
 3390 13a8 38000000 		.word	gc_block+56
 3391 13ac 20000000 		.word	gc_state+32
 3392              	.LBE25:
 3393              		.cfi_endproc
 3394              	.LFE705:
 3396              		.comm	gc_block,76,4
 3397              		.comm	gc_state,72,4
 3398              		.text
 3399              	.Letext0:
 3400              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 3401              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 3402              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 3403              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 3404              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 3405              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/math.h"
 3406              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 3407              		.file 9 "Drivers/CMSIS/Include/core_cm3.h"
 3408              		.file 10 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 3409              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 3410              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h"
 3411              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h"
 3412              		.file 14 "stm32/stm32utilities.h"
 3413              		.file 15 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 3414              		.file 16 "grbl/settings.h"
 3415              		.file 17 "grbl/system.h"
 3416              		.file 18 "grbl/planner.h"
 3417              		.file 19 "grbl/gcode.h"
 3418              		.file 20 "grbl/nuts_bolts.h"
 3419              		.file 21 "grbl/jog.h"
 3420              		.file 22 "grbl/motion_control.h"
 3421              		.file 23 "<built-in>"
 3422              		.file 24 "grbl/spindle_control.h"
 3423              		.file 25 "grbl/coolant_control.h"
 3424              		.file 26 "stm32/inoutputs.h"
 3425              		.file 27 "grbl/protocol.h"
 3426              		.file 28 "grbl/report.h"
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 103


DEFINED SYMBOLS
                            *ABS*:0000000000000000 gcode.c
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:16     .text.gc_init:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:24     .text.gc_init:0000000000000000 gc_init
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:65     .text.gc_init:0000000000000024 $d
                            *COM*:0000000000000048 gc_state
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:71     .text.gc_sync_position:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:79     .text.gc_sync_position:0000000000000000 gc_sync_position
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:94     .text.gc_sync_position:0000000000000008 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:115    .text.gc_execute_line:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:123    .text.gc_execute_line:0000000000000000 gc_execute_line
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:263    .text.gc_execute_line:00000000000000d6 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:368    .text.gc_execute_line:00000000000001a0 $d
                            *COM*:000000000000004c gc_block
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:373    .text.gc_execute_line:00000000000001ac $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:377    .text.gc_execute_line:00000000000001b8 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:472    .text.gc_execute_line:0000000000000276 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:481    .text.gc_execute_line:0000000000000280 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:504    .text.gc_execute_line:00000000000002ac $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:1102   .text.gc_execute_line:0000000000000638 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:1108   .text.gc_execute_line:0000000000000644 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:1515   .text.gc_execute_line:0000000000000880 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:1523   .text.gc_execute_line:0000000000000894 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:1997   .text.gc_execute_line:0000000000000b30 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:2007   .text.gc_execute_line:0000000000000b4c $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:2462   .text.gc_execute_line:0000000000000dd0 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:2468   .text.gc_execute_line:0000000000000de0 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:2843   .text.gc_execute_line:000000000000101c $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:2854   .text.gc_execute_line:0000000000001038 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:3323   .text.gc_execute_line:0000000000001338 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:3341   .text.gc_execute_line:0000000000001368 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s:3390   .text.gc_execute_line:00000000000013a8 $d

UNDEFINED SYMBOLS
memset
settings_read_coord_data
report_status_message
system_convert_array_steps_to_mpos
sys_position
__aeabi_f2d
__aeabi_d2uiz
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
__aeabi_f2iz
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_dmul
__aeabi_d2f
__aeabi_fadd
__aeabi_fcmpeq
__aeabi_dsub
__aeabi_ddiv
__aeabi_dcmpgt
read_float
trunc
round
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccEc4ukT.s 			page 104


jog_execute
spindle_sync
coolant_sync
system_flag_wco_change
settings_write_coord_data
outputs_digital_action
wait_on_input_action
outputs_analog_action
acceleration_scaling
plan_reset
settings
protocol_buffer_synchronize
spindle_set_state
coolant_set_state
report_feedback_message
system_set_exec_state_flag
protocol_execute_realtime
mc_probe_cycle
mc_dwell
mc_line
sys
memcmp
sqrt
hypot_f
mc_arc
