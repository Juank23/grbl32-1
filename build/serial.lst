ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"serial.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.serial_get_rx_buffer_available,"ax",%progbits
  16              		.align	1
  17              		.p2align 2,,3
  18              		.global	serial_get_rx_buffer_available
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	serial_get_rx_buffer_available:
  25              	.LFB703:
  26              		.file 1 "grbl/serial.c"
   1:grbl/serial.c **** /*
   2:grbl/serial.c ****   serial.c - Low level functions for sending and recieving bytes via the serial port
   3:grbl/serial.c ****   Part of Grbl
   4:grbl/serial.c **** 
   5:grbl/serial.c ****   Copyright (c) 2011-2016 Sungeun K. Jeon for Gnea Research LLC
   6:grbl/serial.c ****   Copyright (c) 2009-2011 Simen Svale Skogsrud
   7:grbl/serial.c ****   Copyright (c) 2018-2019 Thomas Truong
   8:grbl/serial.c **** 
   9:grbl/serial.c ****   Grbl is free software: you can redistribute it and/or modify
  10:grbl/serial.c ****   it under the terms of the GNU General Public License as published by
  11:grbl/serial.c ****   the Free Software Foundation, either version 3 of the License, or
  12:grbl/serial.c ****   (at your option) any later version.
  13:grbl/serial.c **** 
  14:grbl/serial.c ****   Grbl is distributed in the hope that it will be useful,
  15:grbl/serial.c ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:grbl/serial.c ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:grbl/serial.c ****   GNU General Public License for more details.
  18:grbl/serial.c **** 
  19:grbl/serial.c ****   You should have received a copy of the GNU General Public License
  20:grbl/serial.c ****   along with Grbl.  If not, see <http://www.gnu.org/licenses/>.
  21:grbl/serial.c **** */
  22:grbl/serial.c **** 
  23:grbl/serial.c **** #include "grbl.h"
  24:grbl/serial.c **** 
  25:grbl/serial.c **** #ifdef STM32
  26:grbl/serial.c ****   #ifdef STM32F1
  27:grbl/serial.c **** 		#define pUSART ((USART_TypeDef *) USART1_BASE)
  28:grbl/serial.c ****   #endif
  29:grbl/serial.c ****   #ifdef STM32F4
  30:grbl/serial.c **** 		#define pUSART ((USART_TypeDef *) USART1_BASE)
  31:grbl/serial.c ****   #endif
  32:grbl/serial.c **** 
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s 			page 2


  33:grbl/serial.c ****   #define RX_RING_BUFFER (RX_BUFFER_SIZE)
  34:grbl/serial.c ****   #define TX_RING_BUFFER (TX_BUFFER_SIZE)
  35:grbl/serial.c **** #endif
  36:grbl/serial.c **** 
  37:grbl/serial.c **** uint8_t serial_rx_buffer[RX_RING_BUFFER];
  38:grbl/serial.c **** uint8_t serial_rx_buffer_head = 0;
  39:grbl/serial.c **** volatile uint8_t serial_rx_buffer_tail = 0;
  40:grbl/serial.c **** 
  41:grbl/serial.c **** uint8_t serial_tx_buffer[TX_RING_BUFFER];
  42:grbl/serial.c **** uint8_t serial_tx_buffer_head = 0;
  43:grbl/serial.c **** volatile uint8_t serial_tx_buffer_tail = 0;
  44:grbl/serial.c **** 
  45:grbl/serial.c **** 
  46:grbl/serial.c **** // Returns the number of bytes available in the RX serial buffer.
  47:grbl/serial.c **** uint8_t serial_get_rx_buffer_available()
  48:grbl/serial.c **** {
  27              		.loc 1 48 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  49:grbl/serial.c ****   uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
  32              		.loc 1 49 0
  33 0000 064B     		ldr	r3, .L5
  50:grbl/serial.c ****   if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
  34              		.loc 1 50 0
  35 0002 074A     		ldr	r2, .L5+4
  49:grbl/serial.c ****   uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
  36              		.loc 1 49 0
  37 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  38              		.loc 1 50 0
  39 0006 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
  49:grbl/serial.c ****   uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
  40              		.loc 1 49 0
  41 0008 DBB2     		uxtb	r3, r3
  42              	.LVL0:
  43              		.loc 1 50 0
  44 000a 9A42     		cmp	r2, r3
  45 000c 2CBF     		ite	cs
  46 000e 981E     		subcs	r0, r3, #2
  51:grbl/serial.c ****   return((rtail-serial_rx_buffer_head-1));
  47              		.loc 1 51 0
  48 0010 03F1FF30 		addcc	r0, r3, #-1
  49 0014 801A     		subs	r0, r0, r2
  50 0016 C0B2     		uxtb	r0, r0
  52:grbl/serial.c **** }
  51              		.loc 1 52 0
  52 0018 7047     		bx	lr
  53              	.L6:
  54 001a 00BF     		.align	2
  55              	.L5:
  56 001c 00000000 		.word	.LANCHOR0
  57 0020 00000000 		.word	.LANCHOR1
  58              		.cfi_endproc
  59              	.LFE703:
  61              		.section	.text.serial_get_rx_buffer_count,"ax",%progbits
  62              		.align	1
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s 			page 3


  63              		.p2align 2,,3
  64              		.global	serial_get_rx_buffer_count
  65              		.syntax unified
  66              		.thumb
  67              		.thumb_func
  68              		.fpu softvfp
  70              	serial_get_rx_buffer_count:
  71              	.LFB704:
  53:grbl/serial.c **** 
  54:grbl/serial.c **** 
  55:grbl/serial.c **** // Returns the number of bytes used in the RX serial buffer.
  56:grbl/serial.c **** // NOTE: Deprecated. Not used unless classic status reports are enabled in config.h.
  57:grbl/serial.c **** uint8_t serial_get_rx_buffer_count()
  58:grbl/serial.c **** {
  72              		.loc 1 58 0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              		@ link register save eliminated.
  59:grbl/serial.c ****   uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
  77              		.loc 1 59 0
  78 0000 054B     		ldr	r3, .L11
  60:grbl/serial.c ****   if (serial_rx_buffer_head >= rtail) { return(serial_rx_buffer_head-rtail); }
  79              		.loc 1 60 0
  80 0002 064A     		ldr	r2, .L11+4
  59:grbl/serial.c ****   uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
  81              		.loc 1 59 0
  82 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  83              		.loc 1 60 0
  84 0006 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
  59:grbl/serial.c ****   uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
  85              		.loc 1 59 0
  86 0008 DBB2     		uxtb	r3, r3
  87              	.LVL1:
  88              		.loc 1 60 0
  89 000a 9842     		cmp	r0, r3
  61:grbl/serial.c ****   return (RX_BUFFER_SIZE - (rtail-serial_rx_buffer_head));
  90              		.loc 1 61 0
  91 000c 38BF     		it	cc
  92 000e 0238     		subcc	r0, r0, #2
  93 0010 C01A     		subs	r0, r0, r3
  94 0012 C0B2     		uxtb	r0, r0
  62:grbl/serial.c **** }
  95              		.loc 1 62 0
  96 0014 7047     		bx	lr
  97              	.L12:
  98 0016 00BF     		.align	2
  99              	.L11:
 100 0018 00000000 		.word	.LANCHOR0
 101 001c 00000000 		.word	.LANCHOR1
 102              		.cfi_endproc
 103              	.LFE704:
 105              		.section	.text.serial_get_tx_buffer_count,"ax",%progbits
 106              		.align	1
 107              		.p2align 2,,3
 108              		.global	serial_get_tx_buffer_count
 109              		.syntax unified
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s 			page 4


 110              		.thumb
 111              		.thumb_func
 112              		.fpu softvfp
 114              	serial_get_tx_buffer_count:
 115              	.LFB705:
  63:grbl/serial.c **** 
  64:grbl/serial.c **** 
  65:grbl/serial.c **** // Returns the number of bytes used in the TX serial buffer.
  66:grbl/serial.c **** // NOTE: Not used except for debugging and ensuring no TX bottlenecks.
  67:grbl/serial.c **** uint8_t serial_get_tx_buffer_count()
  68:grbl/serial.c **** {
 116              		.loc 1 68 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
  69:grbl/serial.c ****   uint8_t ttail = serial_tx_buffer_tail; // Copy to limit multiple calls to volatile
 121              		.loc 1 69 0
 122 0000 054B     		ldr	r3, .L17
  70:grbl/serial.c ****   if (serial_tx_buffer_head >= ttail) { return(serial_tx_buffer_head-ttail); }
 123              		.loc 1 70 0
 124 0002 064A     		ldr	r2, .L17+4
  69:grbl/serial.c ****   uint8_t ttail = serial_tx_buffer_tail; // Copy to limit multiple calls to volatile
 125              		.loc 1 69 0
 126 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 127              		.loc 1 70 0
 128 0006 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
  69:grbl/serial.c ****   uint8_t ttail = serial_tx_buffer_tail; // Copy to limit multiple calls to volatile
 129              		.loc 1 69 0
 130 0008 DBB2     		uxtb	r3, r3
 131              	.LVL2:
 132              		.loc 1 70 0
 133 000a 9842     		cmp	r0, r3
  71:grbl/serial.c ****   return (TX_RING_BUFFER - (ttail-serial_tx_buffer_head));
 134              		.loc 1 71 0
 135 000c 38BF     		it	cc
 136 000e 8038     		subcc	r0, r0, #128
 137 0010 C01A     		subs	r0, r0, r3
 138 0012 C0B2     		uxtb	r0, r0
  72:grbl/serial.c **** }
 139              		.loc 1 72 0
 140 0014 7047     		bx	lr
 141              	.L18:
 142 0016 00BF     		.align	2
 143              	.L17:
 144 0018 00000000 		.word	.LANCHOR2
 145 001c 00000000 		.word	.LANCHOR3
 146              		.cfi_endproc
 147              	.LFE705:
 149              		.section	.text.serial_init,"ax",%progbits
 150              		.align	1
 151              		.p2align 2,,3
 152              		.global	serial_init
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 156              		.fpu softvfp
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s 			page 5


 158              	serial_init:
 159              	.LFB706:
  73:grbl/serial.c **** 
  74:grbl/serial.c **** void serial_init()
  75:grbl/serial.c **** {
 160              		.loc 1 75 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
  76:grbl/serial.c **** }
 165              		.loc 1 76 0
 166 0000 7047     		bx	lr
 167              		.cfi_endproc
 168              	.LFE706:
 170 0002 00BF     		.section	.text.serial_write,"ax",%progbits
 171              		.align	1
 172              		.p2align 2,,3
 173              		.global	serial_write
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu softvfp
 179              	serial_write:
 180              	.LFB707:
  77:grbl/serial.c **** 
  78:grbl/serial.c **** 
  79:grbl/serial.c **** // Writes one byte to the TX serial buffer. Called by main program.
  80:grbl/serial.c **** void serial_write(uint8_t data)
  81:grbl/serial.c **** {
 181              		.loc 1 81 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              		@ link register save eliminated.
 186              	.LVL3:
  82:grbl/serial.c **** #ifdef STM32
  83:grbl/serial.c **** 	uart_sendch(data);
 187              		.loc 1 83 0
 188 0000 FFF7FEBF 		b	uart_sendch
 189              	.LVL4:
 190              		.cfi_endproc
 191              	.LFE707:
 193              		.section	.text.serial_read,"ax",%progbits
 194              		.align	1
 195              		.p2align 2,,3
 196              		.global	serial_read
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 200              		.fpu softvfp
 202              	serial_read:
 203              	.LFB708:
  84:grbl/serial.c **** #endif
  85:grbl/serial.c **** }
  86:grbl/serial.c **** 
  87:grbl/serial.c **** 
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s 			page 6


  88:grbl/serial.c **** // Fetches the first byte in the serial read buffer. Called by main program.
  89:grbl/serial.c **** uint8_t serial_read()
  90:grbl/serial.c **** {
 204              		.loc 1 90 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              		@ link register save eliminated.
  91:grbl/serial.c ****   uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatil
 209              		.loc 1 91 0
 210 0000 0849     		ldr	r1, .L25
  92:grbl/serial.c ****   if (serial_rx_buffer_head == tail) {
 211              		.loc 1 92 0
 212 0002 094B     		ldr	r3, .L25+4
  91:grbl/serial.c ****   uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatil
 213              		.loc 1 91 0
 214 0004 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 215              		.loc 1 92 0
 216 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  91:grbl/serial.c ****   uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatil
 217              		.loc 1 91 0
 218 0008 D2B2     		uxtb	r2, r2
 219              	.LVL5:
 220              		.loc 1 92 0
 221 000a 9342     		cmp	r3, r2
 222 000c 08D0     		beq	.L24
 223              	.LBB2:
  93:grbl/serial.c ****     return SERIAL_NO_DATA;
  94:grbl/serial.c ****   } else {
  95:grbl/serial.c ****     uint8_t data = serial_rx_buffer[tail];
  96:grbl/serial.c **** 
  97:grbl/serial.c ****     tail++;
 224              		.loc 1 97 0
 225 000e 531C     		adds	r3, r2, #1
 226 0010 DBB2     		uxtb	r3, r3
  98:grbl/serial.c ****     if (tail == RX_RING_BUFFER) { tail = 0; }
 227              		.loc 1 98 0
 228 0012 FE2B     		cmp	r3, #254
 229 0014 08BF     		it	eq
 230 0016 0023     		moveq	r3, #0
  95:grbl/serial.c **** 
 231              		.loc 1 95 0
 232 0018 0448     		ldr	r0, .L25+8
  99:grbl/serial.c ****     serial_rx_buffer_tail = tail;
 233              		.loc 1 99 0
 234 001a 0B70     		strb	r3, [r1]
  95:grbl/serial.c **** 
 235              		.loc 1 95 0
 236 001c 805C     		ldrb	r0, [r0, r2]	@ zero_extendqisi2
 237              	.LVL6:
 100:grbl/serial.c **** 
 101:grbl/serial.c ****     return data;
 238              		.loc 1 101 0
 239 001e 7047     		bx	lr
 240              	.LVL7:
 241              	.L24:
 242              	.LBE2:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s 			page 7


  93:grbl/serial.c ****   } else {
 243              		.loc 1 93 0
 244 0020 FF20     		movs	r0, #255
 102:grbl/serial.c ****   }
 103:grbl/serial.c **** }
 245              		.loc 1 103 0
 246 0022 7047     		bx	lr
 247              	.L26:
 248              		.align	2
 249              	.L25:
 250 0024 00000000 		.word	.LANCHOR0
 251 0028 00000000 		.word	.LANCHOR1
 252 002c 00000000 		.word	serial_rx_buffer
 253              		.cfi_endproc
 254              	.LFE708:
 256              		.section	.text.HandleUartIT,"ax",%progbits
 257              		.align	1
 258              		.p2align 2,,3
 259              		.global	HandleUartIT
 260              		.syntax unified
 261              		.thumb
 262              		.thumb_func
 263              		.fpu softvfp
 265              	HandleUartIT:
 266              	.LFB709:
 104:grbl/serial.c **** 
 105:grbl/serial.c **** #ifdef STM32
 106:grbl/serial.c **** void HandleUartIT(uint8_t data)
 107:grbl/serial.c **** {
 267              		.loc 1 107 0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 0
 270              		@ frame_needed = 0, uses_anonymous_args = 0
 271              		@ link register save eliminated.
 272              	.LVL8:
 108:grbl/serial.c **** 	uint8_t next_head;
 109:grbl/serial.c ****   // Pick off realtime command characters directly from the serial stream. These characters are
 110:grbl/serial.c ****   // not passed into the main buffer, but these set system state flag bits for realtime execution.
 111:grbl/serial.c **** 	switch (data) {
 273              		.loc 1 111 0
 274 0000 2128     		cmp	r0, #33
 275 0002 21D0     		beq	.L29
 276 0004 09D9     		bls	.L62
 277 0006 3F28     		cmp	r0, #63
 278 0008 04D0     		beq	.L32
 279 000a 7E28     		cmp	r0, #126
 280 000c 09D1     		bne	.L28
 112:grbl/serial.c ****     case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 113:grbl/serial.c ****     case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 114:grbl/serial.c ****     case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 281              		.loc 1 114 0
 282 000e 0220     		movs	r0, #2
 283              	.LVL9:
 284 0010 FFF7FEBF 		b	system_set_exec_state_flag
 285              	.LVL10:
 286              	.L32:
 113:grbl/serial.c ****     case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s 			page 8


 287              		.loc 1 113 0
 288 0014 0120     		movs	r0, #1
 289              	.LVL11:
 290 0016 FFF7FEBF 		b	system_set_exec_state_flag
 291              	.LVL12:
 292              	.L62:
 111:grbl/serial.c ****     case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 293              		.loc 1 111 0
 294 001a 1828     		cmp	r0, #24
 295 001c 01D1     		bne	.L28
 112:grbl/serial.c ****     case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 296              		.loc 1 112 0
 297 001e FFF7FEBF 		b	mc_reset
 298              	.LVL13:
 299              	.L28:
 115:grbl/serial.c ****     case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 116:grbl/serial.c ****     default :
 117:grbl/serial.c ****       if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 300              		.loc 1 117 0
 301 0022 0206     		lsls	r2, r0, #24
 302 0024 13D4     		bmi	.L63
 107:grbl/serial.c **** 	uint8_t next_head;
 303              		.loc 1 107 0
 304 0026 10B4     		push	{r4}
 305              	.LCFI0:
 306              		.cfi_def_cfa_offset 4
 307              		.cfi_offset 4, -4
 118:grbl/serial.c ****         switch(data) {
 119:grbl/serial.c ****           case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as tr
 120:grbl/serial.c ****           case CMD_JOG_CANCEL:
 121:grbl/serial.c ****             if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 122:grbl/serial.c ****               system_set_exec_state_flag(EXEC_MOTION_CANCEL);
 123:grbl/serial.c ****             }
 124:grbl/serial.c ****             break;
 125:grbl/serial.c ****           #ifdef DEBUG
 126:grbl/serial.c ****           case CMD_DEBUG_REPORT: {
 127:grbl/serial.c ****             } break;
 128:grbl/serial.c ****           #endif
 129:grbl/serial.c ****           case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break
 130:grbl/serial.c ****           case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_
 131:grbl/serial.c ****           case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE
 132:grbl/serial.c ****           case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS
 133:grbl/serial.c ****           case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MIN
 134:grbl/serial.c ****           case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); bre
 135:grbl/serial.c ****           case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); b
 136:grbl/serial.c ****           case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 137:grbl/serial.c ****           case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESE
 138:grbl/serial.c ****           case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OV
 139:grbl/serial.c ****           case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_O
 140:grbl/serial.c ****           case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_
 141:grbl/serial.c ****           case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR
 142:grbl/serial.c ****           case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP)
 143:grbl/serial.c ****           case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_F
 144:grbl/serial.c ****           #ifdef ENABLE_M7
 145:grbl/serial.c ****             case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_
 146:grbl/serial.c ****           #endif
 147:grbl/serial.c ****         }
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s 			page 9


 148:grbl/serial.c ****         // Throw away any unfound extended-ASCII character by not passing it to the serial buffer.
 149:grbl/serial.c ****       } else { // Write character to buffer
 150:grbl/serial.c ****         next_head = serial_rx_buffer_head + 1;
 308              		.loc 1 150 0
 309 0028 3049     		ldr	r1, .L65
 151:grbl/serial.c ****         if (next_head == RX_RING_BUFFER) { next_head = 0; }
 152:grbl/serial.c **** 
 153:grbl/serial.c ****         // Write data to buffer unless it is full.
 154:grbl/serial.c ****         if (next_head != serial_rx_buffer_tail) {
 310              		.loc 1 154 0
 311 002a 314B     		ldr	r3, .L65+4
 150:grbl/serial.c ****         if (next_head == RX_RING_BUFFER) { next_head = 0; }
 312              		.loc 1 150 0
 313 002c 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 314              		.loc 1 154 0
 315 002e 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 150:grbl/serial.c ****         if (next_head == RX_RING_BUFFER) { next_head = 0; }
 316              		.loc 1 150 0
 317 0030 531C     		adds	r3, r2, #1
 318 0032 DBB2     		uxtb	r3, r3
 319              	.LVL14:
 151:grbl/serial.c ****         if (next_head == RX_RING_BUFFER) { next_head = 0; }
 320              		.loc 1 151 0
 321 0034 FE2B     		cmp	r3, #254
 322 0036 08BF     		it	eq
 323 0038 0023     		moveq	r3, #0
 324              	.LVL15:
 325              		.loc 1 154 0
 326 003a 9C42     		cmp	r4, r3
 327 003c 02D0     		beq	.L27
 155:grbl/serial.c ****           serial_rx_buffer[serial_rx_buffer_head] = data;
 328              		.loc 1 155 0
 329 003e 2D4C     		ldr	r4, .L65+8
 156:grbl/serial.c ****           serial_rx_buffer_head = next_head;
 330              		.loc 1 156 0
 331 0040 0B70     		strb	r3, [r1]
 155:grbl/serial.c ****           serial_rx_buffer[serial_rx_buffer_head] = data;
 332              		.loc 1 155 0
 333 0042 A054     		strb	r0, [r4, r2]
 334              	.L27:
 157:grbl/serial.c ****         }
 158:grbl/serial.c ****       }
 159:grbl/serial.c ****   }
 160:grbl/serial.c **** }
 335              		.loc 1 160 0
 336 0044 10BC     		pop	{r4}
 337              	.LCFI1:
 338              		.cfi_restore 4
 339              		.cfi_def_cfa_offset 0
 340 0046 7047     		bx	lr
 341              	.LVL16:
 342              	.L29:
 115:grbl/serial.c ****     default :
 343              		.loc 1 115 0
 344 0048 0820     		movs	r0, #8
 345              	.LVL17:
 346 004a FFF7FEBF 		b	system_set_exec_state_flag
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s 			page 10


 347              	.LVL18:
 348              	.L63:
 118:grbl/serial.c ****           case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as tr
 349              		.loc 1 118 0
 350 004e 8438     		subs	r0, r0, #132
 351              	.LVL19:
 352 0050 1D28     		cmp	r0, #29
 353 0052 44D8     		bhi	.L60
 354 0054 DFE800F0 		tbb	[pc, r0]
 355              	.L37:
 356 0058 44       		.byte	(.L36-.L37)/2
 357 0059 3F       		.byte	(.L38-.L37)/2
 358 005a 43       		.byte	(.L60-.L37)/2
 359 005b 43       		.byte	(.L60-.L37)/2
 360 005c 43       		.byte	(.L60-.L37)/2
 361 005d 43       		.byte	(.L60-.L37)/2
 362 005e 43       		.byte	(.L60-.L37)/2
 363 005f 43       		.byte	(.L60-.L37)/2
 364 0060 43       		.byte	(.L60-.L37)/2
 365 0061 43       		.byte	(.L60-.L37)/2
 366 0062 43       		.byte	(.L60-.L37)/2
 367 0063 43       		.byte	(.L60-.L37)/2
 368 0064 3C       		.byte	(.L39-.L37)/2
 369 0065 39       		.byte	(.L40-.L37)/2
 370 0066 36       		.byte	(.L41-.L37)/2
 371 0067 33       		.byte	(.L42-.L37)/2
 372 0068 30       		.byte	(.L43-.L37)/2
 373 0069 2D       		.byte	(.L44-.L37)/2
 374 006a 2A       		.byte	(.L45-.L37)/2
 375 006b 27       		.byte	(.L46-.L37)/2
 376 006c 43       		.byte	(.L60-.L37)/2
 377 006d 24       		.byte	(.L47-.L37)/2
 378 006e 21       		.byte	(.L48-.L37)/2
 379 006f 1E       		.byte	(.L49-.L37)/2
 380 0070 1B       		.byte	(.L50-.L37)/2
 381 0071 18       		.byte	(.L51-.L37)/2
 382 0072 15       		.byte	(.L52-.L37)/2
 383 0073 43       		.byte	(.L60-.L37)/2
 384 0074 12       		.byte	(.L53-.L37)/2
 385 0075 0F       		.byte	(.L54-.L37)/2
 386              		.p2align 1
 387              	.L54:
 145:grbl/serial.c ****           #endif
 388              		.loc 1 145 0
 389 0076 8020     		movs	r0, #128
 390 0078 FFF7FEBF 		b	system_set_exec_accessory_override_flag
 391              	.LVL20:
 392              	.L53:
 143:grbl/serial.c ****           #ifdef ENABLE_M7
 393              		.loc 1 143 0
 394 007c 4020     		movs	r0, #64
 395 007e FFF7FEBF 		b	system_set_exec_accessory_override_flag
 396              	.LVL21:
 397              	.L52:
 142:grbl/serial.c ****           case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_F
 398              		.loc 1 142 0
 399 0082 2020     		movs	r0, #32
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s 			page 11


 400 0084 FFF7FEBF 		b	system_set_exec_accessory_override_flag
 401              	.LVL22:
 402              	.L51:
 141:grbl/serial.c ****           case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP)
 403              		.loc 1 141 0
 404 0088 1020     		movs	r0, #16
 405 008a FFF7FEBF 		b	system_set_exec_accessory_override_flag
 406              	.LVL23:
 407              	.L50:
 140:grbl/serial.c ****           case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR
 408              		.loc 1 140 0
 409 008e 0820     		movs	r0, #8
 410 0090 FFF7FEBF 		b	system_set_exec_accessory_override_flag
 411              	.LVL24:
 412              	.L49:
 139:grbl/serial.c ****           case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_
 413              		.loc 1 139 0
 414 0094 0420     		movs	r0, #4
 415 0096 FFF7FEBF 		b	system_set_exec_accessory_override_flag
 416              	.LVL25:
 417              	.L48:
 138:grbl/serial.c ****           case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_O
 418              		.loc 1 138 0
 419 009a 0220     		movs	r0, #2
 420 009c FFF7FEBF 		b	system_set_exec_accessory_override_flag
 421              	.LVL26:
 422              	.L47:
 137:grbl/serial.c ****           case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OV
 423              		.loc 1 137 0
 424 00a0 0120     		movs	r0, #1
 425 00a2 FFF7FEBF 		b	system_set_exec_accessory_override_flag
 426              	.LVL27:
 427              	.L46:
 136:grbl/serial.c ****           case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESE
 428              		.loc 1 136 0
 429 00a6 8020     		movs	r0, #128
 430 00a8 FFF7FEBF 		b	system_set_exec_motion_override_flag
 431              	.LVL28:
 432              	.L45:
 135:grbl/serial.c ****           case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 433              		.loc 1 135 0
 434 00ac 4020     		movs	r0, #64
 435 00ae FFF7FEBF 		b	system_set_exec_motion_override_flag
 436              	.LVL29:
 437              	.L44:
 134:grbl/serial.c ****           case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); b
 438              		.loc 1 134 0
 439 00b2 2020     		movs	r0, #32
 440 00b4 FFF7FEBF 		b	system_set_exec_motion_override_flag
 441              	.LVL30:
 442              	.L43:
 133:grbl/serial.c ****           case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); bre
 443              		.loc 1 133 0
 444 00b8 1020     		movs	r0, #16
 445 00ba FFF7FEBF 		b	system_set_exec_motion_override_flag
 446              	.LVL31:
 447              	.L42:
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s 			page 12


 132:grbl/serial.c ****           case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MIN
 448              		.loc 1 132 0
 449 00be 0820     		movs	r0, #8
 450 00c0 FFF7FEBF 		b	system_set_exec_motion_override_flag
 451              	.LVL32:
 452              	.L41:
 131:grbl/serial.c ****           case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS
 453              		.loc 1 131 0
 454 00c4 0420     		movs	r0, #4
 455 00c6 FFF7FEBF 		b	system_set_exec_motion_override_flag
 456              	.LVL33:
 457              	.L40:
 130:grbl/serial.c ****           case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE
 458              		.loc 1 130 0
 459 00ca 0220     		movs	r0, #2
 460 00cc FFF7FEBF 		b	system_set_exec_motion_override_flag
 461              	.LVL34:
 462              	.L39:
 129:grbl/serial.c ****           case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_
 463              		.loc 1 129 0
 464 00d0 0120     		movs	r0, #1
 465 00d2 FFF7FEBF 		b	system_set_exec_motion_override_flag
 466              	.LVL35:
 467              	.L38:
 121:grbl/serial.c ****               system_set_exec_state_flag(EXEC_MOTION_CANCEL);
 468              		.loc 1 121 0
 469 00d6 084B     		ldr	r3, .L65+12
 470 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 471 00da 9B06     		lsls	r3, r3, #26
 472 00dc 03D4     		bmi	.L64
 473              	.L60:
 474 00de 7047     		bx	lr
 475              	.L36:
 119:grbl/serial.c ****           case CMD_JOG_CANCEL:
 476              		.loc 1 119 0
 477 00e0 2020     		movs	r0, #32
 478 00e2 FFF7FEBF 		b	system_set_exec_state_flag
 479              	.LVL36:
 480              	.L64:
 122:grbl/serial.c ****             }
 481              		.loc 1 122 0
 482 00e6 4020     		movs	r0, #64
 483 00e8 FFF7FEBF 		b	system_set_exec_state_flag
 484              	.LVL37:
 485              	.L66:
 486              		.align	2
 487              	.L65:
 488 00ec 00000000 		.word	.LANCHOR1
 489 00f0 00000000 		.word	.LANCHOR0
 490 00f4 00000000 		.word	serial_rx_buffer
 491 00f8 00000000 		.word	sys
 492              		.cfi_endproc
 493              	.LFE709:
 495              		.section	.text.serial_reset_read_buffer,"ax",%progbits
 496              		.align	1
 497              		.p2align 2,,3
 498              		.global	serial_reset_read_buffer
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s 			page 13


 499              		.syntax unified
 500              		.thumb
 501              		.thumb_func
 502              		.fpu softvfp
 504              	serial_reset_read_buffer:
 505              	.LFB710:
 161:grbl/serial.c **** #endif
 162:grbl/serial.c **** 
 163:grbl/serial.c **** 
 164:grbl/serial.c **** void serial_reset_read_buffer()
 165:grbl/serial.c **** {
 506              		.loc 1 165 0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 0
 509              		@ frame_needed = 0, uses_anonymous_args = 0
 510              		@ link register save eliminated.
 166:grbl/serial.c ****   serial_rx_buffer_tail = serial_rx_buffer_head;
 511              		.loc 1 166 0
 512 0000 024A     		ldr	r2, .L68
 513 0002 034B     		ldr	r3, .L68+4
 514 0004 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 515 0006 1A70     		strb	r2, [r3]
 167:grbl/serial.c **** }
 516              		.loc 1 167 0
 517 0008 7047     		bx	lr
 518              	.L69:
 519 000a 00BF     		.align	2
 520              	.L68:
 521 000c 00000000 		.word	.LANCHOR1
 522 0010 00000000 		.word	.LANCHOR0
 523              		.cfi_endproc
 524              	.LFE710:
 526              		.global	serial_tx_buffer_tail
 527              		.global	serial_tx_buffer_head
 528              		.comm	serial_tx_buffer,128,4
 529              		.global	serial_rx_buffer_tail
 530              		.global	serial_rx_buffer_head
 531              		.comm	serial_rx_buffer,254,4
 532              		.section	.bss.serial_rx_buffer_head,"aw",%nobits
 533              		.set	.LANCHOR1,. + 0
 536              	serial_rx_buffer_head:
 537 0000 00       		.space	1
 538              		.section	.bss.serial_rx_buffer_tail,"aw",%nobits
 539              		.set	.LANCHOR0,. + 0
 542              	serial_rx_buffer_tail:
 543 0000 00       		.space	1
 544              		.section	.bss.serial_tx_buffer_head,"aw",%nobits
 545              		.set	.LANCHOR3,. + 0
 548              	serial_tx_buffer_head:
 549 0000 00       		.space	1
 550              		.section	.bss.serial_tx_buffer_tail,"aw",%nobits
 551              		.set	.LANCHOR2,. + 0
 554              	serial_tx_buffer_tail:
 555 0000 00       		.space	1
 556              		.text
 557              	.Letext0:
 558              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s 			page 14


 559              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 560              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 561              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 562              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 563              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/math.h"
 564              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 565              		.file 9 "Drivers/CMSIS/Include/core_cm3.h"
 566              		.file 10 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 567              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 568              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h"
 569              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h"
 570              		.file 14 "stm32/stm32utilities.h"
 571              		.file 15 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 572              		.file 16 "grbl/settings.h"
 573              		.file 17 "grbl/system.h"
 574              		.file 18 "grbl/gcode.h"
 575              		.file 19 "grbl/motion_control.h"
ARM GAS  /var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 serial.c
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:16     .text.serial_get_rx_buffer_available:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:24     .text.serial_get_rx_buffer_available:0000000000000000 serial_get_rx_buffer_available
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:56     .text.serial_get_rx_buffer_available:000000000000001c $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:62     .text.serial_get_rx_buffer_count:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:70     .text.serial_get_rx_buffer_count:0000000000000000 serial_get_rx_buffer_count
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:100    .text.serial_get_rx_buffer_count:0000000000000018 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:106    .text.serial_get_tx_buffer_count:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:114    .text.serial_get_tx_buffer_count:0000000000000000 serial_get_tx_buffer_count
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:144    .text.serial_get_tx_buffer_count:0000000000000018 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:150    .text.serial_init:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:158    .text.serial_init:0000000000000000 serial_init
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:171    .text.serial_write:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:179    .text.serial_write:0000000000000000 serial_write
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:194    .text.serial_read:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:202    .text.serial_read:0000000000000000 serial_read
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:250    .text.serial_read:0000000000000024 $d
                            *COM*:00000000000000fe serial_rx_buffer
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:257    .text.HandleUartIT:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:265    .text.HandleUartIT:0000000000000000 HandleUartIT
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:356    .text.HandleUartIT:0000000000000058 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:386    .text.HandleUartIT:0000000000000076 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:488    .text.HandleUartIT:00000000000000ec $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:496    .text.serial_reset_read_buffer:0000000000000000 $t
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:504    .text.serial_reset_read_buffer:0000000000000000 serial_reset_read_buffer
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:521    .text.serial_reset_read_buffer:000000000000000c $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:554    .bss.serial_tx_buffer_tail:0000000000000000 serial_tx_buffer_tail
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:548    .bss.serial_tx_buffer_head:0000000000000000 serial_tx_buffer_head
                            *COM*:0000000000000080 serial_tx_buffer
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:542    .bss.serial_rx_buffer_tail:0000000000000000 serial_rx_buffer_tail
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:536    .bss.serial_rx_buffer_head:0000000000000000 serial_rx_buffer_head
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:537    .bss.serial_rx_buffer_head:0000000000000000 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:543    .bss.serial_rx_buffer_tail:0000000000000000 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:549    .bss.serial_tx_buffer_head:0000000000000000 $d
/var/folders/m1/3lv6xmzs0mlckxs4mx90nfb40000gn/T//ccoXyBl2.s:555    .bss.serial_tx_buffer_tail:0000000000000000 $d

UNDEFINED SYMBOLS
uart_sendch
system_set_exec_state_flag
mc_reset
system_set_exec_accessory_override_flag
system_set_exec_motion_override_flag
sys
